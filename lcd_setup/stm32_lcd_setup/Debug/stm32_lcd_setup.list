
stm32_lcd_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb4  08003fb4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fbc  08003fbc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000007c  08004040  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004040  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad35  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001810  00000000  00000000  0002ade1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016857  00000000  00000000  0002d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bee8  00000000  00000000  0004413f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008899a  00000000  00000000  00050027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d89c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003250  00000000  00000000  000d8a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000dbc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000dbc88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e3c 	.word	0x08003e3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08003e3c 	.word	0x08003e3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
uint16_t counter = 0;



int main(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

	//initialize i2c, gpio, and uart peripherals
	HAL_Init();
 800058a:	f000 fc99 	bl	8000ec0 <HAL_Init>
	SystemClock_Config();
 800058e:	f000 f957 	bl	8000840 <SystemClock_Config>
	MX_GPIO_Init();
 8000592:	f000 fa19 	bl	80009c8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000596:	f000 f9ed 	bl	8000974 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800059a:	f000 f9bd 	bl	8000918 <MX_I2C1_Init>
	srand(time(0));
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fc1e 	bl	8002de0 <time>
 80005a4:	4602      	mov	r2, r0
 80005a6:	460b      	mov	r3, r1
 80005a8:	4613      	mov	r3, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fbac 	bl	8002d08 <srand>

	*sentData = 1;
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <main+0xc8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	sendData();
 80005b8:	f000 f92a 	bl	8000810 <sendData>

	//WAIT FOR STM32 ON-BOARD BUTTON PRESS TO START GAME
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80005bc:	bf00      	nop
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4823      	ldr	r0, [pc, #140]	; (8000650 <main+0xcc>)
 80005c4:	f000 ff7c 	bl	80014c0 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f7      	bne.n	80005be <main+0x3a>
	while (1)
	{
		//START PATTERN GENERATION

		//send level to arduino to display on 7 Segment
		*sentData = level;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <main+0xd0>)
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <main+0xc8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	701a      	strb	r2, [r3, #0]
		sendData();
 80005da:	f000 f919 	bl	8000810 <sendData>

		//light LED's and generate pattern
		for (uint16_t i = 0; i < level; ++i)
 80005de:	2300      	movs	r3, #0
 80005e0:	80fb      	strh	r3, [r7, #6]
 80005e2:	e004      	b.n	80005ee <main+0x6a>
		{
			led_pattern_gen();
 80005e4:	f000 f83a 	bl	800065c <led_pattern_gen>
		for (uint16_t i = 0; i < level; ++i)
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	3301      	adds	r3, #1
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <main+0xd0>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3f5      	bcc.n	80005e4 <main+0x60>
		}

		for (uint16_t i = 0; i < level; ++i)
 80005f8:	2300      	movs	r3, #0
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	e00c      	b.n	8000618 <main+0x94>
		{
			bttn_pattern[i] = button_matching();
 80005fe:	88bc      	ldrh	r4, [r7, #4]
 8000600:	f000 f870 	bl	80006e4 <button_matching>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <main+0xd4>)
 800060a:	551a      	strb	r2, [r3, r4]
			HAL_Delay(250);
 800060c:	20fa      	movs	r0, #250	; 0xfa
 800060e:	f000 fcc9 	bl	8000fa4 <HAL_Delay>
		for (uint16_t i = 0; i < level; ++i)
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	80bb      	strh	r3, [r7, #4]
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <main+0xd0>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	88ba      	ldrh	r2, [r7, #4]
 800061e:	429a      	cmp	r2, r3
 8000620:	d3ed      	bcc.n	80005fe <main+0x7a>
		}

		//if an error was found
		if (!pattern_check())
 8000622:	f000 f89d 	bl	8000760 <pattern_check>
 8000626:	4603      	mov	r3, r0
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d106      	bne.n	8000640 <main+0xbc>
			break;

		//if an error wasn't found
		next_level();
 8000632:	f000 f8bd 	bl	80007b0 <next_level>
		HAL_Delay(3000);
 8000636:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800063a:	f000 fcb3 	bl	8000fa4 <HAL_Delay>
		*sentData = level;
 800063e:	e7c6      	b.n	80005ce <main+0x4a>
			break;
 8000640:	bf00      	nop
 8000642:	2300      	movs	r3, #0
	}

}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	20000000 	.word	0x20000000
 8000650:	40020800 	.word	0x40020800
 8000654:	2000000a 	.word	0x2000000a
 8000658:	200001c8 	.word	0x200001c8

0800065c <led_pattern_gen>:

void led_pattern_gen()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t led = (rand() % (2 - 0 + 1)) + 0;
 8000662:	f002 fb7f 	bl	8002d64 <rand>
 8000666:	4602      	mov	r2, r0
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <led_pattern_gen+0x74>)
 800066a:	fb83 3102 	smull	r3, r1, r3, r2
 800066e:	17d3      	asrs	r3, r2, #31
 8000670:	1ac9      	subs	r1, r1, r3
 8000672:	460b      	mov	r3, r1
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	440b      	add	r3, r1
 8000678:	1ad1      	subs	r1, r2, r3
 800067a:	460b      	mov	r3, r1
 800067c:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(500);
 800067e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000682:	f000 fc8f 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, led_arr[led]);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <led_pattern_gen+0x78>)
 800068a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800068e:	4619      	mov	r1, r3
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <led_pattern_gen+0x7c>)
 8000692:	f000 ff46 	bl	8001522 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069a:	f000 fc83 	bl	8000fa4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, led_arr[led]);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <led_pattern_gen+0x78>)
 80006a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <led_pattern_gen+0x7c>)
 80006aa:	f000 ff3a 	bl	8001522 <HAL_GPIO_TogglePin>

	led_pattern[counter] = led;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <led_pattern_gen+0x80>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <led_pattern_gen+0x84>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	5453      	strb	r3, [r2, r1]
	counter++;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <led_pattern_gen+0x80>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <led_pattern_gen+0x80>)
 80006c4:	801a      	strh	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	55555556 	.word	0x55555556
 80006d4:	20000004 	.word	0x20000004
 80006d8:	40020800 	.word	0x40020800
 80006dc:	2000022c 	.word	0x2000022c
 80006e0:	20000164 	.word	0x20000164

080006e4 <button_matching>:

uint8_t button_matching()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 80006e8:	e01d      	b.n	8000726 <button_matching+0x42>
	{
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	481b      	ldr	r0, [pc, #108]	; (800075c <button_matching+0x78>)
 80006f0:	f000 fee6 	bl	80014c0 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <button_matching+0x1a>
		{
			return 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e02b      	b.n	8000756 <button_matching+0x72>
		}
		else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4816      	ldr	r0, [pc, #88]	; (800075c <button_matching+0x78>)
 8000704:	f000 fedc 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <button_matching+0x2e>
		{
			return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e021      	b.n	8000756 <button_matching+0x72>
		}
		else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <button_matching+0x78>)
 8000718:	f000 fed2 	bl	80014c0 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <button_matching+0x42>
		{
			return 2;
 8000722:	2302      	movs	r3, #2
 8000724:	e017      	b.n	8000756 <button_matching+0x72>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <button_matching+0x78>)
 800072c:	f000 fec8 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00f      	beq.n	8000756 <button_matching+0x72>
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <button_matching+0x78>)
 800073c:	f000 fec0 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d007      	beq.n	8000756 <button_matching+0x72>
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <button_matching+0x78>)
 800074c:	f000 feb8 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1c9      	bne.n	80006ea <button_matching+0x6>
		}
	}
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400

08000760 <pattern_check>:

bool pattern_check()
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	for (int i = 0; i < level; ++i)
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	e00e      	b.n	800078a <pattern_check+0x2a>
	{
		if (led_pattern[i] != bttn_pattern[i])
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <pattern_check+0x44>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <pattern_check+0x48>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d001      	beq.n	8000784 <pattern_check+0x24>
			return false;
 8000780:	2300      	movs	r3, #0
 8000782:	e009      	b.n	8000798 <pattern_check+0x38>
	for (int i = 0; i < level; ++i)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <pattern_check+0x4c>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4293      	cmp	r3, r2
 8000794:	dbea      	blt.n	800076c <pattern_check+0xc>
	}

	return true;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000164 	.word	0x20000164
 80007a8:	200001c8 	.word	0x200001c8
 80007ac:	2000000a 	.word	0x2000000a

080007b0 <next_level>:

void next_level()
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
	//reset user button and led patterns
	for (int i = 0; i < level; ++i)
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e00c      	b.n	80007d6 <next_level+0x26>
	{
		led_pattern[i] = 0;
 80007bc:	4a10      	ldr	r2, [pc, #64]	; (8000800 <next_level+0x50>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		bttn_pattern[i] = 0;
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <next_level+0x54>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < level; ++i)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <next_level+0x58>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4293      	cmp	r3, r2
 80007e0:	dbec      	blt.n	80007bc <next_level+0xc>
	}

	level++;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <next_level+0x58>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <next_level+0x58>)
 80007ec:	801a      	strh	r2, [r3, #0]
	counter = 0;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <next_level+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	801a      	strh	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000164 	.word	0x20000164
 8000804:	200001c8 	.word	0x200001c8
 8000808:	2000000a 	.word	0x2000000a
 800080c:	2000022c 	.word	0x2000022c

08000810 <sendData>:

void sendData()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af02      	add	r7, sp, #8
	//wait for i2c data to be sent
	while(HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_ADDRESS, STM32DataBuffer, 1, 100) != HAL_OK);
 8000816:	bf00      	nop
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	4a06      	ldr	r2, [pc, #24]	; (8000838 <sendData+0x28>)
 8000820:	2166      	movs	r1, #102	; 0x66
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <sendData+0x2c>)
 8000824:	f000 ffdc 	bl	80017e0 <HAL_I2C_Master_Transmit>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f4      	bne.n	8000818 <sendData+0x8>
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000130 	.word	0x20000130
 800083c:	20000098 	.word	0x20000098

08000840 <SystemClock_Config>:
	//wait until some i2c data is received by the arduino
	while(HAL_I2C_Master_Receive(&hi2c1, ARDUINO_ADDRESS , ArduinoDataBuffer, 50, 100) != HAL_OK);
}

void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	; 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fa52 	bl	8002cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <SystemClock_Config+0xd0>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a28      	ldr	r2, [pc, #160]	; (8000910 <SystemClock_Config+0xd0>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <SystemClock_Config+0xd0>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b23      	ldr	r3, [pc, #140]	; (8000914 <SystemClock_Config+0xd4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <SystemClock_Config+0xd4>)
 800088e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <SystemClock_Config+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008b4:	2310      	movs	r3, #16
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008be:	2304      	movs	r3, #4
 80008c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008c2:	2307      	movs	r3, #7
 80008c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa90 	bl	8001df0 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d6:	f000 f909 	bl	8000aec <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2102      	movs	r1, #2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fcf2 	bl	80022e0 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000902:	f000 f8f3 	bl	8000aec <Error_Handler>
  }
}
 8000906:	bf00      	nop
 8000908:	3750      	adds	r7, #80	; 0x50
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2C1_Init+0x50>)
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_I2C1_Init+0x54>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_I2C1_Init+0x50>)
 8000924:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_I2C1_Init+0x58>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_I2C1_Init+0x50>)
 8000936:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800093a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_I2C1_Init+0x50>)
 8000956:	f000 fdff 	bl	8001558 <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000960:	f000 f8c4 	bl	8000aec <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000098 	.word	0x20000098
 800096c:	40005400 	.word	0x40005400
 8000970:	000186a0 	.word	0x000186a0

08000974 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f001 feb8 	bl	8002720 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f899 	bl	8000aec <Error_Handler>
  }
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000ec 	.word	0x200000ec
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <MX_GPIO_Init+0x114>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <MX_GPIO_Init+0x114>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <MX_GPIO_Init+0x114>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a36      	ldr	r2, [pc, #216]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b30      	ldr	r3, [pc, #192]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_GPIO_Init+0x114>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0x118>)
 8000a54:	f000 fd4c 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000a60:	f000 fd46 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000a7c:	f000 fb9c 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a80:	2320      	movs	r3, #32
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4812      	ldr	r0, [pc, #72]	; (8000ae0 <MX_GPIO_Init+0x118>)
 8000a98:	f000 fb8e 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000a9c:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <MX_GPIO_Init+0x11c>)
 8000ab6:	f000 fb7f 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000aba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <MX_GPIO_Init+0x120>)
 8000ad0:	f000 fb72 	bl	80011b8 <HAL_GPIO_Init>

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020400 	.word	0x40020400

08000aec <Error_Handler>:

void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop

  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b36:	2007      	movs	r0, #7
 8000b38:	f000 fb0a 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <HAL_I2C_MspInit+0x84>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d12b      	bne.n	8000bc2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b86:	23c0      	movs	r3, #192	; 0xc0
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8a:	2312      	movs	r3, #18
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b96:	2304      	movs	r3, #4
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HAL_I2C_MspInit+0x8c>)
 8000ba2:	f000 fb09 	bl	80011b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_I2C_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c4e:	f000 fab3 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f956 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	return 1;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_kill>:

int _kill(int pid, int sig)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cd6:	f001 ffe5 	bl	8002ca4 <__errno>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2216      	movs	r2, #22
 8000cde:	601a      	str	r2, [r3, #0]
	return -1;
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <_exit>:

void _exit (int status)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff ffe7 	bl	8000ccc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cfe:	e7fe      	b.n	8000cfe <_exit+0x12>

08000d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
	}

return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e009      	b.n	8000d60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf1      	blt.n	8000d4c <_write+0x12>
	}
	return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f001 ff4a 	bl	8002ca4 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20018000 	.word	0x20018000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000230 	.word	0x20000230
 8000e44:	20000248 	.word	0x20000248

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e72:	490e      	ldr	r1, [pc, #56]	; (8000eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e88:	4c0b      	ldr	r4, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e96:	f7ff ffd7 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f001 ff09 	bl	8002cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9e:	f7ff fb71 	bl	8000584 <main>
  bx  lr    
 8000ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000eb0:	08003fc4 	.word	0x08003fc4
  ldr r2, =_sbss
 8000eb4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000eb8:	20000248 	.word	0x20000248

08000ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_Init+0x40>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_Init+0x40>)
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x40>)
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f931 	bl	8001150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f7ff fe00 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93b 	bl	800119e <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f000 f911 	bl	8001166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	20000010 	.word	0x20000010

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000014 	.word	0x20000014
 8000f88:	20000234 	.word	0x20000234

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000234 	.word	0x20000234

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000014 	.word	0x20000014

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800111c:	d301      	bcc.n	8001122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2301      	movs	r3, #1
 8001120:	e00f      	b.n	8001142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <SysTick_Config+0x40>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112a:	210f      	movs	r1, #15
 800112c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001130:	f7ff ff8e 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SysTick_Config+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <SysTick_Config+0x40>)
 800113c:	2207      	movs	r2, #7
 800113e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	e000e010 	.word	0xe000e010

08001150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff47 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001178:	f7ff ff5c 	bl	8001034 <__NVIC_GetPriorityGrouping>
 800117c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	f7ff ff8e 	bl	80010a4 <NVIC_EncodePriority>
 8001188:	4602      	mov	r2, r0
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff5d 	bl	8001050 <__NVIC_SetPriority>
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffb0 	bl	800110c <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e159      	b.n	8001488 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011d4:	2201      	movs	r2, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8148 	bne.w	8001482 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d005      	beq.n	800120a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001206:	2b02      	cmp	r3, #2
 8001208:	d130      	bne.n	800126c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	f003 0201 	and.w	r2, r3, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b03      	cmp	r3, #3
 8001276:	d017      	beq.n	80012a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d123      	bne.n	80012fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	08da      	lsrs	r2, r3, #3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3208      	adds	r2, #8
 80012bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	220f      	movs	r2, #15
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a2 	beq.w	8001482 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b57      	ldr	r3, [pc, #348]	; (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800135a:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x2ec>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a49      	ldr	r2, [pc, #292]	; (80014a8 <HAL_GPIO_Init+0x2f0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x202>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a48      	ldr	r2, [pc, #288]	; (80014ac <HAL_GPIO_Init+0x2f4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x1fe>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a47      	ldr	r2, [pc, #284]	; (80014b0 <HAL_GPIO_Init+0x2f8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x1fa>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a46      	ldr	r2, [pc, #280]	; (80014b4 <HAL_GPIO_Init+0x2fc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x1f6>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <HAL_GPIO_Init+0x300>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x1f2>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013aa:	2307      	movs	r3, #7
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x204>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x2ec>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_GPIO_Init+0x304>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a24      	ldr	r2, [pc, #144]	; (80014bc <HAL_GPIO_Init+0x304>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x304>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_GPIO_Init+0x304>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_GPIO_Init+0x304>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f aea2 	bls.w	80011d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	041a      	lsls	r2, r3, #16
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43d9      	mvns	r1, r3
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	400b      	ands	r3, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e12b      	b.n	80017c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fae2 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015bc:	f001 f888 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 80015c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a81      	ldr	r2, [pc, #516]	; (80017cc <HAL_I2C_Init+0x274>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d807      	bhi.n	80015dc <HAL_I2C_Init+0x84>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4a80      	ldr	r2, [pc, #512]	; (80017d0 <HAL_I2C_Init+0x278>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	bf94      	ite	ls
 80015d4:	2301      	movls	r3, #1
 80015d6:	2300      	movhi	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	e006      	b.n	80015ea <HAL_I2C_Init+0x92>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4a7d      	ldr	r2, [pc, #500]	; (80017d4 <HAL_I2C_Init+0x27c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	bf94      	ite	ls
 80015e4:	2301      	movls	r3, #1
 80015e6:	2300      	movhi	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0e7      	b.n	80017c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4a78      	ldr	r2, [pc, #480]	; (80017d8 <HAL_I2C_Init+0x280>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	0c9b      	lsrs	r3, r3, #18
 80015fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a6a      	ldr	r2, [pc, #424]	; (80017cc <HAL_I2C_Init+0x274>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d802      	bhi.n	800162c <HAL_I2C_Init+0xd4>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3301      	adds	r3, #1
 800162a:	e009      	b.n	8001640 <HAL_I2C_Init+0xe8>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a69      	ldr	r2, [pc, #420]	; (80017dc <HAL_I2C_Init+0x284>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	3301      	adds	r3, #1
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	430b      	orrs	r3, r1
 8001646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	495c      	ldr	r1, [pc, #368]	; (80017cc <HAL_I2C_Init+0x274>)
 800165c:	428b      	cmp	r3, r1
 800165e:	d819      	bhi.n	8001694 <HAL_I2C_Init+0x13c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1e59      	subs	r1, r3, #1
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	fbb1 f3f3 	udiv	r3, r1, r3
 800166e:	1c59      	adds	r1, r3, #1
 8001670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001674:	400b      	ands	r3, r1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00a      	beq.n	8001690 <HAL_I2C_Init+0x138>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e59      	subs	r1, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fbb1 f3f3 	udiv	r3, r1, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	e051      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 8001690:	2304      	movs	r3, #4
 8001692:	e04f      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_I2C_Init+0x168>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	e012      	b.n	80016e6 <HAL_I2C_Init+0x18e>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1e58      	subs	r0, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	0099      	lsls	r1, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Init+0x196>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e022      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10e      	bne.n	8001714 <HAL_I2C_Init+0x1bc>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1e58      	subs	r0, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	460b      	mov	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	440b      	add	r3, r1
 8001704:	fbb0 f3f3 	udiv	r3, r0, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001712:	e00f      	b.n	8001734 <HAL_I2C_Init+0x1dc>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1e58      	subs	r0, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	0099      	lsls	r1, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	fbb0 f3f3 	udiv	r3, r0, r3
 800172a:	3301      	adds	r3, #1
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	6809      	ldr	r1, [r1, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69da      	ldr	r2, [r3, #28]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6911      	ldr	r1, [r2, #16]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68d2      	ldr	r2, [r2, #12]
 800176e:	4311      	orrs	r1, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	000186a0 	.word	0x000186a0
 80017d0:	001e847f 	.word	0x001e847f
 80017d4:	003d08ff 	.word	0x003d08ff
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	10624dd3 	.word	0x10624dd3

080017e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	607a      	str	r2, [r7, #4]
 80017ea:	461a      	mov	r2, r3
 80017ec:	460b      	mov	r3, r1
 80017ee:	817b      	strh	r3, [r7, #10]
 80017f0:	4613      	mov	r3, r2
 80017f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff fbca 	bl	8000f8c <HAL_GetTick>
 80017f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b20      	cmp	r3, #32
 8001804:	f040 80e0 	bne.w	80019c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2319      	movs	r3, #25
 800180e:	2201      	movs	r2, #1
 8001810:	4970      	ldr	r1, [pc, #448]	; (80019d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f964 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800181e:	2302      	movs	r3, #2
 8001820:	e0d3      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_I2C_Master_Transmit+0x50>
 800182c:	2302      	movs	r3, #2
 800182e:	e0cc      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1ea>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b01      	cmp	r3, #1
 8001844:	d007      	beq.n	8001856 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0201 	orr.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001864:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2221      	movs	r2, #33	; 0x21
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2210      	movs	r2, #16
 8001872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	893a      	ldrh	r2, [r7, #8]
 8001886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4a50      	ldr	r2, [pc, #320]	; (80019d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001898:	8979      	ldrh	r1, [r7, #10]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	6a3a      	ldr	r2, [r7, #32]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f89c 	bl	80019dc <I2C_MasterRequestWrite>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e08d      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80018c4:	e066      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	6a39      	ldr	r1, [r7, #32]
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 f9de 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00d      	beq.n	80018f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d107      	bne.n	80018ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e06b      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	781a      	ldrb	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b04      	cmp	r3, #4
 800192e:	d11b      	bne.n	8001968 <HAL_I2C_Master_Transmit+0x188>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d017      	beq.n	8001968 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	6a39      	ldr	r1, [r7, #32]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f000 f9ce 	bl	8001d0e <I2C_WaitOnBTFFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00d      	beq.n	8001994 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b04      	cmp	r3, #4
 800197e:	d107      	bne.n	8001990 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e01a      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d194      	bne.n	80018c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	00100002 	.word	0x00100002
 80019d8:	ffff0000 	.word	0xffff0000

080019dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	460b      	mov	r3, r1
 80019ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d006      	beq.n	8001a06 <I2C_MasterRequestWrite+0x2a>
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d003      	beq.n	8001a06 <I2C_MasterRequestWrite+0x2a>
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a04:	d108      	bne.n	8001a18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00b      	b.n	8001a30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	2b12      	cmp	r3, #18
 8001a1e:	d107      	bne.n	8001a30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f84f 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00d      	beq.n	8001a64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a56:	d103      	bne.n	8001a60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e035      	b.n	8001ad0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a6c:	d108      	bne.n	8001a80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a7c:	611a      	str	r2, [r3, #16]
 8001a7e:	e01b      	b.n	8001ab8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a80:	897b      	ldrh	r3, [r7, #10]
 8001a82:	11db      	asrs	r3, r3, #7
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f003 0306 	and.w	r3, r3, #6
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f063 030f 	orn	r3, r3, #15
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <I2C_MasterRequestWrite+0xfc>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f875 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e010      	b.n	8001ad0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4907      	ldr	r1, [pc, #28]	; (8001adc <I2C_MasterRequestWrite+0x100>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f865 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	00010008 	.word	0x00010008
 8001adc:	00010002 	.word	0x00010002

08001ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	e025      	b.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001af8:	d021      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7ff fa47 	bl	8000f8c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d116      	bne.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e023      	b.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10d      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4013      	ands	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	e00c      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d0b6      	beq.n	8001af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9c:	e051      	b.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	d123      	bne.n	8001bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0204 	orr.w	r2, r3, #4
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e046      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfc:	d021      	beq.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfe:	f7ff f9c5 	bl	8000f8c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d302      	bcc.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d116      	bne.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10c      	bne.n	8001c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4013      	ands	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e00b      	b.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4013      	ands	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d18d      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	e02d      	b.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f878 	bl	8001d90 <I2C_IsAcknowledgeFailed>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e02d      	b.n	8001d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb0:	d021      	beq.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7ff f96b 	bl	8000f8c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d116      	bne.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e007      	b.n	8001d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d1ca      	bne.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d1a:	e02d      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f837 	bl	8001d90 <I2C_IsAcknowledgeFailed>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e02d      	b.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d32:	d021      	beq.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7ff f92a 	bl	8000f8c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d1ca      	bne.n	8001d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da6:	d11b      	bne.n	8001de0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001db0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e267      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d075      	beq.n	8001efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d112      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b82      	ldr	r3, [pc, #520]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d05b      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d157      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e242      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_OscConfig+0x74>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x98>
 8001e6e:	4b70      	ldr	r3, [pc, #448]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6f      	ldr	r2, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b6d      	ldr	r3, [pc, #436]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6c      	ldr	r2, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e88:	4b69      	ldr	r3, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a68      	ldr	r2, [pc, #416]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a65      	ldr	r2, [pc, #404]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f870 	bl	8000f8c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff f86c 	bl	8000f8c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e207      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xc0>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff f85c 	bl	8000f8c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff f858 	bl	8000f8c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1f3      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b51      	ldr	r3, [pc, #324]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xe8>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b44      	ldr	r3, [pc, #272]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1c7      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_RCC_OscConfig+0x244>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff f811 	bl	8000f8c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff f80d 	bl	8000f8c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1a8      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4925      	ldr	r1, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b24      	ldr	r3, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x244>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fff0 	bl	8000f8c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7fe ffec 	bl	8000f8c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e187      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d036      	beq.n	8002048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0x248>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ffd0 	bl	8000f8c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7fe ffcc 	bl	8000f8c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e167      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCC_OscConfig+0x240>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x200>
 800200e:	e01b      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x248>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7fe ffb9 	bl	8000f8c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e00e      	b.n	800203c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7fe ffb5 	bl	8000f8c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d907      	bls.n	800203c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e150      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
 8002030:	40023800 	.word	0x40023800
 8002034:	42470000 	.word	0x42470000
 8002038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b88      	ldr	r3, [pc, #544]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ea      	bne.n	800201e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 8097 	beq.w	8002184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205a:	4b81      	ldr	r3, [pc, #516]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	4a7c      	ldr	r2, [pc, #496]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	6413      	str	r3, [r2, #64]	; 0x40
 8002076:	4b7a      	ldr	r3, [pc, #488]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002082:	2301      	movs	r3, #1
 8002084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002086:	4b77      	ldr	r3, [pc, #476]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d118      	bne.n	80020c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002092:	4b74      	ldr	r3, [pc, #464]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a73      	ldr	r2, [pc, #460]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209e:	f7fe ff75 	bl	8000f8c <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe ff71 	bl	8000f8c <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e10c      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b6a      	ldr	r3, [pc, #424]	; (8002264 <HAL_RCC_OscConfig+0x474>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x2ea>
 80020cc:	4b64      	ldr	r3, [pc, #400]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d0:	4a63      	ldr	r2, [pc, #396]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	; 0x70
 80020d8:	e01c      	b.n	8002114 <HAL_RCC_OscConfig+0x324>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0x30c>
 80020e2:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a5e      	ldr	r2, [pc, #376]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
 80020ee:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a5b      	ldr	r2, [pc, #364]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0x324>
 80020fc:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a57      	ldr	r2, [pc, #348]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	4b55      	ldr	r3, [pc, #340]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a54      	ldr	r2, [pc, #336]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d015      	beq.n	8002148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe ff36 	bl	8000f8c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe ff32 	bl	8000f8c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0cb      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ee      	beq.n	8002124 <HAL_RCC_OscConfig+0x334>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe ff20 	bl	8000f8c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	e00a      	b.n	8002166 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7fe ff1c 	bl	8000f8c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e0b5      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ee      	bne.n	8002150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d105      	bne.n	8002184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	4a38      	ldr	r2, [pc, #224]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800217e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a1 	beq.w	80022d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b08      	cmp	r3, #8
 8002198:	d05c      	beq.n	8002254 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d141      	bne.n	8002226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b31      	ldr	r3, [pc, #196]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fef0 	bl	8000f8c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe feec 	bl	8000f8c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e087      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	019b      	lsls	r3, r3, #6
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	3b01      	subs	r3, #1
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	491b      	ldr	r1, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7fe fec5 	bl	8000f8c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002206:	f7fe fec1 	bl	8000f8c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e05c      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x416>
 8002224:	e054      	b.n	80022d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_RCC_OscConfig+0x478>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe feae 	bl	8000f8c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002234:	f7fe feaa 	bl	8000f8c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e045      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_RCC_OscConfig+0x470>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x444>
 8002252:	e03d      	b.n	80022d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d107      	bne.n	800226c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e038      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
 8002260:	40023800 	.word	0x40023800
 8002264:	40007000 	.word	0x40007000
 8002268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x4ec>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d028      	beq.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d121      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d11a      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d111      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800

080022e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0cc      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d90c      	bls.n	800231c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b63      	ldr	r3, [pc, #396]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0b8      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d020      	beq.n	800236a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002334:	4b59      	ldr	r3, [pc, #356]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800233e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800234c:	4b53      	ldr	r3, [pc, #332]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a52      	ldr	r2, [pc, #328]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b50      	ldr	r3, [pc, #320]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	494d      	ldr	r1, [pc, #308]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d044      	beq.n	8002400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d119      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e07f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d003      	beq.n	800239e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	2b03      	cmp	r3, #3
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239e:	4b3f      	ldr	r3, [pc, #252]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d109      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e067      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023be:	4b37      	ldr	r3, [pc, #220]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	4934      	ldr	r1, [pc, #208]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fddc 	bl	8000f8c <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	e00a      	b.n	80023ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d8:	f7fe fdd8 	bl	8000f8c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e04f      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 020c 	and.w	r2, r3, #12
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1eb      	bne.n	80023d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d20c      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e032      	b.n	800248e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	4916      	ldr	r1, [pc, #88]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	490e      	ldr	r1, [pc, #56]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002466:	f000 f821 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 800246a:	4602      	mov	r2, r0
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	490a      	ldr	r1, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	5ccb      	ldrb	r3, [r1, r3]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fd3c 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40023c00 	.word	0x40023c00
 800249c:	40023800 	.word	0x40023800
 80024a0:	08003e54 	.word	0x08003e54
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	20000010 	.word	0x20000010

080024ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b0:	b094      	sub	sp, #80	; 0x50
 80024b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	647b      	str	r3, [r7, #68]	; 0x44
 80024b8:	2300      	movs	r3, #0
 80024ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024bc:	2300      	movs	r3, #0
 80024be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c4:	4b79      	ldr	r3, [pc, #484]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 030c 	and.w	r3, r3, #12
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d00d      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x40>
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	f200 80e1 	bhi.w	8002698 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x34>
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80024de:	e0db      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e0:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024e4:	e0db      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024e6:	4b73      	ldr	r3, [pc, #460]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80024e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024ea:	e0d8      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ec:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f6:	4b6d      	ldr	r3, [pc, #436]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d063      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	4b6a      	ldr	r3, [pc, #424]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	099b      	lsrs	r3, r3, #6
 8002508:	2200      	movs	r2, #0
 800250a:	63bb      	str	r3, [r7, #56]	; 0x38
 800250c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800250e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
 800251a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800251e:	4622      	mov	r2, r4
 8002520:	462b      	mov	r3, r5
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f04f 0100 	mov.w	r1, #0
 800252a:	0159      	lsls	r1, r3, #5
 800252c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002530:	0150      	lsls	r0, r2, #5
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4621      	mov	r1, r4
 8002538:	1a51      	subs	r1, r2, r1
 800253a:	6139      	str	r1, [r7, #16]
 800253c:	4629      	mov	r1, r5
 800253e:	eb63 0301 	sbc.w	r3, r3, r1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002550:	4659      	mov	r1, fp
 8002552:	018b      	lsls	r3, r1, #6
 8002554:	4651      	mov	r1, sl
 8002556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800255a:	4651      	mov	r1, sl
 800255c:	018a      	lsls	r2, r1, #6
 800255e:	4651      	mov	r1, sl
 8002560:	ebb2 0801 	subs.w	r8, r2, r1
 8002564:	4659      	mov	r1, fp
 8002566:	eb63 0901 	sbc.w	r9, r3, r1
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800257a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800257e:	4690      	mov	r8, r2
 8002580:	4699      	mov	r9, r3
 8002582:	4623      	mov	r3, r4
 8002584:	eb18 0303 	adds.w	r3, r8, r3
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	462b      	mov	r3, r5
 800258c:	eb49 0303 	adc.w	r3, r9, r3
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800259e:	4629      	mov	r1, r5
 80025a0:	024b      	lsls	r3, r1, #9
 80025a2:	4621      	mov	r1, r4
 80025a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025a8:	4621      	mov	r1, r4
 80025aa:	024a      	lsls	r2, r1, #9
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	2200      	movs	r2, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025bc:	f7fd fe60 	bl	8000280 <__aeabi_uldivmod>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4613      	mov	r3, r2
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c8:	e058      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b38      	ldr	r3, [pc, #224]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	2200      	movs	r2, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	4611      	mov	r1, r2
 80025d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025e4:	4642      	mov	r2, r8
 80025e6:	464b      	mov	r3, r9
 80025e8:	f04f 0000 	mov.w	r0, #0
 80025ec:	f04f 0100 	mov.w	r1, #0
 80025f0:	0159      	lsls	r1, r3, #5
 80025f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f6:	0150      	lsls	r0, r2, #5
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4641      	mov	r1, r8
 80025fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002602:	4649      	mov	r1, r9
 8002604:	eb63 0b01 	sbc.w	fp, r3, r1
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002614:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002618:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800261c:	ebb2 040a 	subs.w	r4, r2, sl
 8002620:	eb63 050b 	sbc.w	r5, r3, fp
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	00eb      	lsls	r3, r5, #3
 800262e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002632:	00e2      	lsls	r2, r4, #3
 8002634:	4614      	mov	r4, r2
 8002636:	461d      	mov	r5, r3
 8002638:	4643      	mov	r3, r8
 800263a:	18e3      	adds	r3, r4, r3
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	464b      	mov	r3, r9
 8002640:	eb45 0303 	adc.w	r3, r5, r3
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002652:	4629      	mov	r1, r5
 8002654:	028b      	lsls	r3, r1, #10
 8002656:	4621      	mov	r1, r4
 8002658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800265c:	4621      	mov	r1, r4
 800265e:	028a      	lsls	r2, r1, #10
 8002660:	4610      	mov	r0, r2
 8002662:	4619      	mov	r1, r3
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002666:	2200      	movs	r2, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	61fa      	str	r2, [r7, #28]
 800266c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002670:	f7fd fe06 	bl	8000280 <__aeabi_uldivmod>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4613      	mov	r3, r2
 800267a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_GetSysClockFreq+0x200>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	3301      	adds	r3, #1
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800268c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800268e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800269a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3750      	adds	r7, #80	; 0x50
 80026a4:	46bd      	mov	sp, r7
 80026a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	007a1200 	.word	0x007a1200

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0a9b      	lsrs	r3, r3, #10
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08003e64 	.word	0x08003e64

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffdc 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	08003e64 	.word	0x08003e64

08002720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e03f      	b.n	80027b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe fa46 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	; 0x24
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f829 	bl	80027bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b0c0      	sub	sp, #256	; 0x100
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	68d9      	ldr	r1, [r3, #12]
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	ea40 0301 	orr.w	r3, r0, r1
 80027e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002814:	f021 010c 	bic.w	r1, r1, #12
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002822:	430b      	orrs	r3, r1
 8002824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002836:	6999      	ldr	r1, [r3, #24]
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	ea40 0301 	orr.w	r3, r0, r1
 8002842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b8f      	ldr	r3, [pc, #572]	; (8002a88 <UART_SetConfig+0x2cc>)
 800284c:	429a      	cmp	r2, r3
 800284e:	d005      	beq.n	800285c <UART_SetConfig+0xa0>
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b8d      	ldr	r3, [pc, #564]	; (8002a8c <UART_SetConfig+0x2d0>)
 8002858:	429a      	cmp	r2, r3
 800285a:	d104      	bne.n	8002866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800285c:	f7ff ff4c 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8002860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002864:	e003      	b.n	800286e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002866:	f7ff ff33 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 800286a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002878:	f040 810c 	bne.w	8002a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800287c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002880:	2200      	movs	r2, #0
 8002882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800288a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	1891      	adds	r1, r2, r2
 8002894:	65b9      	str	r1, [r7, #88]	; 0x58
 8002896:	415b      	adcs	r3, r3
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800289a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800289e:	4621      	mov	r1, r4
 80028a0:	eb12 0801 	adds.w	r8, r2, r1
 80028a4:	4629      	mov	r1, r5
 80028a6:	eb43 0901 	adc.w	r9, r3, r1
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028be:	4690      	mov	r8, r2
 80028c0:	4699      	mov	r9, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	eb18 0303 	adds.w	r3, r8, r3
 80028c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028cc:	462b      	mov	r3, r5
 80028ce:	eb49 0303 	adc.w	r3, r9, r3
 80028d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80028e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80028ea:	460b      	mov	r3, r1
 80028ec:	18db      	adds	r3, r3, r3
 80028ee:	653b      	str	r3, [r7, #80]	; 0x50
 80028f0:	4613      	mov	r3, r2
 80028f2:	eb42 0303 	adc.w	r3, r2, r3
 80028f6:	657b      	str	r3, [r7, #84]	; 0x54
 80028f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002900:	f7fd fcbe 	bl	8000280 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <UART_SetConfig+0x2d4>)
 800290a:	fba3 2302 	umull	r2, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	011c      	lsls	r4, r3, #4
 8002912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800291c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	1891      	adds	r1, r2, r2
 800292a:	64b9      	str	r1, [r7, #72]	; 0x48
 800292c:	415b      	adcs	r3, r3
 800292e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002934:	4641      	mov	r1, r8
 8002936:	eb12 0a01 	adds.w	sl, r2, r1
 800293a:	4649      	mov	r1, r9
 800293c:	eb43 0b01 	adc.w	fp, r3, r1
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800294c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002954:	4692      	mov	sl, r2
 8002956:	469b      	mov	fp, r3
 8002958:	4643      	mov	r3, r8
 800295a:	eb1a 0303 	adds.w	r3, sl, r3
 800295e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002962:	464b      	mov	r3, r9
 8002964:	eb4b 0303 	adc.w	r3, fp, r3
 8002968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800297c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002980:	460b      	mov	r3, r1
 8002982:	18db      	adds	r3, r3, r3
 8002984:	643b      	str	r3, [r7, #64]	; 0x40
 8002986:	4613      	mov	r3, r2
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	647b      	str	r3, [r7, #68]	; 0x44
 800298e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002996:	f7fd fc73 	bl	8000280 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <UART_SetConfig+0x2d4>)
 80029a2:	fba3 2301 	umull	r2, r3, r3, r1
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2264      	movs	r2, #100	; 0x64
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	1acb      	subs	r3, r1, r3
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029b6:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <UART_SetConfig+0x2d4>)
 80029b8:	fba3 2302 	umull	r2, r3, r3, r2
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029c4:	441c      	add	r4, r3
 80029c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	63b9      	str	r1, [r7, #56]	; 0x38
 80029e0:	415b      	adcs	r3, r3
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6339      	str	r1, [r7, #48]	; 0x30
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	460a      	mov	r2, r1
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	18db      	adds	r3, r3, r3
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a42:	4613      	mov	r3, r2
 8002a44:	eb42 0303 	adc.w	r3, r2, r3
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a52:	f7fd fc15 	bl	8000280 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <UART_SetConfig+0x2d4>)
 8002a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	2164      	movs	r1, #100	; 0x64
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	3332      	adds	r3, #50	; 0x32
 8002a6e:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <UART_SetConfig+0x2d4>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4422      	add	r2, r4
 8002a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a84:	e105      	b.n	8002c92 <UART_SetConfig+0x4d6>
 8002a86:	bf00      	nop
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002aa6:	4642      	mov	r2, r8
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	1891      	adds	r1, r2, r2
 8002aac:	6239      	str	r1, [r7, #32]
 8002aae:	415b      	adcs	r3, r3
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	1854      	adds	r4, r2, r1
 8002aba:	4649      	mov	r1, r9
 8002abc:	eb43 0501 	adc.w	r5, r3, r1
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	00eb      	lsls	r3, r5, #3
 8002aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ace:	00e2      	lsls	r2, r4, #3
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	461d      	mov	r5, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	18e3      	adds	r3, r4, r3
 8002ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002adc:	464b      	mov	r3, r9
 8002ade:	eb45 0303 	adc.w	r3, r5, r3
 8002ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b02:	4629      	mov	r1, r5
 8002b04:	008b      	lsls	r3, r1, #2
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	008a      	lsls	r2, r1, #2
 8002b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b14:	f7fd fbb4 	bl	8000280 <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <UART_SetConfig+0x4e4>)
 8002b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	011c      	lsls	r4, r3, #4
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	61b9      	str	r1, [r7, #24]
 8002b40:	415b      	adcs	r3, r3
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6139      	str	r1, [r7, #16]
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	008b      	lsls	r3, r1, #2
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002baa:	4641      	mov	r1, r8
 8002bac:	008a      	lsls	r2, r1, #2
 8002bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bb2:	f7fd fb65 	bl	8000280 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <UART_SetConfig+0x4e4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a34      	ldr	r2, [pc, #208]	; (8002ca0 <UART_SetConfig+0x4e4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bda:	441c      	add	r4, r3
 8002bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002be0:	2200      	movs	r2, #0
 8002be2:	673b      	str	r3, [r7, #112]	; 0x70
 8002be4:	677a      	str	r2, [r7, #116]	; 0x74
 8002be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002bea:	4642      	mov	r2, r8
 8002bec:	464b      	mov	r3, r9
 8002bee:	1891      	adds	r1, r2, r2
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	415b      	adcs	r3, r3
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfa:	4641      	mov	r1, r8
 8002bfc:	1851      	adds	r1, r2, r1
 8002bfe:	6039      	str	r1, [r7, #0]
 8002c00:	4649      	mov	r1, r9
 8002c02:	414b      	adcs	r3, r1
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c12:	4659      	mov	r1, fp
 8002c14:	00cb      	lsls	r3, r1, #3
 8002c16:	4651      	mov	r1, sl
 8002c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1c:	4651      	mov	r1, sl
 8002c1e:	00ca      	lsls	r2, r1, #3
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	4603      	mov	r3, r0
 8002c26:	4642      	mov	r2, r8
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	460a      	mov	r2, r1
 8002c30:	eb42 0303 	adc.w	r3, r2, r3
 8002c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c40:	667a      	str	r2, [r7, #100]	; 0x64
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c4e:	4649      	mov	r1, r9
 8002c50:	008b      	lsls	r3, r1, #2
 8002c52:	4641      	mov	r1, r8
 8002c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c58:	4641      	mov	r1, r8
 8002c5a:	008a      	lsls	r2, r1, #2
 8002c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c60:	f7fd fb0e 	bl	8000280 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <UART_SetConfig+0x4e4>)
 8002c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2164      	movs	r1, #100	; 0x64
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	; 0x32
 8002c7c:	4a08      	ldr	r2, [pc, #32]	; (8002ca0 <UART_SetConfig+0x4e4>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	f003 020f 	and.w	r2, r3, #15
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4422      	add	r2, r4
 8002c90:	609a      	str	r2, [r3, #8]
}
 8002c92:	bf00      	nop
 8002c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <__errno>:
 8002ca4:	4b01      	ldr	r3, [pc, #4]	; (8002cac <__errno+0x8>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000018 	.word	0x20000018

08002cb0 <__libc_init_array>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	4d0d      	ldr	r5, [pc, #52]	; (8002ce8 <__libc_init_array+0x38>)
 8002cb4:	4c0d      	ldr	r4, [pc, #52]	; (8002cec <__libc_init_array+0x3c>)
 8002cb6:	1b64      	subs	r4, r4, r5
 8002cb8:	10a4      	asrs	r4, r4, #2
 8002cba:	2600      	movs	r6, #0
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	d109      	bne.n	8002cd4 <__libc_init_array+0x24>
 8002cc0:	4d0b      	ldr	r5, [pc, #44]	; (8002cf0 <__libc_init_array+0x40>)
 8002cc2:	4c0c      	ldr	r4, [pc, #48]	; (8002cf4 <__libc_init_array+0x44>)
 8002cc4:	f001 f8ba 	bl	8003e3c <_init>
 8002cc8:	1b64      	subs	r4, r4, r5
 8002cca:	10a4      	asrs	r4, r4, #2
 8002ccc:	2600      	movs	r6, #0
 8002cce:	42a6      	cmp	r6, r4
 8002cd0:	d105      	bne.n	8002cde <__libc_init_array+0x2e>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd8:	4798      	blx	r3
 8002cda:	3601      	adds	r6, #1
 8002cdc:	e7ee      	b.n	8002cbc <__libc_init_array+0xc>
 8002cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce2:	4798      	blx	r3
 8002ce4:	3601      	adds	r6, #1
 8002ce6:	e7f2      	b.n	8002cce <__libc_init_array+0x1e>
 8002ce8:	08003fbc 	.word	0x08003fbc
 8002cec:	08003fbc 	.word	0x08003fbc
 8002cf0:	08003fbc 	.word	0x08003fbc
 8002cf4:	08003fc0 	.word	0x08003fc0

08002cf8 <memset>:
 8002cf8:	4402      	add	r2, r0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <memset+0xa>
 8002d00:	4770      	bx	lr
 8002d02:	f803 1b01 	strb.w	r1, [r3], #1
 8002d06:	e7f9      	b.n	8002cfc <memset+0x4>

08002d08 <srand>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <srand+0x44>)
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d10:	4604      	mov	r4, r0
 8002d12:	b9b3      	cbnz	r3, 8002d42 <srand+0x3a>
 8002d14:	2018      	movs	r0, #24
 8002d16:	f000 f8bf 	bl	8002e98 <malloc>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	63a8      	str	r0, [r5, #56]	; 0x38
 8002d1e:	b920      	cbnz	r0, 8002d2a <srand+0x22>
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <srand+0x48>)
 8002d22:	480c      	ldr	r0, [pc, #48]	; (8002d54 <srand+0x4c>)
 8002d24:	2142      	movs	r1, #66	; 0x42
 8002d26:	f000 f875 	bl	8002e14 <__assert_func>
 8002d2a:	490b      	ldr	r1, [pc, #44]	; (8002d58 <srand+0x50>)
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <srand+0x54>)
 8002d2e:	e9c0 1300 	strd	r1, r3, [r0]
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <srand+0x58>)
 8002d34:	6083      	str	r3, [r0, #8]
 8002d36:	230b      	movs	r3, #11
 8002d38:	8183      	strh	r3, [r0, #12]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d44:	2200      	movs	r2, #0
 8002d46:	611c      	str	r4, [r3, #16]
 8002d48:	615a      	str	r2, [r3, #20]
 8002d4a:	bd38      	pop	{r3, r4, r5, pc}
 8002d4c:	20000018 	.word	0x20000018
 8002d50:	08003e70 	.word	0x08003e70
 8002d54:	08003e87 	.word	0x08003e87
 8002d58:	abcd330e 	.word	0xabcd330e
 8002d5c:	e66d1234 	.word	0xe66d1234
 8002d60:	0005deec 	.word	0x0005deec

08002d64 <rand>:
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <rand+0x5c>)
 8002d66:	b510      	push	{r4, lr}
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d6c:	b9b3      	cbnz	r3, 8002d9c <rand+0x38>
 8002d6e:	2018      	movs	r0, #24
 8002d70:	f000 f892 	bl	8002e98 <malloc>
 8002d74:	63a0      	str	r0, [r4, #56]	; 0x38
 8002d76:	b928      	cbnz	r0, 8002d84 <rand+0x20>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <rand+0x60>)
 8002d7c:	4812      	ldr	r0, [pc, #72]	; (8002dc8 <rand+0x64>)
 8002d7e:	214e      	movs	r1, #78	; 0x4e
 8002d80:	f000 f848 	bl	8002e14 <__assert_func>
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <rand+0x68>)
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <rand+0x6c>)
 8002d88:	e9c0 2300 	strd	r2, r3, [r0]
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <rand+0x70>)
 8002d8e:	6083      	str	r3, [r0, #8]
 8002d90:	230b      	movs	r3, #11
 8002d92:	8183      	strh	r3, [r0, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	2300      	movs	r3, #0
 8002d98:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002d9c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <rand+0x74>)
 8002da0:	6920      	ldr	r0, [r4, #16]
 8002da2:	6963      	ldr	r3, [r4, #20]
 8002da4:	490d      	ldr	r1, [pc, #52]	; (8002ddc <rand+0x78>)
 8002da6:	4342      	muls	r2, r0
 8002da8:	fb01 2203 	mla	r2, r1, r3, r2
 8002dac:	fba0 0101 	umull	r0, r1, r0, r1
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	eb42 0001 	adc.w	r0, r2, r1
 8002db6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002dba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002dbe:	bd10      	pop	{r4, pc}
 8002dc0:	20000018 	.word	0x20000018
 8002dc4:	08003e70 	.word	0x08003e70
 8002dc8:	08003e87 	.word	0x08003e87
 8002dcc:	abcd330e 	.word	0xabcd330e
 8002dd0:	e66d1234 	.word	0xe66d1234
 8002dd4:	0005deec 	.word	0x0005deec
 8002dd8:	5851f42d 	.word	0x5851f42d
 8002ddc:	4c957f2d 	.word	0x4c957f2d

08002de0 <time>:
 8002de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <time+0x30>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	4669      	mov	r1, sp
 8002de8:	4604      	mov	r4, r0
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	f000 f842 	bl	8002e74 <_gettimeofday_r>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	bfbe      	ittt	lt
 8002df4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002df8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002dfc:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002e00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e04:	b10c      	cbz	r4, 8002e0a <time+0x2a>
 8002e06:	e9c4 0100 	strd	r0, r1, [r4]
 8002e0a:	b004      	add	sp, #16
 8002e0c:	bd10      	pop	{r4, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000018 	.word	0x20000018

08002e14 <__assert_func>:
 8002e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e16:	4614      	mov	r4, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <__assert_func+0x2c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4605      	mov	r5, r0
 8002e20:	68d8      	ldr	r0, [r3, #12]
 8002e22:	b14c      	cbz	r4, 8002e38 <__assert_func+0x24>
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <__assert_func+0x30>)
 8002e26:	9100      	str	r1, [sp, #0]
 8002e28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e2c:	4906      	ldr	r1, [pc, #24]	; (8002e48 <__assert_func+0x34>)
 8002e2e:	462b      	mov	r3, r5
 8002e30:	f000 f80e 	bl	8002e50 <fiprintf>
 8002e34:	f000 fcd6 	bl	80037e4 <abort>
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <__assert_func+0x38>)
 8002e3a:	461c      	mov	r4, r3
 8002e3c:	e7f3      	b.n	8002e26 <__assert_func+0x12>
 8002e3e:	bf00      	nop
 8002e40:	20000018 	.word	0x20000018
 8002e44:	08003ee2 	.word	0x08003ee2
 8002e48:	08003eef 	.word	0x08003eef
 8002e4c:	08003f1d 	.word	0x08003f1d

08002e50 <fiprintf>:
 8002e50:	b40e      	push	{r1, r2, r3}
 8002e52:	b503      	push	{r0, r1, lr}
 8002e54:	4601      	mov	r1, r0
 8002e56:	ab03      	add	r3, sp, #12
 8002e58:	4805      	ldr	r0, [pc, #20]	; (8002e70 <fiprintf+0x20>)
 8002e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e5e:	6800      	ldr	r0, [r0, #0]
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	f000 f92b 	bl	80030bc <_vfiprintf_r>
 8002e66:	b002      	add	sp, #8
 8002e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e6c:	b003      	add	sp, #12
 8002e6e:	4770      	bx	lr
 8002e70:	20000018 	.word	0x20000018

08002e74 <_gettimeofday_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4d07      	ldr	r5, [pc, #28]	; (8002e94 <_gettimeofday_r+0x20>)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	f000 ffd3 	bl	8003e2c <_gettimeofday>
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	d102      	bne.n	8002e90 <_gettimeofday_r+0x1c>
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	b103      	cbz	r3, 8002e90 <_gettimeofday_r+0x1c>
 8002e8e:	6023      	str	r3, [r4, #0]
 8002e90:	bd38      	pop	{r3, r4, r5, pc}
 8002e92:	bf00      	nop
 8002e94:	20000240 	.word	0x20000240

08002e98 <malloc>:
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <malloc+0xc>)
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f000 b86f 	b.w	8002f80 <_malloc_r>
 8002ea2:	bf00      	nop
 8002ea4:	20000018 	.word	0x20000018

08002ea8 <_free_r>:
 8002ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d044      	beq.n	8002f38 <_free_r+0x90>
 8002eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb2:	9001      	str	r0, [sp, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8002eba:	bfb8      	it	lt
 8002ebc:	18e4      	addlt	r4, r4, r3
 8002ebe:	f000 feb9 	bl	8003c34 <__malloc_lock>
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	; (8002f3c <_free_r+0x94>)
 8002ec4:	9801      	ldr	r0, [sp, #4]
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	b933      	cbnz	r3, 8002ed8 <_free_r+0x30>
 8002eca:	6063      	str	r3, [r4, #4]
 8002ecc:	6014      	str	r4, [r2, #0]
 8002ece:	b003      	add	sp, #12
 8002ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ed4:	f000 beb4 	b.w	8003c40 <__malloc_unlock>
 8002ed8:	42a3      	cmp	r3, r4
 8002eda:	d908      	bls.n	8002eee <_free_r+0x46>
 8002edc:	6825      	ldr	r5, [r4, #0]
 8002ede:	1961      	adds	r1, r4, r5
 8002ee0:	428b      	cmp	r3, r1
 8002ee2:	bf01      	itttt	eq
 8002ee4:	6819      	ldreq	r1, [r3, #0]
 8002ee6:	685b      	ldreq	r3, [r3, #4]
 8002ee8:	1949      	addeq	r1, r1, r5
 8002eea:	6021      	streq	r1, [r4, #0]
 8002eec:	e7ed      	b.n	8002eca <_free_r+0x22>
 8002eee:	461a      	mov	r2, r3
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b10b      	cbz	r3, 8002ef8 <_free_r+0x50>
 8002ef4:	42a3      	cmp	r3, r4
 8002ef6:	d9fa      	bls.n	8002eee <_free_r+0x46>
 8002ef8:	6811      	ldr	r1, [r2, #0]
 8002efa:	1855      	adds	r5, r2, r1
 8002efc:	42a5      	cmp	r5, r4
 8002efe:	d10b      	bne.n	8002f18 <_free_r+0x70>
 8002f00:	6824      	ldr	r4, [r4, #0]
 8002f02:	4421      	add	r1, r4
 8002f04:	1854      	adds	r4, r2, r1
 8002f06:	42a3      	cmp	r3, r4
 8002f08:	6011      	str	r1, [r2, #0]
 8002f0a:	d1e0      	bne.n	8002ece <_free_r+0x26>
 8002f0c:	681c      	ldr	r4, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	6053      	str	r3, [r2, #4]
 8002f12:	4421      	add	r1, r4
 8002f14:	6011      	str	r1, [r2, #0]
 8002f16:	e7da      	b.n	8002ece <_free_r+0x26>
 8002f18:	d902      	bls.n	8002f20 <_free_r+0x78>
 8002f1a:	230c      	movs	r3, #12
 8002f1c:	6003      	str	r3, [r0, #0]
 8002f1e:	e7d6      	b.n	8002ece <_free_r+0x26>
 8002f20:	6825      	ldr	r5, [r4, #0]
 8002f22:	1961      	adds	r1, r4, r5
 8002f24:	428b      	cmp	r3, r1
 8002f26:	bf04      	itt	eq
 8002f28:	6819      	ldreq	r1, [r3, #0]
 8002f2a:	685b      	ldreq	r3, [r3, #4]
 8002f2c:	6063      	str	r3, [r4, #4]
 8002f2e:	bf04      	itt	eq
 8002f30:	1949      	addeq	r1, r1, r5
 8002f32:	6021      	streq	r1, [r4, #0]
 8002f34:	6054      	str	r4, [r2, #4]
 8002f36:	e7ca      	b.n	8002ece <_free_r+0x26>
 8002f38:	b003      	add	sp, #12
 8002f3a:	bd30      	pop	{r4, r5, pc}
 8002f3c:	20000238 	.word	0x20000238

08002f40 <sbrk_aligned>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	4e0e      	ldr	r6, [pc, #56]	; (8002f7c <sbrk_aligned+0x3c>)
 8002f44:	460c      	mov	r4, r1
 8002f46:	6831      	ldr	r1, [r6, #0]
 8002f48:	4605      	mov	r5, r0
 8002f4a:	b911      	cbnz	r1, 8002f52 <sbrk_aligned+0x12>
 8002f4c:	f000 fb7a 	bl	8003644 <_sbrk_r>
 8002f50:	6030      	str	r0, [r6, #0]
 8002f52:	4621      	mov	r1, r4
 8002f54:	4628      	mov	r0, r5
 8002f56:	f000 fb75 	bl	8003644 <_sbrk_r>
 8002f5a:	1c43      	adds	r3, r0, #1
 8002f5c:	d00a      	beq.n	8002f74 <sbrk_aligned+0x34>
 8002f5e:	1cc4      	adds	r4, r0, #3
 8002f60:	f024 0403 	bic.w	r4, r4, #3
 8002f64:	42a0      	cmp	r0, r4
 8002f66:	d007      	beq.n	8002f78 <sbrk_aligned+0x38>
 8002f68:	1a21      	subs	r1, r4, r0
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 fb6a 	bl	8003644 <_sbrk_r>
 8002f70:	3001      	adds	r0, #1
 8002f72:	d101      	bne.n	8002f78 <sbrk_aligned+0x38>
 8002f74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f78:	4620      	mov	r0, r4
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	2000023c 	.word	0x2000023c

08002f80 <_malloc_r>:
 8002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f84:	1ccd      	adds	r5, r1, #3
 8002f86:	f025 0503 	bic.w	r5, r5, #3
 8002f8a:	3508      	adds	r5, #8
 8002f8c:	2d0c      	cmp	r5, #12
 8002f8e:	bf38      	it	cc
 8002f90:	250c      	movcc	r5, #12
 8002f92:	2d00      	cmp	r5, #0
 8002f94:	4607      	mov	r7, r0
 8002f96:	db01      	blt.n	8002f9c <_malloc_r+0x1c>
 8002f98:	42a9      	cmp	r1, r5
 8002f9a:	d905      	bls.n	8002fa8 <_malloc_r+0x28>
 8002f9c:	230c      	movs	r3, #12
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa8:	4e2e      	ldr	r6, [pc, #184]	; (8003064 <_malloc_r+0xe4>)
 8002faa:	f000 fe43 	bl	8003c34 <__malloc_lock>
 8002fae:	6833      	ldr	r3, [r6, #0]
 8002fb0:	461c      	mov	r4, r3
 8002fb2:	bb34      	cbnz	r4, 8003002 <_malloc_r+0x82>
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	f7ff ffc2 	bl	8002f40 <sbrk_aligned>
 8002fbc:	1c43      	adds	r3, r0, #1
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	d14d      	bne.n	800305e <_malloc_r+0xde>
 8002fc2:	6834      	ldr	r4, [r6, #0]
 8002fc4:	4626      	mov	r6, r4
 8002fc6:	2e00      	cmp	r6, #0
 8002fc8:	d140      	bne.n	800304c <_malloc_r+0xcc>
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	4631      	mov	r1, r6
 8002fce:	4638      	mov	r0, r7
 8002fd0:	eb04 0803 	add.w	r8, r4, r3
 8002fd4:	f000 fb36 	bl	8003644 <_sbrk_r>
 8002fd8:	4580      	cmp	r8, r0
 8002fda:	d13a      	bne.n	8003052 <_malloc_r+0xd2>
 8002fdc:	6821      	ldr	r1, [r4, #0]
 8002fde:	3503      	adds	r5, #3
 8002fe0:	1a6d      	subs	r5, r5, r1
 8002fe2:	f025 0503 	bic.w	r5, r5, #3
 8002fe6:	3508      	adds	r5, #8
 8002fe8:	2d0c      	cmp	r5, #12
 8002fea:	bf38      	it	cc
 8002fec:	250c      	movcc	r5, #12
 8002fee:	4629      	mov	r1, r5
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f7ff ffa5 	bl	8002f40 <sbrk_aligned>
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d02b      	beq.n	8003052 <_malloc_r+0xd2>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	442b      	add	r3, r5
 8002ffe:	6023      	str	r3, [r4, #0]
 8003000:	e00e      	b.n	8003020 <_malloc_r+0xa0>
 8003002:	6822      	ldr	r2, [r4, #0]
 8003004:	1b52      	subs	r2, r2, r5
 8003006:	d41e      	bmi.n	8003046 <_malloc_r+0xc6>
 8003008:	2a0b      	cmp	r2, #11
 800300a:	d916      	bls.n	800303a <_malloc_r+0xba>
 800300c:	1961      	adds	r1, r4, r5
 800300e:	42a3      	cmp	r3, r4
 8003010:	6025      	str	r5, [r4, #0]
 8003012:	bf18      	it	ne
 8003014:	6059      	strne	r1, [r3, #4]
 8003016:	6863      	ldr	r3, [r4, #4]
 8003018:	bf08      	it	eq
 800301a:	6031      	streq	r1, [r6, #0]
 800301c:	5162      	str	r2, [r4, r5]
 800301e:	604b      	str	r3, [r1, #4]
 8003020:	4638      	mov	r0, r7
 8003022:	f104 060b 	add.w	r6, r4, #11
 8003026:	f000 fe0b 	bl	8003c40 <__malloc_unlock>
 800302a:	f026 0607 	bic.w	r6, r6, #7
 800302e:	1d23      	adds	r3, r4, #4
 8003030:	1af2      	subs	r2, r6, r3
 8003032:	d0b6      	beq.n	8002fa2 <_malloc_r+0x22>
 8003034:	1b9b      	subs	r3, r3, r6
 8003036:	50a3      	str	r3, [r4, r2]
 8003038:	e7b3      	b.n	8002fa2 <_malloc_r+0x22>
 800303a:	6862      	ldr	r2, [r4, #4]
 800303c:	42a3      	cmp	r3, r4
 800303e:	bf0c      	ite	eq
 8003040:	6032      	streq	r2, [r6, #0]
 8003042:	605a      	strne	r2, [r3, #4]
 8003044:	e7ec      	b.n	8003020 <_malloc_r+0xa0>
 8003046:	4623      	mov	r3, r4
 8003048:	6864      	ldr	r4, [r4, #4]
 800304a:	e7b2      	b.n	8002fb2 <_malloc_r+0x32>
 800304c:	4634      	mov	r4, r6
 800304e:	6876      	ldr	r6, [r6, #4]
 8003050:	e7b9      	b.n	8002fc6 <_malloc_r+0x46>
 8003052:	230c      	movs	r3, #12
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	4638      	mov	r0, r7
 8003058:	f000 fdf2 	bl	8003c40 <__malloc_unlock>
 800305c:	e7a1      	b.n	8002fa2 <_malloc_r+0x22>
 800305e:	6025      	str	r5, [r4, #0]
 8003060:	e7de      	b.n	8003020 <_malloc_r+0xa0>
 8003062:	bf00      	nop
 8003064:	20000238 	.word	0x20000238

08003068 <__sfputc_r>:
 8003068:	6893      	ldr	r3, [r2, #8]
 800306a:	3b01      	subs	r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	b410      	push	{r4}
 8003070:	6093      	str	r3, [r2, #8]
 8003072:	da08      	bge.n	8003086 <__sfputc_r+0x1e>
 8003074:	6994      	ldr	r4, [r2, #24]
 8003076:	42a3      	cmp	r3, r4
 8003078:	db01      	blt.n	800307e <__sfputc_r+0x16>
 800307a:	290a      	cmp	r1, #10
 800307c:	d103      	bne.n	8003086 <__sfputc_r+0x1e>
 800307e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003082:	f000 baef 	b.w	8003664 <__swbuf_r>
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	1c58      	adds	r0, r3, #1
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	7019      	strb	r1, [r3, #0]
 800308e:	4608      	mov	r0, r1
 8003090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003094:	4770      	bx	lr

08003096 <__sfputs_r>:
 8003096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003098:	4606      	mov	r6, r0
 800309a:	460f      	mov	r7, r1
 800309c:	4614      	mov	r4, r2
 800309e:	18d5      	adds	r5, r2, r3
 80030a0:	42ac      	cmp	r4, r5
 80030a2:	d101      	bne.n	80030a8 <__sfputs_r+0x12>
 80030a4:	2000      	movs	r0, #0
 80030a6:	e007      	b.n	80030b8 <__sfputs_r+0x22>
 80030a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ac:	463a      	mov	r2, r7
 80030ae:	4630      	mov	r0, r6
 80030b0:	f7ff ffda 	bl	8003068 <__sfputc_r>
 80030b4:	1c43      	adds	r3, r0, #1
 80030b6:	d1f3      	bne.n	80030a0 <__sfputs_r+0xa>
 80030b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030bc <_vfiprintf_r>:
 80030bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c0:	460d      	mov	r5, r1
 80030c2:	b09d      	sub	sp, #116	; 0x74
 80030c4:	4614      	mov	r4, r2
 80030c6:	4698      	mov	r8, r3
 80030c8:	4606      	mov	r6, r0
 80030ca:	b118      	cbz	r0, 80030d4 <_vfiprintf_r+0x18>
 80030cc:	6983      	ldr	r3, [r0, #24]
 80030ce:	b90b      	cbnz	r3, 80030d4 <_vfiprintf_r+0x18>
 80030d0:	f000 fcaa 	bl	8003a28 <__sinit>
 80030d4:	4b89      	ldr	r3, [pc, #548]	; (80032fc <_vfiprintf_r+0x240>)
 80030d6:	429d      	cmp	r5, r3
 80030d8:	d11b      	bne.n	8003112 <_vfiprintf_r+0x56>
 80030da:	6875      	ldr	r5, [r6, #4]
 80030dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030de:	07d9      	lsls	r1, r3, #31
 80030e0:	d405      	bmi.n	80030ee <_vfiprintf_r+0x32>
 80030e2:	89ab      	ldrh	r3, [r5, #12]
 80030e4:	059a      	lsls	r2, r3, #22
 80030e6:	d402      	bmi.n	80030ee <_vfiprintf_r+0x32>
 80030e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030ea:	f000 fd3b 	bl	8003b64 <__retarget_lock_acquire_recursive>
 80030ee:	89ab      	ldrh	r3, [r5, #12]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	d501      	bpl.n	80030f8 <_vfiprintf_r+0x3c>
 80030f4:	692b      	ldr	r3, [r5, #16]
 80030f6:	b9eb      	cbnz	r3, 8003134 <_vfiprintf_r+0x78>
 80030f8:	4629      	mov	r1, r5
 80030fa:	4630      	mov	r0, r6
 80030fc:	f000 fb04 	bl	8003708 <__swsetup_r>
 8003100:	b1c0      	cbz	r0, 8003134 <_vfiprintf_r+0x78>
 8003102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003104:	07dc      	lsls	r4, r3, #31
 8003106:	d50e      	bpl.n	8003126 <_vfiprintf_r+0x6a>
 8003108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800310c:	b01d      	add	sp, #116	; 0x74
 800310e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003112:	4b7b      	ldr	r3, [pc, #492]	; (8003300 <_vfiprintf_r+0x244>)
 8003114:	429d      	cmp	r5, r3
 8003116:	d101      	bne.n	800311c <_vfiprintf_r+0x60>
 8003118:	68b5      	ldr	r5, [r6, #8]
 800311a:	e7df      	b.n	80030dc <_vfiprintf_r+0x20>
 800311c:	4b79      	ldr	r3, [pc, #484]	; (8003304 <_vfiprintf_r+0x248>)
 800311e:	429d      	cmp	r5, r3
 8003120:	bf08      	it	eq
 8003122:	68f5      	ldreq	r5, [r6, #12]
 8003124:	e7da      	b.n	80030dc <_vfiprintf_r+0x20>
 8003126:	89ab      	ldrh	r3, [r5, #12]
 8003128:	0598      	lsls	r0, r3, #22
 800312a:	d4ed      	bmi.n	8003108 <_vfiprintf_r+0x4c>
 800312c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800312e:	f000 fd1a 	bl	8003b66 <__retarget_lock_release_recursive>
 8003132:	e7e9      	b.n	8003108 <_vfiprintf_r+0x4c>
 8003134:	2300      	movs	r3, #0
 8003136:	9309      	str	r3, [sp, #36]	; 0x24
 8003138:	2320      	movs	r3, #32
 800313a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003142:	2330      	movs	r3, #48	; 0x30
 8003144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003308 <_vfiprintf_r+0x24c>
 8003148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800314c:	f04f 0901 	mov.w	r9, #1
 8003150:	4623      	mov	r3, r4
 8003152:	469a      	mov	sl, r3
 8003154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003158:	b10a      	cbz	r2, 800315e <_vfiprintf_r+0xa2>
 800315a:	2a25      	cmp	r2, #37	; 0x25
 800315c:	d1f9      	bne.n	8003152 <_vfiprintf_r+0x96>
 800315e:	ebba 0b04 	subs.w	fp, sl, r4
 8003162:	d00b      	beq.n	800317c <_vfiprintf_r+0xc0>
 8003164:	465b      	mov	r3, fp
 8003166:	4622      	mov	r2, r4
 8003168:	4629      	mov	r1, r5
 800316a:	4630      	mov	r0, r6
 800316c:	f7ff ff93 	bl	8003096 <__sfputs_r>
 8003170:	3001      	adds	r0, #1
 8003172:	f000 80aa 	beq.w	80032ca <_vfiprintf_r+0x20e>
 8003176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003178:	445a      	add	r2, fp
 800317a:	9209      	str	r2, [sp, #36]	; 0x24
 800317c:	f89a 3000 	ldrb.w	r3, [sl]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a2 	beq.w	80032ca <_vfiprintf_r+0x20e>
 8003186:	2300      	movs	r3, #0
 8003188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800318c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003190:	f10a 0a01 	add.w	sl, sl, #1
 8003194:	9304      	str	r3, [sp, #16]
 8003196:	9307      	str	r3, [sp, #28]
 8003198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800319c:	931a      	str	r3, [sp, #104]	; 0x68
 800319e:	4654      	mov	r4, sl
 80031a0:	2205      	movs	r2, #5
 80031a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a6:	4858      	ldr	r0, [pc, #352]	; (8003308 <_vfiprintf_r+0x24c>)
 80031a8:	f7fd f81a 	bl	80001e0 <memchr>
 80031ac:	9a04      	ldr	r2, [sp, #16]
 80031ae:	b9d8      	cbnz	r0, 80031e8 <_vfiprintf_r+0x12c>
 80031b0:	06d1      	lsls	r1, r2, #27
 80031b2:	bf44      	itt	mi
 80031b4:	2320      	movmi	r3, #32
 80031b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031ba:	0713      	lsls	r3, r2, #28
 80031bc:	bf44      	itt	mi
 80031be:	232b      	movmi	r3, #43	; 0x2b
 80031c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031c4:	f89a 3000 	ldrb.w	r3, [sl]
 80031c8:	2b2a      	cmp	r3, #42	; 0x2a
 80031ca:	d015      	beq.n	80031f8 <_vfiprintf_r+0x13c>
 80031cc:	9a07      	ldr	r2, [sp, #28]
 80031ce:	4654      	mov	r4, sl
 80031d0:	2000      	movs	r0, #0
 80031d2:	f04f 0c0a 	mov.w	ip, #10
 80031d6:	4621      	mov	r1, r4
 80031d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031dc:	3b30      	subs	r3, #48	; 0x30
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d94e      	bls.n	8003280 <_vfiprintf_r+0x1c4>
 80031e2:	b1b0      	cbz	r0, 8003212 <_vfiprintf_r+0x156>
 80031e4:	9207      	str	r2, [sp, #28]
 80031e6:	e014      	b.n	8003212 <_vfiprintf_r+0x156>
 80031e8:	eba0 0308 	sub.w	r3, r0, r8
 80031ec:	fa09 f303 	lsl.w	r3, r9, r3
 80031f0:	4313      	orrs	r3, r2
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	46a2      	mov	sl, r4
 80031f6:	e7d2      	b.n	800319e <_vfiprintf_r+0xe2>
 80031f8:	9b03      	ldr	r3, [sp, #12]
 80031fa:	1d19      	adds	r1, r3, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	9103      	str	r1, [sp, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	bfbb      	ittet	lt
 8003204:	425b      	neglt	r3, r3
 8003206:	f042 0202 	orrlt.w	r2, r2, #2
 800320a:	9307      	strge	r3, [sp, #28]
 800320c:	9307      	strlt	r3, [sp, #28]
 800320e:	bfb8      	it	lt
 8003210:	9204      	strlt	r2, [sp, #16]
 8003212:	7823      	ldrb	r3, [r4, #0]
 8003214:	2b2e      	cmp	r3, #46	; 0x2e
 8003216:	d10c      	bne.n	8003232 <_vfiprintf_r+0x176>
 8003218:	7863      	ldrb	r3, [r4, #1]
 800321a:	2b2a      	cmp	r3, #42	; 0x2a
 800321c:	d135      	bne.n	800328a <_vfiprintf_r+0x1ce>
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfb8      	it	lt
 800322a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800322e:	3402      	adds	r4, #2
 8003230:	9305      	str	r3, [sp, #20]
 8003232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003318 <_vfiprintf_r+0x25c>
 8003236:	7821      	ldrb	r1, [r4, #0]
 8003238:	2203      	movs	r2, #3
 800323a:	4650      	mov	r0, sl
 800323c:	f7fc ffd0 	bl	80001e0 <memchr>
 8003240:	b140      	cbz	r0, 8003254 <_vfiprintf_r+0x198>
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	eba0 000a 	sub.w	r0, r0, sl
 8003248:	fa03 f000 	lsl.w	r0, r3, r0
 800324c:	9b04      	ldr	r3, [sp, #16]
 800324e:	4303      	orrs	r3, r0
 8003250:	3401      	adds	r4, #1
 8003252:	9304      	str	r3, [sp, #16]
 8003254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003258:	482c      	ldr	r0, [pc, #176]	; (800330c <_vfiprintf_r+0x250>)
 800325a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800325e:	2206      	movs	r2, #6
 8003260:	f7fc ffbe 	bl	80001e0 <memchr>
 8003264:	2800      	cmp	r0, #0
 8003266:	d03f      	beq.n	80032e8 <_vfiprintf_r+0x22c>
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <_vfiprintf_r+0x254>)
 800326a:	bb1b      	cbnz	r3, 80032b4 <_vfiprintf_r+0x1f8>
 800326c:	9b03      	ldr	r3, [sp, #12]
 800326e:	3307      	adds	r3, #7
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	3308      	adds	r3, #8
 8003276:	9303      	str	r3, [sp, #12]
 8003278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800327a:	443b      	add	r3, r7
 800327c:	9309      	str	r3, [sp, #36]	; 0x24
 800327e:	e767      	b.n	8003150 <_vfiprintf_r+0x94>
 8003280:	fb0c 3202 	mla	r2, ip, r2, r3
 8003284:	460c      	mov	r4, r1
 8003286:	2001      	movs	r0, #1
 8003288:	e7a5      	b.n	80031d6 <_vfiprintf_r+0x11a>
 800328a:	2300      	movs	r3, #0
 800328c:	3401      	adds	r4, #1
 800328e:	9305      	str	r3, [sp, #20]
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 0c0a 	mov.w	ip, #10
 8003296:	4620      	mov	r0, r4
 8003298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800329c:	3a30      	subs	r2, #48	; 0x30
 800329e:	2a09      	cmp	r2, #9
 80032a0:	d903      	bls.n	80032aa <_vfiprintf_r+0x1ee>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0c5      	beq.n	8003232 <_vfiprintf_r+0x176>
 80032a6:	9105      	str	r1, [sp, #20]
 80032a8:	e7c3      	b.n	8003232 <_vfiprintf_r+0x176>
 80032aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ae:	4604      	mov	r4, r0
 80032b0:	2301      	movs	r3, #1
 80032b2:	e7f0      	b.n	8003296 <_vfiprintf_r+0x1da>
 80032b4:	ab03      	add	r3, sp, #12
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	462a      	mov	r2, r5
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <_vfiprintf_r+0x258>)
 80032bc:	a904      	add	r1, sp, #16
 80032be:	4630      	mov	r0, r6
 80032c0:	f3af 8000 	nop.w
 80032c4:	4607      	mov	r7, r0
 80032c6:	1c78      	adds	r0, r7, #1
 80032c8:	d1d6      	bne.n	8003278 <_vfiprintf_r+0x1bc>
 80032ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032cc:	07d9      	lsls	r1, r3, #31
 80032ce:	d405      	bmi.n	80032dc <_vfiprintf_r+0x220>
 80032d0:	89ab      	ldrh	r3, [r5, #12]
 80032d2:	059a      	lsls	r2, r3, #22
 80032d4:	d402      	bmi.n	80032dc <_vfiprintf_r+0x220>
 80032d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032d8:	f000 fc45 	bl	8003b66 <__retarget_lock_release_recursive>
 80032dc:	89ab      	ldrh	r3, [r5, #12]
 80032de:	065b      	lsls	r3, r3, #25
 80032e0:	f53f af12 	bmi.w	8003108 <_vfiprintf_r+0x4c>
 80032e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032e6:	e711      	b.n	800310c <_vfiprintf_r+0x50>
 80032e8:	ab03      	add	r3, sp, #12
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	462a      	mov	r2, r5
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <_vfiprintf_r+0x258>)
 80032f0:	a904      	add	r1, sp, #16
 80032f2:	4630      	mov	r0, r6
 80032f4:	f000 f880 	bl	80033f8 <_printf_i>
 80032f8:	e7e4      	b.n	80032c4 <_vfiprintf_r+0x208>
 80032fa:	bf00      	nop
 80032fc:	08003f74 	.word	0x08003f74
 8003300:	08003f94 	.word	0x08003f94
 8003304:	08003f54 	.word	0x08003f54
 8003308:	08003f1e 	.word	0x08003f1e
 800330c:	08003f28 	.word	0x08003f28
 8003310:	00000000 	.word	0x00000000
 8003314:	08003097 	.word	0x08003097
 8003318:	08003f24 	.word	0x08003f24

0800331c <_printf_common>:
 800331c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003320:	4616      	mov	r6, r2
 8003322:	4699      	mov	r9, r3
 8003324:	688a      	ldr	r2, [r1, #8]
 8003326:	690b      	ldr	r3, [r1, #16]
 8003328:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800332c:	4293      	cmp	r3, r2
 800332e:	bfb8      	it	lt
 8003330:	4613      	movlt	r3, r2
 8003332:	6033      	str	r3, [r6, #0]
 8003334:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003338:	4607      	mov	r7, r0
 800333a:	460c      	mov	r4, r1
 800333c:	b10a      	cbz	r2, 8003342 <_printf_common+0x26>
 800333e:	3301      	adds	r3, #1
 8003340:	6033      	str	r3, [r6, #0]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	0699      	lsls	r1, r3, #26
 8003346:	bf42      	ittt	mi
 8003348:	6833      	ldrmi	r3, [r6, #0]
 800334a:	3302      	addmi	r3, #2
 800334c:	6033      	strmi	r3, [r6, #0]
 800334e:	6825      	ldr	r5, [r4, #0]
 8003350:	f015 0506 	ands.w	r5, r5, #6
 8003354:	d106      	bne.n	8003364 <_printf_common+0x48>
 8003356:	f104 0a19 	add.w	sl, r4, #25
 800335a:	68e3      	ldr	r3, [r4, #12]
 800335c:	6832      	ldr	r2, [r6, #0]
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	42ab      	cmp	r3, r5
 8003362:	dc26      	bgt.n	80033b2 <_printf_common+0x96>
 8003364:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003368:	1e13      	subs	r3, r2, #0
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	bf18      	it	ne
 800336e:	2301      	movne	r3, #1
 8003370:	0692      	lsls	r2, r2, #26
 8003372:	d42b      	bmi.n	80033cc <_printf_common+0xb0>
 8003374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003378:	4649      	mov	r1, r9
 800337a:	4638      	mov	r0, r7
 800337c:	47c0      	blx	r8
 800337e:	3001      	adds	r0, #1
 8003380:	d01e      	beq.n	80033c0 <_printf_common+0xa4>
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	68e5      	ldr	r5, [r4, #12]
 8003386:	6832      	ldr	r2, [r6, #0]
 8003388:	f003 0306 	and.w	r3, r3, #6
 800338c:	2b04      	cmp	r3, #4
 800338e:	bf08      	it	eq
 8003390:	1aad      	subeq	r5, r5, r2
 8003392:	68a3      	ldr	r3, [r4, #8]
 8003394:	6922      	ldr	r2, [r4, #16]
 8003396:	bf0c      	ite	eq
 8003398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800339c:	2500      	movne	r5, #0
 800339e:	4293      	cmp	r3, r2
 80033a0:	bfc4      	itt	gt
 80033a2:	1a9b      	subgt	r3, r3, r2
 80033a4:	18ed      	addgt	r5, r5, r3
 80033a6:	2600      	movs	r6, #0
 80033a8:	341a      	adds	r4, #26
 80033aa:	42b5      	cmp	r5, r6
 80033ac:	d11a      	bne.n	80033e4 <_printf_common+0xc8>
 80033ae:	2000      	movs	r0, #0
 80033b0:	e008      	b.n	80033c4 <_printf_common+0xa8>
 80033b2:	2301      	movs	r3, #1
 80033b4:	4652      	mov	r2, sl
 80033b6:	4649      	mov	r1, r9
 80033b8:	4638      	mov	r0, r7
 80033ba:	47c0      	blx	r8
 80033bc:	3001      	adds	r0, #1
 80033be:	d103      	bne.n	80033c8 <_printf_common+0xac>
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c8:	3501      	adds	r5, #1
 80033ca:	e7c6      	b.n	800335a <_printf_common+0x3e>
 80033cc:	18e1      	adds	r1, r4, r3
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	2030      	movs	r0, #48	; 0x30
 80033d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033d6:	4422      	add	r2, r4
 80033d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033e0:	3302      	adds	r3, #2
 80033e2:	e7c7      	b.n	8003374 <_printf_common+0x58>
 80033e4:	2301      	movs	r3, #1
 80033e6:	4622      	mov	r2, r4
 80033e8:	4649      	mov	r1, r9
 80033ea:	4638      	mov	r0, r7
 80033ec:	47c0      	blx	r8
 80033ee:	3001      	adds	r0, #1
 80033f0:	d0e6      	beq.n	80033c0 <_printf_common+0xa4>
 80033f2:	3601      	adds	r6, #1
 80033f4:	e7d9      	b.n	80033aa <_printf_common+0x8e>
	...

080033f8 <_printf_i>:
 80033f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033fc:	7e0f      	ldrb	r7, [r1, #24]
 80033fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003400:	2f78      	cmp	r7, #120	; 0x78
 8003402:	4691      	mov	r9, r2
 8003404:	4680      	mov	r8, r0
 8003406:	460c      	mov	r4, r1
 8003408:	469a      	mov	sl, r3
 800340a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800340e:	d807      	bhi.n	8003420 <_printf_i+0x28>
 8003410:	2f62      	cmp	r7, #98	; 0x62
 8003412:	d80a      	bhi.n	800342a <_printf_i+0x32>
 8003414:	2f00      	cmp	r7, #0
 8003416:	f000 80d8 	beq.w	80035ca <_printf_i+0x1d2>
 800341a:	2f58      	cmp	r7, #88	; 0x58
 800341c:	f000 80a3 	beq.w	8003566 <_printf_i+0x16e>
 8003420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003428:	e03a      	b.n	80034a0 <_printf_i+0xa8>
 800342a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800342e:	2b15      	cmp	r3, #21
 8003430:	d8f6      	bhi.n	8003420 <_printf_i+0x28>
 8003432:	a101      	add	r1, pc, #4	; (adr r1, 8003438 <_printf_i+0x40>)
 8003434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003438:	08003491 	.word	0x08003491
 800343c:	080034a5 	.word	0x080034a5
 8003440:	08003421 	.word	0x08003421
 8003444:	08003421 	.word	0x08003421
 8003448:	08003421 	.word	0x08003421
 800344c:	08003421 	.word	0x08003421
 8003450:	080034a5 	.word	0x080034a5
 8003454:	08003421 	.word	0x08003421
 8003458:	08003421 	.word	0x08003421
 800345c:	08003421 	.word	0x08003421
 8003460:	08003421 	.word	0x08003421
 8003464:	080035b1 	.word	0x080035b1
 8003468:	080034d5 	.word	0x080034d5
 800346c:	08003593 	.word	0x08003593
 8003470:	08003421 	.word	0x08003421
 8003474:	08003421 	.word	0x08003421
 8003478:	080035d3 	.word	0x080035d3
 800347c:	08003421 	.word	0x08003421
 8003480:	080034d5 	.word	0x080034d5
 8003484:	08003421 	.word	0x08003421
 8003488:	08003421 	.word	0x08003421
 800348c:	0800359b 	.word	0x0800359b
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	1d1a      	adds	r2, r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	602a      	str	r2, [r5, #0]
 8003498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800349c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0a3      	b.n	80035ec <_printf_i+0x1f4>
 80034a4:	6820      	ldr	r0, [r4, #0]
 80034a6:	6829      	ldr	r1, [r5, #0]
 80034a8:	0606      	lsls	r6, r0, #24
 80034aa:	f101 0304 	add.w	r3, r1, #4
 80034ae:	d50a      	bpl.n	80034c6 <_printf_i+0xce>
 80034b0:	680e      	ldr	r6, [r1, #0]
 80034b2:	602b      	str	r3, [r5, #0]
 80034b4:	2e00      	cmp	r6, #0
 80034b6:	da03      	bge.n	80034c0 <_printf_i+0xc8>
 80034b8:	232d      	movs	r3, #45	; 0x2d
 80034ba:	4276      	negs	r6, r6
 80034bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c0:	485e      	ldr	r0, [pc, #376]	; (800363c <_printf_i+0x244>)
 80034c2:	230a      	movs	r3, #10
 80034c4:	e019      	b.n	80034fa <_printf_i+0x102>
 80034c6:	680e      	ldr	r6, [r1, #0]
 80034c8:	602b      	str	r3, [r5, #0]
 80034ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034ce:	bf18      	it	ne
 80034d0:	b236      	sxthne	r6, r6
 80034d2:	e7ef      	b.n	80034b4 <_printf_i+0xbc>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	1d19      	adds	r1, r3, #4
 80034da:	6029      	str	r1, [r5, #0]
 80034dc:	0601      	lsls	r1, r0, #24
 80034de:	d501      	bpl.n	80034e4 <_printf_i+0xec>
 80034e0:	681e      	ldr	r6, [r3, #0]
 80034e2:	e002      	b.n	80034ea <_printf_i+0xf2>
 80034e4:	0646      	lsls	r6, r0, #25
 80034e6:	d5fb      	bpl.n	80034e0 <_printf_i+0xe8>
 80034e8:	881e      	ldrh	r6, [r3, #0]
 80034ea:	4854      	ldr	r0, [pc, #336]	; (800363c <_printf_i+0x244>)
 80034ec:	2f6f      	cmp	r7, #111	; 0x6f
 80034ee:	bf0c      	ite	eq
 80034f0:	2308      	moveq	r3, #8
 80034f2:	230a      	movne	r3, #10
 80034f4:	2100      	movs	r1, #0
 80034f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034fa:	6865      	ldr	r5, [r4, #4]
 80034fc:	60a5      	str	r5, [r4, #8]
 80034fe:	2d00      	cmp	r5, #0
 8003500:	bfa2      	ittt	ge
 8003502:	6821      	ldrge	r1, [r4, #0]
 8003504:	f021 0104 	bicge.w	r1, r1, #4
 8003508:	6021      	strge	r1, [r4, #0]
 800350a:	b90e      	cbnz	r6, 8003510 <_printf_i+0x118>
 800350c:	2d00      	cmp	r5, #0
 800350e:	d04d      	beq.n	80035ac <_printf_i+0x1b4>
 8003510:	4615      	mov	r5, r2
 8003512:	fbb6 f1f3 	udiv	r1, r6, r3
 8003516:	fb03 6711 	mls	r7, r3, r1, r6
 800351a:	5dc7      	ldrb	r7, [r0, r7]
 800351c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003520:	4637      	mov	r7, r6
 8003522:	42bb      	cmp	r3, r7
 8003524:	460e      	mov	r6, r1
 8003526:	d9f4      	bls.n	8003512 <_printf_i+0x11a>
 8003528:	2b08      	cmp	r3, #8
 800352a:	d10b      	bne.n	8003544 <_printf_i+0x14c>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	07de      	lsls	r6, r3, #31
 8003530:	d508      	bpl.n	8003544 <_printf_i+0x14c>
 8003532:	6923      	ldr	r3, [r4, #16]
 8003534:	6861      	ldr	r1, [r4, #4]
 8003536:	4299      	cmp	r1, r3
 8003538:	bfde      	ittt	le
 800353a:	2330      	movle	r3, #48	; 0x30
 800353c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003540:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003544:	1b52      	subs	r2, r2, r5
 8003546:	6122      	str	r2, [r4, #16]
 8003548:	f8cd a000 	str.w	sl, [sp]
 800354c:	464b      	mov	r3, r9
 800354e:	aa03      	add	r2, sp, #12
 8003550:	4621      	mov	r1, r4
 8003552:	4640      	mov	r0, r8
 8003554:	f7ff fee2 	bl	800331c <_printf_common>
 8003558:	3001      	adds	r0, #1
 800355a:	d14c      	bne.n	80035f6 <_printf_i+0x1fe>
 800355c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003560:	b004      	add	sp, #16
 8003562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003566:	4835      	ldr	r0, [pc, #212]	; (800363c <_printf_i+0x244>)
 8003568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800356c:	6829      	ldr	r1, [r5, #0]
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	f851 6b04 	ldr.w	r6, [r1], #4
 8003574:	6029      	str	r1, [r5, #0]
 8003576:	061d      	lsls	r5, r3, #24
 8003578:	d514      	bpl.n	80035a4 <_printf_i+0x1ac>
 800357a:	07df      	lsls	r7, r3, #31
 800357c:	bf44      	itt	mi
 800357e:	f043 0320 	orrmi.w	r3, r3, #32
 8003582:	6023      	strmi	r3, [r4, #0]
 8003584:	b91e      	cbnz	r6, 800358e <_printf_i+0x196>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	f023 0320 	bic.w	r3, r3, #32
 800358c:	6023      	str	r3, [r4, #0]
 800358e:	2310      	movs	r3, #16
 8003590:	e7b0      	b.n	80034f4 <_printf_i+0xfc>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f043 0320 	orr.w	r3, r3, #32
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	2378      	movs	r3, #120	; 0x78
 800359c:	4828      	ldr	r0, [pc, #160]	; (8003640 <_printf_i+0x248>)
 800359e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035a2:	e7e3      	b.n	800356c <_printf_i+0x174>
 80035a4:	0659      	lsls	r1, r3, #25
 80035a6:	bf48      	it	mi
 80035a8:	b2b6      	uxthmi	r6, r6
 80035aa:	e7e6      	b.n	800357a <_printf_i+0x182>
 80035ac:	4615      	mov	r5, r2
 80035ae:	e7bb      	b.n	8003528 <_printf_i+0x130>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	6826      	ldr	r6, [r4, #0]
 80035b4:	6961      	ldr	r1, [r4, #20]
 80035b6:	1d18      	adds	r0, r3, #4
 80035b8:	6028      	str	r0, [r5, #0]
 80035ba:	0635      	lsls	r5, r6, #24
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	d501      	bpl.n	80035c4 <_printf_i+0x1cc>
 80035c0:	6019      	str	r1, [r3, #0]
 80035c2:	e002      	b.n	80035ca <_printf_i+0x1d2>
 80035c4:	0670      	lsls	r0, r6, #25
 80035c6:	d5fb      	bpl.n	80035c0 <_printf_i+0x1c8>
 80035c8:	8019      	strh	r1, [r3, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	6123      	str	r3, [r4, #16]
 80035ce:	4615      	mov	r5, r2
 80035d0:	e7ba      	b.n	8003548 <_printf_i+0x150>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	1d1a      	adds	r2, r3, #4
 80035d6:	602a      	str	r2, [r5, #0]
 80035d8:	681d      	ldr	r5, [r3, #0]
 80035da:	6862      	ldr	r2, [r4, #4]
 80035dc:	2100      	movs	r1, #0
 80035de:	4628      	mov	r0, r5
 80035e0:	f7fc fdfe 	bl	80001e0 <memchr>
 80035e4:	b108      	cbz	r0, 80035ea <_printf_i+0x1f2>
 80035e6:	1b40      	subs	r0, r0, r5
 80035e8:	6060      	str	r0, [r4, #4]
 80035ea:	6863      	ldr	r3, [r4, #4]
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	2300      	movs	r3, #0
 80035f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f4:	e7a8      	b.n	8003548 <_printf_i+0x150>
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	462a      	mov	r2, r5
 80035fa:	4649      	mov	r1, r9
 80035fc:	4640      	mov	r0, r8
 80035fe:	47d0      	blx	sl
 8003600:	3001      	adds	r0, #1
 8003602:	d0ab      	beq.n	800355c <_printf_i+0x164>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	079b      	lsls	r3, r3, #30
 8003608:	d413      	bmi.n	8003632 <_printf_i+0x23a>
 800360a:	68e0      	ldr	r0, [r4, #12]
 800360c:	9b03      	ldr	r3, [sp, #12]
 800360e:	4298      	cmp	r0, r3
 8003610:	bfb8      	it	lt
 8003612:	4618      	movlt	r0, r3
 8003614:	e7a4      	b.n	8003560 <_printf_i+0x168>
 8003616:	2301      	movs	r3, #1
 8003618:	4632      	mov	r2, r6
 800361a:	4649      	mov	r1, r9
 800361c:	4640      	mov	r0, r8
 800361e:	47d0      	blx	sl
 8003620:	3001      	adds	r0, #1
 8003622:	d09b      	beq.n	800355c <_printf_i+0x164>
 8003624:	3501      	adds	r5, #1
 8003626:	68e3      	ldr	r3, [r4, #12]
 8003628:	9903      	ldr	r1, [sp, #12]
 800362a:	1a5b      	subs	r3, r3, r1
 800362c:	42ab      	cmp	r3, r5
 800362e:	dcf2      	bgt.n	8003616 <_printf_i+0x21e>
 8003630:	e7eb      	b.n	800360a <_printf_i+0x212>
 8003632:	2500      	movs	r5, #0
 8003634:	f104 0619 	add.w	r6, r4, #25
 8003638:	e7f5      	b.n	8003626 <_printf_i+0x22e>
 800363a:	bf00      	nop
 800363c:	08003f2f 	.word	0x08003f2f
 8003640:	08003f40 	.word	0x08003f40

08003644 <_sbrk_r>:
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4d06      	ldr	r5, [pc, #24]	; (8003660 <_sbrk_r+0x1c>)
 8003648:	2300      	movs	r3, #0
 800364a:	4604      	mov	r4, r0
 800364c:	4608      	mov	r0, r1
 800364e:	602b      	str	r3, [r5, #0]
 8003650:	f7fd fbc4 	bl	8000ddc <_sbrk>
 8003654:	1c43      	adds	r3, r0, #1
 8003656:	d102      	bne.n	800365e <_sbrk_r+0x1a>
 8003658:	682b      	ldr	r3, [r5, #0]
 800365a:	b103      	cbz	r3, 800365e <_sbrk_r+0x1a>
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	bd38      	pop	{r3, r4, r5, pc}
 8003660:	20000240 	.word	0x20000240

08003664 <__swbuf_r>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	460e      	mov	r6, r1
 8003668:	4614      	mov	r4, r2
 800366a:	4605      	mov	r5, r0
 800366c:	b118      	cbz	r0, 8003676 <__swbuf_r+0x12>
 800366e:	6983      	ldr	r3, [r0, #24]
 8003670:	b90b      	cbnz	r3, 8003676 <__swbuf_r+0x12>
 8003672:	f000 f9d9 	bl	8003a28 <__sinit>
 8003676:	4b21      	ldr	r3, [pc, #132]	; (80036fc <__swbuf_r+0x98>)
 8003678:	429c      	cmp	r4, r3
 800367a:	d12b      	bne.n	80036d4 <__swbuf_r+0x70>
 800367c:	686c      	ldr	r4, [r5, #4]
 800367e:	69a3      	ldr	r3, [r4, #24]
 8003680:	60a3      	str	r3, [r4, #8]
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	071a      	lsls	r2, r3, #28
 8003686:	d52f      	bpl.n	80036e8 <__swbuf_r+0x84>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	b36b      	cbz	r3, 80036e8 <__swbuf_r+0x84>
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	6820      	ldr	r0, [r4, #0]
 8003690:	1ac0      	subs	r0, r0, r3
 8003692:	6963      	ldr	r3, [r4, #20]
 8003694:	b2f6      	uxtb	r6, r6
 8003696:	4283      	cmp	r3, r0
 8003698:	4637      	mov	r7, r6
 800369a:	dc04      	bgt.n	80036a6 <__swbuf_r+0x42>
 800369c:	4621      	mov	r1, r4
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 f92e 	bl	8003900 <_fflush_r>
 80036a4:	bb30      	cbnz	r0, 80036f4 <__swbuf_r+0x90>
 80036a6:	68a3      	ldr	r3, [r4, #8]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	60a3      	str	r3, [r4, #8]
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	6022      	str	r2, [r4, #0]
 80036b2:	701e      	strb	r6, [r3, #0]
 80036b4:	6963      	ldr	r3, [r4, #20]
 80036b6:	3001      	adds	r0, #1
 80036b8:	4283      	cmp	r3, r0
 80036ba:	d004      	beq.n	80036c6 <__swbuf_r+0x62>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	07db      	lsls	r3, r3, #31
 80036c0:	d506      	bpl.n	80036d0 <__swbuf_r+0x6c>
 80036c2:	2e0a      	cmp	r6, #10
 80036c4:	d104      	bne.n	80036d0 <__swbuf_r+0x6c>
 80036c6:	4621      	mov	r1, r4
 80036c8:	4628      	mov	r0, r5
 80036ca:	f000 f919 	bl	8003900 <_fflush_r>
 80036ce:	b988      	cbnz	r0, 80036f4 <__swbuf_r+0x90>
 80036d0:	4638      	mov	r0, r7
 80036d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <__swbuf_r+0x9c>)
 80036d6:	429c      	cmp	r4, r3
 80036d8:	d101      	bne.n	80036de <__swbuf_r+0x7a>
 80036da:	68ac      	ldr	r4, [r5, #8]
 80036dc:	e7cf      	b.n	800367e <__swbuf_r+0x1a>
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <__swbuf_r+0xa0>)
 80036e0:	429c      	cmp	r4, r3
 80036e2:	bf08      	it	eq
 80036e4:	68ec      	ldreq	r4, [r5, #12]
 80036e6:	e7ca      	b.n	800367e <__swbuf_r+0x1a>
 80036e8:	4621      	mov	r1, r4
 80036ea:	4628      	mov	r0, r5
 80036ec:	f000 f80c 	bl	8003708 <__swsetup_r>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d0cb      	beq.n	800368c <__swbuf_r+0x28>
 80036f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80036f8:	e7ea      	b.n	80036d0 <__swbuf_r+0x6c>
 80036fa:	bf00      	nop
 80036fc:	08003f74 	.word	0x08003f74
 8003700:	08003f94 	.word	0x08003f94
 8003704:	08003f54 	.word	0x08003f54

08003708 <__swsetup_r>:
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <__swsetup_r+0xcc>)
 800370a:	b570      	push	{r4, r5, r6, lr}
 800370c:	681d      	ldr	r5, [r3, #0]
 800370e:	4606      	mov	r6, r0
 8003710:	460c      	mov	r4, r1
 8003712:	b125      	cbz	r5, 800371e <__swsetup_r+0x16>
 8003714:	69ab      	ldr	r3, [r5, #24]
 8003716:	b913      	cbnz	r3, 800371e <__swsetup_r+0x16>
 8003718:	4628      	mov	r0, r5
 800371a:	f000 f985 	bl	8003a28 <__sinit>
 800371e:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <__swsetup_r+0xd0>)
 8003720:	429c      	cmp	r4, r3
 8003722:	d10f      	bne.n	8003744 <__swsetup_r+0x3c>
 8003724:	686c      	ldr	r4, [r5, #4]
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800372c:	0719      	lsls	r1, r3, #28
 800372e:	d42c      	bmi.n	800378a <__swsetup_r+0x82>
 8003730:	06dd      	lsls	r5, r3, #27
 8003732:	d411      	bmi.n	8003758 <__swsetup_r+0x50>
 8003734:	2309      	movs	r3, #9
 8003736:	6033      	str	r3, [r6, #0]
 8003738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003742:	e03e      	b.n	80037c2 <__swsetup_r+0xba>
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <__swsetup_r+0xd4>)
 8003746:	429c      	cmp	r4, r3
 8003748:	d101      	bne.n	800374e <__swsetup_r+0x46>
 800374a:	68ac      	ldr	r4, [r5, #8]
 800374c:	e7eb      	b.n	8003726 <__swsetup_r+0x1e>
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <__swsetup_r+0xd8>)
 8003750:	429c      	cmp	r4, r3
 8003752:	bf08      	it	eq
 8003754:	68ec      	ldreq	r4, [r5, #12]
 8003756:	e7e6      	b.n	8003726 <__swsetup_r+0x1e>
 8003758:	0758      	lsls	r0, r3, #29
 800375a:	d512      	bpl.n	8003782 <__swsetup_r+0x7a>
 800375c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800375e:	b141      	cbz	r1, 8003772 <__swsetup_r+0x6a>
 8003760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003764:	4299      	cmp	r1, r3
 8003766:	d002      	beq.n	800376e <__swsetup_r+0x66>
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff fb9d 	bl	8002ea8 <_free_r>
 800376e:	2300      	movs	r3, #0
 8003770:	6363      	str	r3, [r4, #52]	; 0x34
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003778:	81a3      	strh	r3, [r4, #12]
 800377a:	2300      	movs	r3, #0
 800377c:	6063      	str	r3, [r4, #4]
 800377e:	6923      	ldr	r3, [r4, #16]
 8003780:	6023      	str	r3, [r4, #0]
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	f043 0308 	orr.w	r3, r3, #8
 8003788:	81a3      	strh	r3, [r4, #12]
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	b94b      	cbnz	r3, 80037a2 <__swsetup_r+0x9a>
 800378e:	89a3      	ldrh	r3, [r4, #12]
 8003790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d003      	beq.n	80037a2 <__swsetup_r+0x9a>
 800379a:	4621      	mov	r1, r4
 800379c:	4630      	mov	r0, r6
 800379e:	f000 fa09 	bl	8003bb4 <__smakebuf_r>
 80037a2:	89a0      	ldrh	r0, [r4, #12]
 80037a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037a8:	f010 0301 	ands.w	r3, r0, #1
 80037ac:	d00a      	beq.n	80037c4 <__swsetup_r+0xbc>
 80037ae:	2300      	movs	r3, #0
 80037b0:	60a3      	str	r3, [r4, #8]
 80037b2:	6963      	ldr	r3, [r4, #20]
 80037b4:	425b      	negs	r3, r3
 80037b6:	61a3      	str	r3, [r4, #24]
 80037b8:	6923      	ldr	r3, [r4, #16]
 80037ba:	b943      	cbnz	r3, 80037ce <__swsetup_r+0xc6>
 80037bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037c0:	d1ba      	bne.n	8003738 <__swsetup_r+0x30>
 80037c2:	bd70      	pop	{r4, r5, r6, pc}
 80037c4:	0781      	lsls	r1, r0, #30
 80037c6:	bf58      	it	pl
 80037c8:	6963      	ldrpl	r3, [r4, #20]
 80037ca:	60a3      	str	r3, [r4, #8]
 80037cc:	e7f4      	b.n	80037b8 <__swsetup_r+0xb0>
 80037ce:	2000      	movs	r0, #0
 80037d0:	e7f7      	b.n	80037c2 <__swsetup_r+0xba>
 80037d2:	bf00      	nop
 80037d4:	20000018 	.word	0x20000018
 80037d8:	08003f74 	.word	0x08003f74
 80037dc:	08003f94 	.word	0x08003f94
 80037e0:	08003f54 	.word	0x08003f54

080037e4 <abort>:
 80037e4:	b508      	push	{r3, lr}
 80037e6:	2006      	movs	r0, #6
 80037e8:	f000 fa58 	bl	8003c9c <raise>
 80037ec:	2001      	movs	r0, #1
 80037ee:	f7fd fa7d 	bl	8000cec <_exit>
	...

080037f4 <__sflush_r>:
 80037f4:	898a      	ldrh	r2, [r1, #12]
 80037f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fa:	4605      	mov	r5, r0
 80037fc:	0710      	lsls	r0, r2, #28
 80037fe:	460c      	mov	r4, r1
 8003800:	d458      	bmi.n	80038b4 <__sflush_r+0xc0>
 8003802:	684b      	ldr	r3, [r1, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	dc05      	bgt.n	8003814 <__sflush_r+0x20>
 8003808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	dc02      	bgt.n	8003814 <__sflush_r+0x20>
 800380e:	2000      	movs	r0, #0
 8003810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003816:	2e00      	cmp	r6, #0
 8003818:	d0f9      	beq.n	800380e <__sflush_r+0x1a>
 800381a:	2300      	movs	r3, #0
 800381c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003820:	682f      	ldr	r7, [r5, #0]
 8003822:	602b      	str	r3, [r5, #0]
 8003824:	d032      	beq.n	800388c <__sflush_r+0x98>
 8003826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	075a      	lsls	r2, r3, #29
 800382c:	d505      	bpl.n	800383a <__sflush_r+0x46>
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003834:	b10b      	cbz	r3, 800383a <__sflush_r+0x46>
 8003836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003838:	1ac0      	subs	r0, r0, r3
 800383a:	2300      	movs	r3, #0
 800383c:	4602      	mov	r2, r0
 800383e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003840:	6a21      	ldr	r1, [r4, #32]
 8003842:	4628      	mov	r0, r5
 8003844:	47b0      	blx	r6
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	d106      	bne.n	800385a <__sflush_r+0x66>
 800384c:	6829      	ldr	r1, [r5, #0]
 800384e:	291d      	cmp	r1, #29
 8003850:	d82c      	bhi.n	80038ac <__sflush_r+0xb8>
 8003852:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <__sflush_r+0x108>)
 8003854:	40ca      	lsrs	r2, r1
 8003856:	07d6      	lsls	r6, r2, #31
 8003858:	d528      	bpl.n	80038ac <__sflush_r+0xb8>
 800385a:	2200      	movs	r2, #0
 800385c:	6062      	str	r2, [r4, #4]
 800385e:	04d9      	lsls	r1, r3, #19
 8003860:	6922      	ldr	r2, [r4, #16]
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	d504      	bpl.n	8003870 <__sflush_r+0x7c>
 8003866:	1c42      	adds	r2, r0, #1
 8003868:	d101      	bne.n	800386e <__sflush_r+0x7a>
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	b903      	cbnz	r3, 8003870 <__sflush_r+0x7c>
 800386e:	6560      	str	r0, [r4, #84]	; 0x54
 8003870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003872:	602f      	str	r7, [r5, #0]
 8003874:	2900      	cmp	r1, #0
 8003876:	d0ca      	beq.n	800380e <__sflush_r+0x1a>
 8003878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800387c:	4299      	cmp	r1, r3
 800387e:	d002      	beq.n	8003886 <__sflush_r+0x92>
 8003880:	4628      	mov	r0, r5
 8003882:	f7ff fb11 	bl	8002ea8 <_free_r>
 8003886:	2000      	movs	r0, #0
 8003888:	6360      	str	r0, [r4, #52]	; 0x34
 800388a:	e7c1      	b.n	8003810 <__sflush_r+0x1c>
 800388c:	6a21      	ldr	r1, [r4, #32]
 800388e:	2301      	movs	r3, #1
 8003890:	4628      	mov	r0, r5
 8003892:	47b0      	blx	r6
 8003894:	1c41      	adds	r1, r0, #1
 8003896:	d1c7      	bne.n	8003828 <__sflush_r+0x34>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0c4      	beq.n	8003828 <__sflush_r+0x34>
 800389e:	2b1d      	cmp	r3, #29
 80038a0:	d001      	beq.n	80038a6 <__sflush_r+0xb2>
 80038a2:	2b16      	cmp	r3, #22
 80038a4:	d101      	bne.n	80038aa <__sflush_r+0xb6>
 80038a6:	602f      	str	r7, [r5, #0]
 80038a8:	e7b1      	b.n	800380e <__sflush_r+0x1a>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b0:	81a3      	strh	r3, [r4, #12]
 80038b2:	e7ad      	b.n	8003810 <__sflush_r+0x1c>
 80038b4:	690f      	ldr	r7, [r1, #16]
 80038b6:	2f00      	cmp	r7, #0
 80038b8:	d0a9      	beq.n	800380e <__sflush_r+0x1a>
 80038ba:	0793      	lsls	r3, r2, #30
 80038bc:	680e      	ldr	r6, [r1, #0]
 80038be:	bf08      	it	eq
 80038c0:	694b      	ldreq	r3, [r1, #20]
 80038c2:	600f      	str	r7, [r1, #0]
 80038c4:	bf18      	it	ne
 80038c6:	2300      	movne	r3, #0
 80038c8:	eba6 0807 	sub.w	r8, r6, r7
 80038cc:	608b      	str	r3, [r1, #8]
 80038ce:	f1b8 0f00 	cmp.w	r8, #0
 80038d2:	dd9c      	ble.n	800380e <__sflush_r+0x1a>
 80038d4:	6a21      	ldr	r1, [r4, #32]
 80038d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038d8:	4643      	mov	r3, r8
 80038da:	463a      	mov	r2, r7
 80038dc:	4628      	mov	r0, r5
 80038de:	47b0      	blx	r6
 80038e0:	2800      	cmp	r0, #0
 80038e2:	dc06      	bgt.n	80038f2 <__sflush_r+0xfe>
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038f0:	e78e      	b.n	8003810 <__sflush_r+0x1c>
 80038f2:	4407      	add	r7, r0
 80038f4:	eba8 0800 	sub.w	r8, r8, r0
 80038f8:	e7e9      	b.n	80038ce <__sflush_r+0xda>
 80038fa:	bf00      	nop
 80038fc:	20400001 	.word	0x20400001

08003900 <_fflush_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	4605      	mov	r5, r0
 8003906:	460c      	mov	r4, r1
 8003908:	b913      	cbnz	r3, 8003910 <_fflush_r+0x10>
 800390a:	2500      	movs	r5, #0
 800390c:	4628      	mov	r0, r5
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	b118      	cbz	r0, 800391a <_fflush_r+0x1a>
 8003912:	6983      	ldr	r3, [r0, #24]
 8003914:	b90b      	cbnz	r3, 800391a <_fflush_r+0x1a>
 8003916:	f000 f887 	bl	8003a28 <__sinit>
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <_fflush_r+0x6c>)
 800391c:	429c      	cmp	r4, r3
 800391e:	d11b      	bne.n	8003958 <_fflush_r+0x58>
 8003920:	686c      	ldr	r4, [r5, #4]
 8003922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ef      	beq.n	800390a <_fflush_r+0xa>
 800392a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800392c:	07d0      	lsls	r0, r2, #31
 800392e:	d404      	bmi.n	800393a <_fflush_r+0x3a>
 8003930:	0599      	lsls	r1, r3, #22
 8003932:	d402      	bmi.n	800393a <_fflush_r+0x3a>
 8003934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003936:	f000 f915 	bl	8003b64 <__retarget_lock_acquire_recursive>
 800393a:	4628      	mov	r0, r5
 800393c:	4621      	mov	r1, r4
 800393e:	f7ff ff59 	bl	80037f4 <__sflush_r>
 8003942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003944:	07da      	lsls	r2, r3, #31
 8003946:	4605      	mov	r5, r0
 8003948:	d4e0      	bmi.n	800390c <_fflush_r+0xc>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	059b      	lsls	r3, r3, #22
 800394e:	d4dd      	bmi.n	800390c <_fflush_r+0xc>
 8003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003952:	f000 f908 	bl	8003b66 <__retarget_lock_release_recursive>
 8003956:	e7d9      	b.n	800390c <_fflush_r+0xc>
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <_fflush_r+0x70>)
 800395a:	429c      	cmp	r4, r3
 800395c:	d101      	bne.n	8003962 <_fflush_r+0x62>
 800395e:	68ac      	ldr	r4, [r5, #8]
 8003960:	e7df      	b.n	8003922 <_fflush_r+0x22>
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <_fflush_r+0x74>)
 8003964:	429c      	cmp	r4, r3
 8003966:	bf08      	it	eq
 8003968:	68ec      	ldreq	r4, [r5, #12]
 800396a:	e7da      	b.n	8003922 <_fflush_r+0x22>
 800396c:	08003f74 	.word	0x08003f74
 8003970:	08003f94 	.word	0x08003f94
 8003974:	08003f54 	.word	0x08003f54

08003978 <std>:
 8003978:	2300      	movs	r3, #0
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	e9c0 3300 	strd	r3, r3, [r0]
 8003982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003986:	6083      	str	r3, [r0, #8]
 8003988:	8181      	strh	r1, [r0, #12]
 800398a:	6643      	str	r3, [r0, #100]	; 0x64
 800398c:	81c2      	strh	r2, [r0, #14]
 800398e:	6183      	str	r3, [r0, #24]
 8003990:	4619      	mov	r1, r3
 8003992:	2208      	movs	r2, #8
 8003994:	305c      	adds	r0, #92	; 0x5c
 8003996:	f7ff f9af 	bl	8002cf8 <memset>
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <std+0x38>)
 800399c:	6263      	str	r3, [r4, #36]	; 0x24
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <std+0x3c>)
 80039a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <std+0x40>)
 80039a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <std+0x44>)
 80039a8:	6224      	str	r4, [r4, #32]
 80039aa:	6323      	str	r3, [r4, #48]	; 0x30
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	08003cd5 	.word	0x08003cd5
 80039b4:	08003cf7 	.word	0x08003cf7
 80039b8:	08003d2f 	.word	0x08003d2f
 80039bc:	08003d53 	.word	0x08003d53

080039c0 <_cleanup_r>:
 80039c0:	4901      	ldr	r1, [pc, #4]	; (80039c8 <_cleanup_r+0x8>)
 80039c2:	f000 b8af 	b.w	8003b24 <_fwalk_reent>
 80039c6:	bf00      	nop
 80039c8:	08003901 	.word	0x08003901

080039cc <__sfmoreglue>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	2268      	movs	r2, #104	; 0x68
 80039d0:	1e4d      	subs	r5, r1, #1
 80039d2:	4355      	muls	r5, r2
 80039d4:	460e      	mov	r6, r1
 80039d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039da:	f7ff fad1 	bl	8002f80 <_malloc_r>
 80039de:	4604      	mov	r4, r0
 80039e0:	b140      	cbz	r0, 80039f4 <__sfmoreglue+0x28>
 80039e2:	2100      	movs	r1, #0
 80039e4:	e9c0 1600 	strd	r1, r6, [r0]
 80039e8:	300c      	adds	r0, #12
 80039ea:	60a0      	str	r0, [r4, #8]
 80039ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039f0:	f7ff f982 	bl	8002cf8 <memset>
 80039f4:	4620      	mov	r0, r4
 80039f6:	bd70      	pop	{r4, r5, r6, pc}

080039f8 <__sfp_lock_acquire>:
 80039f8:	4801      	ldr	r0, [pc, #4]	; (8003a00 <__sfp_lock_acquire+0x8>)
 80039fa:	f000 b8b3 	b.w	8003b64 <__retarget_lock_acquire_recursive>
 80039fe:	bf00      	nop
 8003a00:	20000245 	.word	0x20000245

08003a04 <__sfp_lock_release>:
 8003a04:	4801      	ldr	r0, [pc, #4]	; (8003a0c <__sfp_lock_release+0x8>)
 8003a06:	f000 b8ae 	b.w	8003b66 <__retarget_lock_release_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	20000245 	.word	0x20000245

08003a10 <__sinit_lock_acquire>:
 8003a10:	4801      	ldr	r0, [pc, #4]	; (8003a18 <__sinit_lock_acquire+0x8>)
 8003a12:	f000 b8a7 	b.w	8003b64 <__retarget_lock_acquire_recursive>
 8003a16:	bf00      	nop
 8003a18:	20000246 	.word	0x20000246

08003a1c <__sinit_lock_release>:
 8003a1c:	4801      	ldr	r0, [pc, #4]	; (8003a24 <__sinit_lock_release+0x8>)
 8003a1e:	f000 b8a2 	b.w	8003b66 <__retarget_lock_release_recursive>
 8003a22:	bf00      	nop
 8003a24:	20000246 	.word	0x20000246

08003a28 <__sinit>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	f7ff fff0 	bl	8003a10 <__sinit_lock_acquire>
 8003a30:	69a3      	ldr	r3, [r4, #24]
 8003a32:	b11b      	cbz	r3, 8003a3c <__sinit+0x14>
 8003a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a38:	f7ff bff0 	b.w	8003a1c <__sinit_lock_release>
 8003a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a40:	6523      	str	r3, [r4, #80]	; 0x50
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <__sinit+0x68>)
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <__sinit+0x6c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	bf04      	itt	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	61a3      	streq	r3, [r4, #24]
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 f820 	bl	8003a98 <__sfp>
 8003a58:	6060      	str	r0, [r4, #4]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 f81c 	bl	8003a98 <__sfp>
 8003a60:	60a0      	str	r0, [r4, #8]
 8003a62:	4620      	mov	r0, r4
 8003a64:	f000 f818 	bl	8003a98 <__sfp>
 8003a68:	2200      	movs	r2, #0
 8003a6a:	60e0      	str	r0, [r4, #12]
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	6860      	ldr	r0, [r4, #4]
 8003a70:	f7ff ff82 	bl	8003978 <std>
 8003a74:	68a0      	ldr	r0, [r4, #8]
 8003a76:	2201      	movs	r2, #1
 8003a78:	2109      	movs	r1, #9
 8003a7a:	f7ff ff7d 	bl	8003978 <std>
 8003a7e:	68e0      	ldr	r0, [r4, #12]
 8003a80:	2202      	movs	r2, #2
 8003a82:	2112      	movs	r1, #18
 8003a84:	f7ff ff78 	bl	8003978 <std>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	61a3      	str	r3, [r4, #24]
 8003a8c:	e7d2      	b.n	8003a34 <__sinit+0xc>
 8003a8e:	bf00      	nop
 8003a90:	08003e6c 	.word	0x08003e6c
 8003a94:	080039c1 	.word	0x080039c1

08003a98 <__sfp>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	4607      	mov	r7, r0
 8003a9c:	f7ff ffac 	bl	80039f8 <__sfp_lock_acquire>
 8003aa0:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <__sfp+0x84>)
 8003aa2:	681e      	ldr	r6, [r3, #0]
 8003aa4:	69b3      	ldr	r3, [r6, #24]
 8003aa6:	b913      	cbnz	r3, 8003aae <__sfp+0x16>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f7ff ffbd 	bl	8003a28 <__sinit>
 8003aae:	3648      	adds	r6, #72	; 0x48
 8003ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	d503      	bpl.n	8003ac0 <__sfp+0x28>
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	b30b      	cbz	r3, 8003b00 <__sfp+0x68>
 8003abc:	6836      	ldr	r6, [r6, #0]
 8003abe:	e7f7      	b.n	8003ab0 <__sfp+0x18>
 8003ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ac4:	b9d5      	cbnz	r5, 8003afc <__sfp+0x64>
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <__sfp+0x88>)
 8003ac8:	60e3      	str	r3, [r4, #12]
 8003aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003ace:	6665      	str	r5, [r4, #100]	; 0x64
 8003ad0:	f000 f847 	bl	8003b62 <__retarget_lock_init_recursive>
 8003ad4:	f7ff ff96 	bl	8003a04 <__sfp_lock_release>
 8003ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ae0:	6025      	str	r5, [r4, #0]
 8003ae2:	61a5      	str	r5, [r4, #24]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003aec:	f7ff f904 	bl	8002cf8 <memset>
 8003af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003af8:	4620      	mov	r0, r4
 8003afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afc:	3468      	adds	r4, #104	; 0x68
 8003afe:	e7d9      	b.n	8003ab4 <__sfp+0x1c>
 8003b00:	2104      	movs	r1, #4
 8003b02:	4638      	mov	r0, r7
 8003b04:	f7ff ff62 	bl	80039cc <__sfmoreglue>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	6030      	str	r0, [r6, #0]
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1d5      	bne.n	8003abc <__sfp+0x24>
 8003b10:	f7ff ff78 	bl	8003a04 <__sfp_lock_release>
 8003b14:	230c      	movs	r3, #12
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	e7ee      	b.n	8003af8 <__sfp+0x60>
 8003b1a:	bf00      	nop
 8003b1c:	08003e6c 	.word	0x08003e6c
 8003b20:	ffff0001 	.word	0xffff0001

08003b24 <_fwalk_reent>:
 8003b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b28:	4606      	mov	r6, r0
 8003b2a:	4688      	mov	r8, r1
 8003b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b30:	2700      	movs	r7, #0
 8003b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b36:	f1b9 0901 	subs.w	r9, r9, #1
 8003b3a:	d505      	bpl.n	8003b48 <_fwalk_reent+0x24>
 8003b3c:	6824      	ldr	r4, [r4, #0]
 8003b3e:	2c00      	cmp	r4, #0
 8003b40:	d1f7      	bne.n	8003b32 <_fwalk_reent+0xe>
 8003b42:	4638      	mov	r0, r7
 8003b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b48:	89ab      	ldrh	r3, [r5, #12]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d907      	bls.n	8003b5e <_fwalk_reent+0x3a>
 8003b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b52:	3301      	adds	r3, #1
 8003b54:	d003      	beq.n	8003b5e <_fwalk_reent+0x3a>
 8003b56:	4629      	mov	r1, r5
 8003b58:	4630      	mov	r0, r6
 8003b5a:	47c0      	blx	r8
 8003b5c:	4307      	orrs	r7, r0
 8003b5e:	3568      	adds	r5, #104	; 0x68
 8003b60:	e7e9      	b.n	8003b36 <_fwalk_reent+0x12>

08003b62 <__retarget_lock_init_recursive>:
 8003b62:	4770      	bx	lr

08003b64 <__retarget_lock_acquire_recursive>:
 8003b64:	4770      	bx	lr

08003b66 <__retarget_lock_release_recursive>:
 8003b66:	4770      	bx	lr

08003b68 <__swhatbuf_r>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	460e      	mov	r6, r1
 8003b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b70:	2900      	cmp	r1, #0
 8003b72:	b096      	sub	sp, #88	; 0x58
 8003b74:	4614      	mov	r4, r2
 8003b76:	461d      	mov	r5, r3
 8003b78:	da08      	bge.n	8003b8c <__swhatbuf_r+0x24>
 8003b7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	602a      	str	r2, [r5, #0]
 8003b82:	061a      	lsls	r2, r3, #24
 8003b84:	d410      	bmi.n	8003ba8 <__swhatbuf_r+0x40>
 8003b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b8a:	e00e      	b.n	8003baa <__swhatbuf_r+0x42>
 8003b8c:	466a      	mov	r2, sp
 8003b8e:	f000 f907 	bl	8003da0 <_fstat_r>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	dbf1      	blt.n	8003b7a <__swhatbuf_r+0x12>
 8003b96:	9a01      	ldr	r2, [sp, #4]
 8003b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ba0:	425a      	negs	r2, r3
 8003ba2:	415a      	adcs	r2, r3
 8003ba4:	602a      	str	r2, [r5, #0]
 8003ba6:	e7ee      	b.n	8003b86 <__swhatbuf_r+0x1e>
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	2000      	movs	r0, #0
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	b016      	add	sp, #88	; 0x58
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003bb4 <__smakebuf_r>:
 8003bb4:	898b      	ldrh	r3, [r1, #12]
 8003bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bb8:	079d      	lsls	r5, r3, #30
 8003bba:	4606      	mov	r6, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	d507      	bpl.n	8003bd0 <__smakebuf_r+0x1c>
 8003bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	6163      	str	r3, [r4, #20]
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd70      	pop	{r4, r5, r6, pc}
 8003bd0:	ab01      	add	r3, sp, #4
 8003bd2:	466a      	mov	r2, sp
 8003bd4:	f7ff ffc8 	bl	8003b68 <__swhatbuf_r>
 8003bd8:	9900      	ldr	r1, [sp, #0]
 8003bda:	4605      	mov	r5, r0
 8003bdc:	4630      	mov	r0, r6
 8003bde:	f7ff f9cf 	bl	8002f80 <_malloc_r>
 8003be2:	b948      	cbnz	r0, 8003bf8 <__smakebuf_r+0x44>
 8003be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003be8:	059a      	lsls	r2, r3, #22
 8003bea:	d4ef      	bmi.n	8003bcc <__smakebuf_r+0x18>
 8003bec:	f023 0303 	bic.w	r3, r3, #3
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	e7e3      	b.n	8003bc0 <__smakebuf_r+0xc>
 8003bf8:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <__smakebuf_r+0x7c>)
 8003bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	6020      	str	r0, [r4, #0]
 8003c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	9b00      	ldr	r3, [sp, #0]
 8003c08:	6163      	str	r3, [r4, #20]
 8003c0a:	9b01      	ldr	r3, [sp, #4]
 8003c0c:	6120      	str	r0, [r4, #16]
 8003c0e:	b15b      	cbz	r3, 8003c28 <__smakebuf_r+0x74>
 8003c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c14:	4630      	mov	r0, r6
 8003c16:	f000 f8d5 	bl	8003dc4 <_isatty_r>
 8003c1a:	b128      	cbz	r0, 8003c28 <__smakebuf_r+0x74>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	89a0      	ldrh	r0, [r4, #12]
 8003c2a:	4305      	orrs	r5, r0
 8003c2c:	81a5      	strh	r5, [r4, #12]
 8003c2e:	e7cd      	b.n	8003bcc <__smakebuf_r+0x18>
 8003c30:	080039c1 	.word	0x080039c1

08003c34 <__malloc_lock>:
 8003c34:	4801      	ldr	r0, [pc, #4]	; (8003c3c <__malloc_lock+0x8>)
 8003c36:	f7ff bf95 	b.w	8003b64 <__retarget_lock_acquire_recursive>
 8003c3a:	bf00      	nop
 8003c3c:	20000244 	.word	0x20000244

08003c40 <__malloc_unlock>:
 8003c40:	4801      	ldr	r0, [pc, #4]	; (8003c48 <__malloc_unlock+0x8>)
 8003c42:	f7ff bf90 	b.w	8003b66 <__retarget_lock_release_recursive>
 8003c46:	bf00      	nop
 8003c48:	20000244 	.word	0x20000244

08003c4c <_raise_r>:
 8003c4c:	291f      	cmp	r1, #31
 8003c4e:	b538      	push	{r3, r4, r5, lr}
 8003c50:	4604      	mov	r4, r0
 8003c52:	460d      	mov	r5, r1
 8003c54:	d904      	bls.n	8003c60 <_raise_r+0x14>
 8003c56:	2316      	movs	r3, #22
 8003c58:	6003      	str	r3, [r0, #0]
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c62:	b112      	cbz	r2, 8003c6a <_raise_r+0x1e>
 8003c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c68:	b94b      	cbnz	r3, 8003c7e <_raise_r+0x32>
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 f830 	bl	8003cd0 <_getpid_r>
 8003c70:	462a      	mov	r2, r5
 8003c72:	4601      	mov	r1, r0
 8003c74:	4620      	mov	r0, r4
 8003c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c7a:	f000 b817 	b.w	8003cac <_kill_r>
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d00a      	beq.n	8003c98 <_raise_r+0x4c>
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	d103      	bne.n	8003c8e <_raise_r+0x42>
 8003c86:	2316      	movs	r3, #22
 8003c88:	6003      	str	r3, [r0, #0]
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	e7e7      	b.n	8003c5e <_raise_r+0x12>
 8003c8e:	2400      	movs	r4, #0
 8003c90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c94:	4628      	mov	r0, r5
 8003c96:	4798      	blx	r3
 8003c98:	2000      	movs	r0, #0
 8003c9a:	e7e0      	b.n	8003c5e <_raise_r+0x12>

08003c9c <raise>:
 8003c9c:	4b02      	ldr	r3, [pc, #8]	; (8003ca8 <raise+0xc>)
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	f7ff bfd3 	b.w	8003c4c <_raise_r>
 8003ca6:	bf00      	nop
 8003ca8:	20000018 	.word	0x20000018

08003cac <_kill_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4d07      	ldr	r5, [pc, #28]	; (8003ccc <_kill_r+0x20>)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	f7fd f807 	bl	8000ccc <_kill>
 8003cbe:	1c43      	adds	r3, r0, #1
 8003cc0:	d102      	bne.n	8003cc8 <_kill_r+0x1c>
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	b103      	cbz	r3, 8003cc8 <_kill_r+0x1c>
 8003cc6:	6023      	str	r3, [r4, #0]
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000240 	.word	0x20000240

08003cd0 <_getpid_r>:
 8003cd0:	f7fc bff4 	b.w	8000cbc <_getpid>

08003cd4 <__sread>:
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cdc:	f000 f894 	bl	8003e08 <_read_r>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	bfab      	itete	ge
 8003ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ce8:	181b      	addge	r3, r3, r0
 8003cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cee:	bfac      	ite	ge
 8003cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cf2:	81a3      	strhlt	r3, [r4, #12]
 8003cf4:	bd10      	pop	{r4, pc}

08003cf6 <__swrite>:
 8003cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfa:	461f      	mov	r7, r3
 8003cfc:	898b      	ldrh	r3, [r1, #12]
 8003cfe:	05db      	lsls	r3, r3, #23
 8003d00:	4605      	mov	r5, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	4616      	mov	r6, r2
 8003d06:	d505      	bpl.n	8003d14 <__swrite+0x1e>
 8003d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f000 f868 	bl	8003de4 <_lseek_r>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	4632      	mov	r2, r6
 8003d22:	463b      	mov	r3, r7
 8003d24:	4628      	mov	r0, r5
 8003d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2a:	f000 b817 	b.w	8003d5c <_write_r>

08003d2e <__sseek>:
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	460c      	mov	r4, r1
 8003d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d36:	f000 f855 	bl	8003de4 <_lseek_r>
 8003d3a:	1c43      	adds	r3, r0, #1
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	bf15      	itete	ne
 8003d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d4a:	81a3      	strheq	r3, [r4, #12]
 8003d4c:	bf18      	it	ne
 8003d4e:	81a3      	strhne	r3, [r4, #12]
 8003d50:	bd10      	pop	{r4, pc}

08003d52 <__sclose>:
 8003d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d56:	f000 b813 	b.w	8003d80 <_close_r>
	...

08003d5c <_write_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d07      	ldr	r5, [pc, #28]	; (8003d7c <_write_r+0x20>)
 8003d60:	4604      	mov	r4, r0
 8003d62:	4608      	mov	r0, r1
 8003d64:	4611      	mov	r1, r2
 8003d66:	2200      	movs	r2, #0
 8003d68:	602a      	str	r2, [r5, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f7fc ffe5 	bl	8000d3a <_write>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_write_r+0x1e>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_write_r+0x1e>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20000240 	.word	0x20000240

08003d80 <_close_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4d06      	ldr	r5, [pc, #24]	; (8003d9c <_close_r+0x1c>)
 8003d84:	2300      	movs	r3, #0
 8003d86:	4604      	mov	r4, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	602b      	str	r3, [r5, #0]
 8003d8c:	f7fc fff1 	bl	8000d72 <_close>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <_close_r+0x1a>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <_close_r+0x1a>
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	20000240 	.word	0x20000240

08003da0 <_fstat_r>:
 8003da0:	b538      	push	{r3, r4, r5, lr}
 8003da2:	4d07      	ldr	r5, [pc, #28]	; (8003dc0 <_fstat_r+0x20>)
 8003da4:	2300      	movs	r3, #0
 8003da6:	4604      	mov	r4, r0
 8003da8:	4608      	mov	r0, r1
 8003daa:	4611      	mov	r1, r2
 8003dac:	602b      	str	r3, [r5, #0]
 8003dae:	f7fc ffec 	bl	8000d8a <_fstat>
 8003db2:	1c43      	adds	r3, r0, #1
 8003db4:	d102      	bne.n	8003dbc <_fstat_r+0x1c>
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	b103      	cbz	r3, 8003dbc <_fstat_r+0x1c>
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000240 	.word	0x20000240

08003dc4 <_isatty_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4d06      	ldr	r5, [pc, #24]	; (8003de0 <_isatty_r+0x1c>)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4604      	mov	r4, r0
 8003dcc:	4608      	mov	r0, r1
 8003dce:	602b      	str	r3, [r5, #0]
 8003dd0:	f7fc ffeb 	bl	8000daa <_isatty>
 8003dd4:	1c43      	adds	r3, r0, #1
 8003dd6:	d102      	bne.n	8003dde <_isatty_r+0x1a>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	b103      	cbz	r3, 8003dde <_isatty_r+0x1a>
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	bd38      	pop	{r3, r4, r5, pc}
 8003de0:	20000240 	.word	0x20000240

08003de4 <_lseek_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4d07      	ldr	r5, [pc, #28]	; (8003e04 <_lseek_r+0x20>)
 8003de8:	4604      	mov	r4, r0
 8003dea:	4608      	mov	r0, r1
 8003dec:	4611      	mov	r1, r2
 8003dee:	2200      	movs	r2, #0
 8003df0:	602a      	str	r2, [r5, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f7fc ffe4 	bl	8000dc0 <_lseek>
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d102      	bne.n	8003e02 <_lseek_r+0x1e>
 8003dfc:	682b      	ldr	r3, [r5, #0]
 8003dfe:	b103      	cbz	r3, 8003e02 <_lseek_r+0x1e>
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	bd38      	pop	{r3, r4, r5, pc}
 8003e04:	20000240 	.word	0x20000240

08003e08 <_read_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d07      	ldr	r5, [pc, #28]	; (8003e28 <_read_r+0x20>)
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	4608      	mov	r0, r1
 8003e10:	4611      	mov	r1, r2
 8003e12:	2200      	movs	r2, #0
 8003e14:	602a      	str	r2, [r5, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f7fc ff72 	bl	8000d00 <_read>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d102      	bne.n	8003e26 <_read_r+0x1e>
 8003e20:	682b      	ldr	r3, [r5, #0]
 8003e22:	b103      	cbz	r3, 8003e26 <_read_r+0x1e>
 8003e24:	6023      	str	r3, [r4, #0]
 8003e26:	bd38      	pop	{r3, r4, r5, pc}
 8003e28:	20000240 	.word	0x20000240

08003e2c <_gettimeofday>:
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <_gettimeofday+0xc>)
 8003e2e:	2258      	movs	r2, #88	; 0x58
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e36:	4770      	bx	lr
 8003e38:	20000240 	.word	0x20000240

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
