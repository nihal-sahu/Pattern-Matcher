
stm32_led_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004120  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004428  08004428  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000078  080044a8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080044a8  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abe7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a8  00000000  00000000  0002ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  0002c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001682c  00000000  00000000  0002d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd38  00000000  00000000  00043f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000888f1  00000000  00000000  0004fc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d852d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  000d8580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000db714  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000db738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080042a8 	.word	0x080042a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080042a8 	.word	0x080042a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
uint8_t ArduinoDataBuffer[50] = {};				//received data buffer
uint8_t STM32DataBuffer[50] = {};
uint16_t led_arr[3] = {GPIO_PIN_8, GPIO_PIN_6, GPIO_PIN_5};

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8

	//initialize i2c, gpio, and uart peripherals
	HAL_Init();
 800058a:	f000 fb9d 	bl	8000cc8 <HAL_Init>
	SystemClock_Config();
 800058e:	f000 f869 	bl	8000664 <SystemClock_Config>
	MX_GPIO_Init();
 8000592:	f000 f92b 	bl	80007ec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000596:	f000 f8ff 	bl	8000798 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800059a:	f000 f8cf 	bl	800073c <MX_I2C1_Init>
	srand(time(0));
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fe54 	bl	800324c <time>
 80005a4:	4602      	mov	r2, r0
 80005a6:	460b      	mov	r3, r1
 80005a8:	4613      	mov	r3, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fde2 	bl	8003174 <srand>


	//points to position of received data in the i2c buffer
	uint8_t *receivedData = (uint8_t*)&ArduinoDataBuffer[22];
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <main+0x74>)
 80005b2:	607b      	str	r3, [r7, #4]

	//points to first element of buffer
	uint8_t *sentData = (uint8_t*)&STM32DataBuffer[0];
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <main+0x78>)
 80005b6:	603b      	str	r3, [r7, #0]

	while (1)
	{
		led_pattern();
 80005b8:	f000 f826 	bl	8000608 <led_pattern>

		//wait until some i2c data is received by the arduino
		while(HAL_I2C_Master_Receive(&hi2c1, ARDUINO_ADDRESS , ArduinoDataBuffer, 50, 100) != HAL_OK );
 80005bc:	bf00      	nop
 80005be:	2364      	movs	r3, #100	; 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2332      	movs	r3, #50	; 0x32
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <main+0x7c>)
 80005c6:	2166      	movs	r1, #102	; 0x66
 80005c8:	480e      	ldr	r0, [pc, #56]	; (8000604 <main+0x80>)
 80005ca:	f001 f8f3 	bl	80017b4 <HAL_I2C_Master_Receive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1f4      	bne.n	80005be <main+0x3a>

		//wait for i2c data to be sent
		while(HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_ADDRESS, STM32DataBuffer, 1, 100) != HAL_OK);
 80005d4:	bf00      	nop
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2301      	movs	r3, #1
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <main+0x78>)
 80005de:	2166      	movs	r1, #102	; 0x66
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <main+0x80>)
 80005e2:	f000 ffe9 	bl	80015b8 <HAL_I2C_Master_Transmit>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f4      	bne.n	80005d6 <main+0x52>

		HAL_Delay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f000 fbdc 	bl	8000dac <HAL_Delay>
		led_pattern();
 80005f4:	e7e0      	b.n	80005b8 <main+0x34>
 80005f6:	bf00      	nop
 80005f8:	20000142 	.word	0x20000142
 80005fc:	20000160 	.word	0x20000160
 8000600:	2000012c 	.word	0x2000012c
 8000604:	20000094 	.word	0x20000094

08000608 <led_pattern>:
	}

}

void led_pattern()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	uint8_t led = (rand() % (2 - 0 + 1)) + 0;
 800060e:	f002 fddf 	bl	80031d0 <rand>
 8000612:	4602      	mov	r2, r0
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <led_pattern+0x50>)
 8000616:	fb83 3102 	smull	r3, r1, r3, r2
 800061a:	17d3      	asrs	r3, r2, #31
 800061c:	1ac9      	subs	r1, r1, r3
 800061e:	460b      	mov	r3, r1
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	440b      	add	r3, r1
 8000624:	1ad1      	subs	r1, r2, r3
 8000626:	460b      	mov	r3, r1
 8000628:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(GPIOC, led_arr[led]);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4a0b      	ldr	r2, [pc, #44]	; (800065c <led_pattern+0x54>)
 800062e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000632:	4619      	mov	r1, r3
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <led_pattern+0x58>)
 8000636:	f000 fe60 	bl	80012fa <HAL_GPIO_TogglePin>
	HAL_Delay(150);
 800063a:	2096      	movs	r0, #150	; 0x96
 800063c:	f000 fbb6 	bl	8000dac <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, led_arr[led]);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	4a06      	ldr	r2, [pc, #24]	; (800065c <led_pattern+0x54>)
 8000644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000648:	4619      	mov	r1, r3
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <led_pattern+0x58>)
 800064c:	f000 fe55 	bl	80012fa <HAL_GPIO_TogglePin>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	55555556 	.word	0x55555556
 800065c:	20000000 	.word	0x20000000
 8000660:	40020800 	.word	0x40020800

08000664 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fd76 	bl	8003164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SystemClock_Config+0xd0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <SystemClock_Config+0xd0>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SystemClock_Config+0xd0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b23      	ldr	r3, [pc, #140]	; (8000738 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xd4>)
 80006b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xd4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d8:	2310      	movs	r3, #16
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fdb4 	bl	800225c <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fa:	f000 f8fb 	bl	80008f4 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f002 f816 	bl	800274c <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000726:	f000 f8e5 	bl	80008f4 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x50>)
 800077a:	f000 fdd9 	bl	8001330 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 f8b6 	bl	80008f4 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000094 	.word	0x20000094
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f002 f9dc 	bl	8002b8c <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f88b 	bl	80008f4 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000e8 	.word	0x200000e8
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <MX_GPIO_Init+0xfc>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_GPIO_Init+0xfc>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_GPIO_Init+0xfc>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xfc>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	481d      	ldr	r0, [pc, #116]	; (80008ec <MX_GPIO_Init+0x100>)
 8000878:	f000 fd26 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000882:	481b      	ldr	r0, [pc, #108]	; (80008f0 <MX_GPIO_Init+0x104>)
 8000884:	f000 fd20 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x104>)
 80008a0:	f000 fb8e 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_GPIO_Init+0x100>)
 80008bc:	f000 fb80 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80008c0:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_GPIO_Init+0x104>)
 80008da:	f000 fb71 	bl	8000fc0 <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020800 	.word	0x40020800

080008f4 <Error_Handler>:

void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop

  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fb0a 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_I2C_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_I2C_MspInit+0x88>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_I2C_MspInit+0x88>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_I2C_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800098e:	23c0      	movs	r3, #192	; 0xc0
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000992:	2312      	movs	r3, #18
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800099e:	2304      	movs	r3, #4
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <HAL_I2C_MspInit+0x8c>)
 80009aa:	f000 fb09 	bl	8000fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_I2C_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_I2C_MspInit+0x88>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_I2C_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a56:	f000 fab3 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f956 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	return 1;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <_kill>:

int _kill(int pid, int sig)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ade:	f002 fb17 	bl	8003110 <__errno>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2216      	movs	r2, #22
 8000ae6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_exit>:

void _exit (int status)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ffe7 	bl	8000ad4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b06:	e7fe      	b.n	8000b06 <_exit+0x12>

08000b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	e00a      	b.n	8000b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b1a:	f3af 8000 	nop.w
 8000b1e:	4601      	mov	r1, r0
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	b2ca      	uxtb	r2, r1
 8000b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf0      	blt.n	8000b1a <_read+0x12>
	}

return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	e009      	b.n	8000b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbf1      	blt.n	8000b54 <_write+0x12>
	}
	return len;
 8000b70:	687b      	ldr	r3, [r7, #4]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <_close>:

int _close(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_isatty>:

int _isatty(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f002 fa7c 	bl	8003110 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20018000 	.word	0x20018000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	20000194 	.word	0x20000194
 8000c4c:	200001b0 	.word	0x200001b0

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9e:	f7ff ffd7 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f002 fa3b 	bl	800311c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fc6d 	bl	8000584 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cb8:	08004430 	.word	0x08004430
  ldr r2, =_sbss
 8000cbc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cc0:	200001ac 	.word	0x200001ac

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f931 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe00 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f93b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d48:	f000 f911 	bl	8000f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000010 	.word	0x20000010
 8000d68:	2000000c 	.word	0x2000000c

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	20000198 	.word	0x20000198

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000198 	.word	0x20000198

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000010 	.word	0x20000010

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f24:	d301      	bcc.n	8000f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00f      	b.n	8000f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <SysTick_Config+0x40>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f32:	210f      	movs	r1, #15
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f38:	f7ff ff8e 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <SysTick_Config+0x40>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SysTick_Config+0x40>)
 8000f44:	2207      	movs	r2, #7
 8000f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff47 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b086      	sub	sp, #24
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff5c 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff8e 	bl	8000eac <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffb0 	bl	8000f14 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
 8000fda:	e159      	b.n	8001290 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f040 8148 	bne.w	800128a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b01      	cmp	r3, #1
 8001004:	d005      	beq.n	8001012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	2b02      	cmp	r3, #2
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b03      	cmp	r3, #3
 800107e:	d017      	beq.n	80010b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d123      	bne.n	8001104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	08da      	lsrs	r2, r3, #3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3208      	adds	r2, #8
 80010c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	220f      	movs	r2, #15
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	69b9      	ldr	r1, [r7, #24]
 8001100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0203 	and.w	r2, r3, #3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 80a2 	beq.w	800128a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a56      	ldr	r2, [pc, #344]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	6453      	str	r3, [r2, #68]	; 0x44
 8001156:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <HAL_GPIO_Init+0x2e8>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a49      	ldr	r2, [pc, #292]	; (80012b0 <HAL_GPIO_Init+0x2f0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d019      	beq.n	80011c2 <HAL_GPIO_Init+0x202>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a48      	ldr	r2, [pc, #288]	; (80012b4 <HAL_GPIO_Init+0x2f4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x1fe>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a47      	ldr	r2, [pc, #284]	; (80012b8 <HAL_GPIO_Init+0x2f8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x1fa>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_GPIO_Init+0x2fc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x1f6>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_GPIO_Init+0x300>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x1f2>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e008      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011b2:	2307      	movs	r3, #7
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e004      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <HAL_GPIO_Init+0x204>
 80011c2:	2300      	movs	r3, #0
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	f002 0203 	and.w	r2, r2, #3
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	4093      	lsls	r3, r2
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_GPIO_Init+0x2ec>)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x304>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120c:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_GPIO_Init+0x304>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001230:	4a24      	ldr	r2, [pc, #144]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <HAL_GPIO_Init+0x304>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3301      	adds	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	2b0f      	cmp	r3, #15
 8001294:	f67f aea2 	bls.w	8000fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b085      	sub	sp, #20
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
 8001302:	460b      	mov	r3, r1
 8001304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130c:	887a      	ldrh	r2, [r7, #2]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	041a      	lsls	r2, r3, #16
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43d9      	mvns	r1, r3
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	400b      	ands	r3, r1
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e12b      	b.n	800159a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fafa 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	; 0x24
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001394:	f001 fbd2 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8001398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a81      	ldr	r2, [pc, #516]	; (80015a4 <HAL_I2C_Init+0x274>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d807      	bhi.n	80013b4 <HAL_I2C_Init+0x84>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a80      	ldr	r2, [pc, #512]	; (80015a8 <HAL_I2C_Init+0x278>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e006      	b.n	80013c2 <HAL_I2C_Init+0x92>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a7d      	ldr	r2, [pc, #500]	; (80015ac <HAL_I2C_Init+0x27c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0e7      	b.n	800159a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a78      	ldr	r2, [pc, #480]	; (80015b0 <HAL_I2C_Init+0x280>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a6a      	ldr	r2, [pc, #424]	; (80015a4 <HAL_I2C_Init+0x274>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d802      	bhi.n	8001404 <HAL_I2C_Init+0xd4>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	e009      	b.n	8001418 <HAL_I2C_Init+0xe8>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a69      	ldr	r2, [pc, #420]	; (80015b4 <HAL_I2C_Init+0x284>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800142a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	495c      	ldr	r1, [pc, #368]	; (80015a4 <HAL_I2C_Init+0x274>)
 8001434:	428b      	cmp	r3, r1
 8001436:	d819      	bhi.n	800146c <HAL_I2C_Init+0x13c>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e59      	subs	r1, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fbb1 f3f3 	udiv	r3, r1, r3
 8001446:	1c59      	adds	r1, r3, #1
 8001448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800144c:	400b      	ands	r3, r1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <HAL_I2C_Init+0x138>
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1e59      	subs	r1, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001460:	3301      	adds	r3, #1
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	e051      	b.n	800150c <HAL_I2C_Init+0x1dc>
 8001468:	2304      	movs	r3, #4
 800146a:	e04f      	b.n	800150c <HAL_I2C_Init+0x1dc>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d111      	bne.n	8001498 <HAL_I2C_Init+0x168>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e58      	subs	r0, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	440b      	add	r3, r1
 8001482:	fbb0 f3f3 	udiv	r3, r0, r3
 8001486:	3301      	adds	r3, #1
 8001488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e012      	b.n	80014be <HAL_I2C_Init+0x18e>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e58      	subs	r0, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	0099      	lsls	r1, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Init+0x196>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e022      	b.n	800150c <HAL_I2C_Init+0x1dc>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10e      	bne.n	80014ec <HAL_I2C_Init+0x1bc>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e58      	subs	r0, r3, #1
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6859      	ldr	r1, [r3, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	440b      	add	r3, r1
 80014dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ea:	e00f      	b.n	800150c <HAL_I2C_Init+0x1dc>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	0099      	lsls	r1, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	4313      	orrs	r3, r2
 8001512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69da      	ldr	r2, [r3, #28]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800153a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6911      	ldr	r1, [r2, #16]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68d2      	ldr	r2, [r2, #12]
 8001546:	4311      	orrs	r1, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	430b      	orrs	r3, r1
 800154e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2220      	movs	r2, #32
 8001586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	000186a0 	.word	0x000186a0
 80015a8:	001e847f 	.word	0x001e847f
 80015ac:	003d08ff 	.word	0x003d08ff
 80015b0:	431bde83 	.word	0x431bde83
 80015b4:	10624dd3 	.word	0x10624dd3

080015b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	461a      	mov	r2, r3
 80015c4:	460b      	mov	r3, r1
 80015c6:	817b      	strh	r3, [r7, #10]
 80015c8:	4613      	mov	r3, r2
 80015ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff fbe2 	bl	8000d94 <HAL_GetTick>
 80015d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b20      	cmp	r3, #32
 80015dc:	f040 80e0 	bne.w	80017a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2319      	movs	r3, #25
 80015e6:	2201      	movs	r2, #1
 80015e8:	4970      	ldr	r1, [pc, #448]	; (80017ac <HAL_I2C_Master_Transmit+0x1f4>)
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fc58 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015f6:	2302      	movs	r3, #2
 80015f8:	e0d3      	b.n	80017a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_I2C_Master_Transmit+0x50>
 8001604:	2302      	movs	r3, #2
 8001606:	e0cc      	b.n	80017a2 <HAL_I2C_Master_Transmit+0x1ea>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d007      	beq.n	800162e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0201 	orr.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2221      	movs	r2, #33	; 0x21
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2210      	movs	r2, #16
 800164a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	893a      	ldrh	r2, [r7, #8]
 800165e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4a50      	ldr	r2, [pc, #320]	; (80017b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	6a3a      	ldr	r2, [r7, #32]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fac2 	bl	8001c00 <I2C_MasterRequestWrite>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e08d      	b.n	80017a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800169c:	e066      	b.n	800176c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fcd2 	bl	800204c <I2C_WaitOnTXEFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00d      	beq.n	80016ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d107      	bne.n	80016c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e06b      	b.n	80017a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3b01      	subs	r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b04      	cmp	r3, #4
 8001706:	d11b      	bne.n	8001740 <HAL_I2C_Master_Transmit+0x188>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	d017      	beq.n	8001740 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	6a39      	ldr	r1, [r7, #32]
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 fcc2 	bl	80020ce <I2C_WaitOnBTFFlagUntilTimeout>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	2b04      	cmp	r3, #4
 8001756:	d107      	bne.n	8001768 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001766:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e01a      	b.n	80017a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001770:	2b00      	cmp	r3, #0
 8001772:	d194      	bne.n	800169e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2220      	movs	r2, #32
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	e000      	b.n	80017a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017a0:	2302      	movs	r3, #2
  }
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	00100002 	.word	0x00100002
 80017b0:	ffff0000 	.word	0xffff0000

080017b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	461a      	mov	r2, r3
 80017c0:	460b      	mov	r3, r1
 80017c2:	817b      	strh	r3, [r7, #10]
 80017c4:	4613      	mov	r3, r2
 80017c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff fae4 	bl	8000d94 <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	f040 820b 	bne.w	8001bf2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2319      	movs	r3, #25
 80017e2:	2201      	movs	r2, #1
 80017e4:	497c      	ldr	r1, [pc, #496]	; (80019d8 <HAL_I2C_Master_Receive+0x224>)
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f000 fb5a 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017f2:	2302      	movs	r3, #2
 80017f4:	e1fe      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_I2C_Master_Receive+0x50>
 8001800:	2302      	movs	r3, #2
 8001802:	e1f7      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	d007      	beq.n	800182a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001838:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2222      	movs	r2, #34	; 0x22
 800183e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2210      	movs	r2, #16
 8001846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	893a      	ldrh	r2, [r7, #8]
 800185a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4a5c      	ldr	r2, [pc, #368]	; (80019dc <HAL_I2C_Master_Receive+0x228>)
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800186c:	8979      	ldrh	r1, [r7, #10]
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fa46 	bl	8001d04 <I2C_MasterRequestRead>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e1b8      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001886:	2b00      	cmp	r3, #0
 8001888:	d113      	bne.n	80018b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	623b      	str	r3, [r7, #32]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e18c      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d11b      	bne.n	80018f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e16c      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d11b      	bne.n	8001932 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	e14c      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001958:	e138      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	2b03      	cmp	r3, #3
 8001960:	f200 80f1 	bhi.w	8001b46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001968:	2b01      	cmp	r3, #1
 800196a:	d123      	bne.n	80019b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fbed 	bl	8002150 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e139      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691a      	ldr	r2, [r3, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	3b01      	subs	r3, #1
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019b2:	e10b      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d14e      	bne.n	8001a5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c2:	2200      	movs	r2, #0
 80019c4:	4906      	ldr	r1, [pc, #24]	; (80019e0 <HAL_I2C_Master_Receive+0x22c>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fa6a 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e10e      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
 80019d6:	bf00      	nop
 80019d8:	00100002 	.word	0x00100002
 80019dc:	ffff0000 	.word	0xffff0000
 80019e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a58:	e0b8      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2200      	movs	r2, #0
 8001a62:	4966      	ldr	r1, [pc, #408]	; (8001bfc <HAL_I2C_Master_Receive+0x448>)
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fa1b 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0bf      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	2200      	movs	r2, #0
 8001abe:	494f      	ldr	r1, [pc, #316]	; (8001bfc <HAL_I2C_Master_Receive+0x448>)
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f9ed 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e091      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afc:	3b01      	subs	r3, #1
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b44:	e042      	b.n	8001bcc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fb00 	bl	8002150 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e04c      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d118      	bne.n	8001bcc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f aec2 	bne.w	800195a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001bf2:	2302      	movs	r3, #2
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3728      	adds	r7, #40	; 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	00010004 	.word	0x00010004

08001c00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d006      	beq.n	8001c2a <I2C_MasterRequestWrite+0x2a>
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d003      	beq.n	8001c2a <I2C_MasterRequestWrite+0x2a>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c28:	d108      	bne.n	8001c3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e00b      	b.n	8001c54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	2b12      	cmp	r3, #18
 8001c42:	d107      	bne.n	8001c54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f91d 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7a:	d103      	bne.n	8001c84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e035      	b.n	8001cf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c90:	d108      	bne.n	8001ca4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c92:	897b      	ldrh	r3, [r7, #10]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	e01b      	b.n	8001cdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	11db      	asrs	r3, r3, #7
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f003 0306 	and.w	r3, r3, #6
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f063 030f 	orn	r3, r3, #15
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	490e      	ldr	r1, [pc, #56]	; (8001cfc <I2C_MasterRequestWrite+0xfc>)
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f943 	bl	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e010      	b.n	8001cf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <I2C_MasterRequestWrite+0x100>)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f933 	bl	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	00010008 	.word	0x00010008
 8001d00:	00010002 	.word	0x00010002

08001d04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	460b      	mov	r3, r1
 8001d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d006      	beq.n	8001d3e <I2C_MasterRequestRead+0x3a>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <I2C_MasterRequestRead+0x3a>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d3c:	d108      	bne.n	8001d50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e00b      	b.n	8001d68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	2b11      	cmp	r3, #17
 8001d56:	d107      	bne.n	8001d68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f893 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00d      	beq.n	8001d9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8e:	d103      	bne.n	8001d98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e079      	b.n	8001e90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da4:	d108      	bne.n	8001db8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001da6:	897b      	ldrh	r3, [r7, #10]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	e05f      	b.n	8001e78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001db8:	897b      	ldrh	r3, [r7, #10]
 8001dba:	11db      	asrs	r3, r3, #7
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 0306 	and.w	r3, r3, #6
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f063 030f 	orn	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4930      	ldr	r1, [pc, #192]	; (8001e98 <I2C_MasterRequestRead+0x194>)
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f8b9 	bl	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e054      	b.n	8001e90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4929      	ldr	r1, [pc, #164]	; (8001e9c <I2C_MasterRequestRead+0x198>)
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 f8a9 	bl	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e044      	b.n	8001e90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f831 	bl	8001ea0 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e52:	d103      	bne.n	8001e5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e017      	b.n	8001e90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e60:	897b      	ldrh	r3, [r7, #10]
 8001e62:	11db      	asrs	r3, r3, #7
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 0306 	and.w	r3, r3, #6
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f063 030e 	orn	r3, r3, #14
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4907      	ldr	r1, [pc, #28]	; (8001e9c <I2C_MasterRequestRead+0x198>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f865 	bl	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	00010008 	.word	0x00010008
 8001e9c:	00010002 	.word	0x00010002

08001ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb0:	e025      	b.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb8:	d021      	beq.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7fe ff6b 	bl	8000d94 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0220 	orr.w	r2, r3, #32
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e023      	b.n	8001f46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d10d      	bne.n	8001f24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4013      	ands	r3, r2
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	e00c      	b.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d0b6      	beq.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f5c:	e051      	b.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6c:	d123      	bne.n	8001fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f043 0204 	orr.w	r2, r3, #4
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e046      	b.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fbc:	d021      	beq.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7fe fee9 	bl	8000d94 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d302      	bcc.n	8001fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d116      	bne.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e020      	b.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	d10c      	bne.n	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	43da      	mvns	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4013      	ands	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	e00b      	b.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	43da      	mvns	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	4013      	ands	r3, r2
 8002032:	b29b      	uxth	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d18d      	bne.n	8001f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002058:	e02d      	b.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f8ce 	bl	80021fc <I2C_IsAcknowledgeFailed>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e02d      	b.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d021      	beq.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7fe fe8f 	bl	8000d94 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d116      	bne.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e007      	b.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c0:	2b80      	cmp	r3, #128	; 0x80
 80020c2:	d1ca      	bne.n	800205a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020da:	e02d      	b.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f88d 	bl	80021fc <I2C_IsAcknowledgeFailed>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e02d      	b.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f2:	d021      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f4:	f7fe fe4e 	bl	8000d94 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	d302      	bcc.n	800210a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d116      	bne.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2220      	movs	r2, #32
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f043 0220 	orr.w	r2, r3, #32
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e007      	b.n	8002148 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d1ca      	bne.n	80020dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800215c:	e042      	b.n	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b10      	cmp	r3, #16
 800216a:	d119      	bne.n	80021a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0210 	mvn.w	r2, #16
 8002174:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e029      	b.n	80021f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a0:	f7fe fdf8 	bl	8000d94 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d302      	bcc.n	80021b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0220 	orr.w	r2, r3, #32
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e007      	b.n	80021f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d1b5      	bne.n	800215e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002212:	d11b      	bne.n	800224c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800221c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0204 	orr.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e267      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d075      	beq.n	8002366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	4b88      	ldr	r3, [pc, #544]	; (800249c <HAL_RCC_OscConfig+0x240>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b04      	cmp	r3, #4
 8002284:	d00c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002286:	4b85      	ldr	r3, [pc, #532]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800228e:	2b08      	cmp	r3, #8
 8002290:	d112      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4b82      	ldr	r3, [pc, #520]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229e:	d10b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	4b7e      	ldr	r3, [pc, #504]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <HAL_RCC_OscConfig+0x108>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d157      	bne.n	8002364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e242      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x74>
 80022c2:	4b76      	ldr	r3, [pc, #472]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a75      	ldr	r2, [pc, #468]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x98>
 80022da:	4b70      	ldr	r3, [pc, #448]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6f      	ldr	r2, [pc, #444]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b6d      	ldr	r3, [pc, #436]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6c      	ldr	r2, [pc, #432]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022f4:	4b69      	ldr	r3, [pc, #420]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a68      	ldr	r2, [pc, #416]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b66      	ldr	r3, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe fd3e 	bl	8000d94 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe fd3a 	bl	8000d94 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e207      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b5b      	ldr	r3, [pc, #364]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xc0>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe fd2a 	bl	8000d94 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe fd26 	bl	8000d94 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1f3      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0xe8>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d063      	beq.n	800243a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237e:	4b47      	ldr	r3, [pc, #284]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002386:	2b08      	cmp	r3, #8
 8002388:	d11c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b44      	ldr	r3, [pc, #272]	; (800249c <HAL_RCC_OscConfig+0x240>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d116      	bne.n	80023c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x152>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e1c7      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4937      	ldr	r1, [pc, #220]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	e03a      	b.n	800243a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023cc:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_OscConfig+0x244>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fe fcdf 	bl	8000d94 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe fcdb 	bl	8000d94 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e1a8      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4925      	ldr	r1, [pc, #148]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e015      	b.n	800243a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_RCC_OscConfig+0x244>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fcbe 	bl	8000d94 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe fcba 	bl	8000d94 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e187      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	4b1b      	ldr	r3, [pc, #108]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d036      	beq.n	80024b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x248>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe fc9e 	bl	8000d94 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe fc9a 	bl	8000d94 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e167      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x240>)
 8002470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x200>
 800247a:	e01b      	b.n	80024b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x248>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7fe fc87 	bl	8000d94 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002488:	e00e      	b.n	80024a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248a:	f7fe fc83 	bl	8000d94 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d907      	bls.n	80024a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e150      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
 800249c:	40023800 	.word	0x40023800
 80024a0:	42470000 	.word	0x42470000
 80024a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a8:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ea      	bne.n	800248a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8097 	beq.w	80025f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c6:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10f      	bne.n	80024f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	4b7d      	ldr	r3, [pc, #500]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a7c      	ldr	r2, [pc, #496]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b7a      	ldr	r3, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b77      	ldr	r3, [pc, #476]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024fe:	4b74      	ldr	r3, [pc, #464]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a73      	ldr	r2, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7fe fc43 	bl	8000d94 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe fc3f 	bl	8000d94 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e10c      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x474>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x2ea>
 8002538:	4b64      	ldr	r3, [pc, #400]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	4a63      	ldr	r2, [pc, #396]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6713      	str	r3, [r2, #112]	; 0x70
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x324>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x30c>
 800254e:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a5e      	ldr	r2, [pc, #376]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	4b5c      	ldr	r3, [pc, #368]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255e:	4a5b      	ldr	r2, [pc, #364]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6713      	str	r3, [r2, #112]	; 0x70
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x324>
 8002568:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a57      	ldr	r2, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
 8002574:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 0304 	bic.w	r3, r3, #4
 800257e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fc04 	bl	8000d94 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fc00 	bl	8000d94 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0cb      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0ee      	beq.n	8002590 <HAL_RCC_OscConfig+0x334>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7fe fbee 	bl	8000d94 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe fbea 	bl	8000d94 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0b5      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ee      	bne.n	80025bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a38      	ldr	r2, [pc, #224]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a1 	beq.w	800273c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025fa:	4b34      	ldr	r3, [pc, #208]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b08      	cmp	r3, #8
 8002604:	d05c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d141      	bne.n	8002692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_OscConfig+0x478>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fbbe 	bl	8000d94 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fbba 	bl	8000d94 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e087      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	019b      	lsls	r3, r3, #6
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	3b01      	subs	r3, #1
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	491b      	ldr	r1, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x478>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe fb93 	bl	8000d94 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fb8f 	bl	8000d94 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e05c      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x416>
 8002690:	e054      	b.n	800273c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_OscConfig+0x478>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fb7c 	bl	8000d94 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe fb78 	bl	8000d94 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e045      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_RCC_OscConfig+0x470>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x444>
 80026be:	e03d      	b.n	800273c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e038      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_RCC_OscConfig+0x4ec>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d028      	beq.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d121      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fe:	429a      	cmp	r2, r3
 8002700:	d11a      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002708:	4013      	ands	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800270e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002710:	4293      	cmp	r3, r2
 8002712:	d111      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800

0800274c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0cc      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b68      	ldr	r3, [pc, #416]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d90c      	bls.n	8002788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d001      	beq.n	8002788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e0b8      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a58      	ldr	r2, [pc, #352]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027b8:	4b53      	ldr	r3, [pc, #332]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b50      	ldr	r3, [pc, #320]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	494d      	ldr	r1, [pc, #308]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d044      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b47      	ldr	r3, [pc, #284]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e07f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d003      	beq.n	800280a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002806:	2b03      	cmp	r3, #3
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b3f      	ldr	r3, [pc, #252]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e06f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e067      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4934      	ldr	r1, [pc, #208]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7fe faaa 	bl	8000d94 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7fe faa6 	bl	8000d94 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e04f      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d20c      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b22      	ldr	r3, [pc, #136]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b20      	ldr	r3, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e032      	b.n	80028fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a0:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4916      	ldr	r1, [pc, #88]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	490e      	ldr	r1, [pc, #56]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d2:	f000 f821 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028d6:	4602      	mov	r2, r0
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	490a      	ldr	r1, [pc, #40]	; (800290c <HAL_RCC_ClockConfig+0x1c0>)
 80028e4:	5ccb      	ldrb	r3, [r1, r3]
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fa0a 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023c00 	.word	0x40023c00
 8002908:	40023800 	.word	0x40023800
 800290c:	080042c0 	.word	0x080042c0
 8002910:	20000008 	.word	0x20000008
 8002914:	2000000c 	.word	0x2000000c

08002918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800291c:	b094      	sub	sp, #80	; 0x50
 800291e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	647b      	str	r3, [r7, #68]	; 0x44
 8002924:	2300      	movs	r3, #0
 8002926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002928:	2300      	movs	r3, #0
 800292a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d00d      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x40>
 800293c:	2b08      	cmp	r3, #8
 800293e:	f200 80e1 	bhi.w	8002b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x34>
 8002946:	2b04      	cmp	r3, #4
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x3a>
 800294a:	e0db      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800294e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002950:	e0db      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002952:	4b73      	ldr	r3, [pc, #460]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002956:	e0d8      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002958:	4b6f      	ldr	r3, [pc, #444]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002962:	4b6d      	ldr	r3, [pc, #436]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d063      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296e:	4b6a      	ldr	r3, [pc, #424]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	099b      	lsrs	r3, r3, #6
 8002974:	2200      	movs	r2, #0
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
 8002978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
 8002982:	2300      	movs	r3, #0
 8002984:	637b      	str	r3, [r7, #52]	; 0x34
 8002986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800298a:	4622      	mov	r2, r4
 800298c:	462b      	mov	r3, r5
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299c:	0150      	lsls	r0, r2, #5
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4621      	mov	r1, r4
 80029a4:	1a51      	subs	r1, r2, r1
 80029a6:	6139      	str	r1, [r7, #16]
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029bc:	4659      	mov	r1, fp
 80029be:	018b      	lsls	r3, r1, #6
 80029c0:	4651      	mov	r1, sl
 80029c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c6:	4651      	mov	r1, sl
 80029c8:	018a      	lsls	r2, r1, #6
 80029ca:	4651      	mov	r1, sl
 80029cc:	ebb2 0801 	subs.w	r8, r2, r1
 80029d0:	4659      	mov	r1, fp
 80029d2:	eb63 0901 	sbc.w	r9, r3, r1
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ea:	4690      	mov	r8, r2
 80029ec:	4699      	mov	r9, r3
 80029ee:	4623      	mov	r3, r4
 80029f0:	eb18 0303 	adds.w	r3, r8, r3
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	462b      	mov	r3, r5
 80029f8:	eb49 0303 	adc.w	r3, r9, r3
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	024b      	lsls	r3, r1, #9
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a14:	4621      	mov	r1, r4
 8002a16:	024a      	lsls	r2, r1, #9
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a1e:	2200      	movs	r2, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a28:	f7fd fc2a 	bl	8000280 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4613      	mov	r3, r2
 8002a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a34:	e058      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4611      	mov	r1, r2
 8002a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a46:	623b      	str	r3, [r7, #32]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	f04f 0000 	mov.w	r0, #0
 8002a58:	f04f 0100 	mov.w	r1, #0
 8002a5c:	0159      	lsls	r1, r3, #5
 8002a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a62:	0150      	lsls	r0, r2, #5
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4641      	mov	r1, r8
 8002a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a6e:	4649      	mov	r1, r9
 8002a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a88:	ebb2 040a 	subs.w	r4, r2, sl
 8002a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	00eb      	lsls	r3, r5, #3
 8002a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a9e:	00e2      	lsls	r2, r4, #3
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	4643      	mov	r3, r8
 8002aa6:	18e3      	adds	r3, r4, r3
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	464b      	mov	r3, r9
 8002aac:	eb45 0303 	adc.w	r3, r5, r3
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	028b      	lsls	r3, r1, #10
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ac8:	4621      	mov	r1, r4
 8002aca:	028a      	lsls	r2, r1, #10
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	61fa      	str	r2, [r7, #28]
 8002ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002adc:	f7fd fbd0 	bl	8000280 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0c1b      	lsrs	r3, r3, #16
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3750      	adds	r7, #80	; 0x50
 8002b10:	46bd      	mov	sp, r7
 8002b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	007a1200 	.word	0x007a1200

08002b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000008 	.word	0x20000008

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	080042d0 	.word	0x080042d0

08002b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b68:	f7ff ffdc 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	0b5b      	lsrs	r3, r3, #13
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	4903      	ldr	r1, [pc, #12]	; (8002b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7a:	5ccb      	ldrb	r3, [r1, r3]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40023800 	.word	0x40023800
 8002b88:	080042d0 	.word	0x080042d0

08002b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e03f      	b.n	8002c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd ff14 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f829 	bl	8002c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b0c0      	sub	sp, #256	; 0x100
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	68d9      	ldr	r1, [r3, #12]
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	ea40 0301 	orr.w	r3, r0, r1
 8002c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c80:	f021 010c 	bic.w	r1, r1, #12
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	6999      	ldr	r1, [r3, #24]
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	ea40 0301 	orr.w	r3, r0, r1
 8002cae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b8f      	ldr	r3, [pc, #572]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d005      	beq.n	8002cc8 <UART_SetConfig+0xa0>
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ef8 <UART_SetConfig+0x2d0>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d104      	bne.n	8002cd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cc8:	f7ff ff4c 	bl	8002b64 <HAL_RCC_GetPCLK2Freq>
 8002ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cd0:	e003      	b.n	8002cda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cd2:	f7ff ff33 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8002cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce4:	f040 810c 	bne.w	8002f00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	462b      	mov	r3, r5
 8002cfe:	1891      	adds	r1, r2, r2
 8002d00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d02:	415b      	adcs	r3, r3
 8002d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	eb12 0801 	adds.w	r8, r2, r1
 8002d10:	4629      	mov	r1, r5
 8002d12:	eb43 0901 	adc.w	r9, r3, r1
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d2a:	4690      	mov	r8, r2
 8002d2c:	4699      	mov	r9, r3
 8002d2e:	4623      	mov	r3, r4
 8002d30:	eb18 0303 	adds.w	r3, r8, r3
 8002d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d38:	462b      	mov	r3, r5
 8002d3a:	eb49 0303 	adc.w	r3, r9, r3
 8002d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d56:	460b      	mov	r3, r1
 8002d58:	18db      	adds	r3, r3, r3
 8002d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	eb42 0303 	adc.w	r3, r2, r3
 8002d62:	657b      	str	r3, [r7, #84]	; 0x54
 8002d64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d6c:	f7fd fa88 	bl	8000280 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <UART_SetConfig+0x2d4>)
 8002d76:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	011c      	lsls	r4, r3, #4
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d90:	4642      	mov	r2, r8
 8002d92:	464b      	mov	r3, r9
 8002d94:	1891      	adds	r1, r2, r2
 8002d96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d98:	415b      	adcs	r3, r3
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002da0:	4641      	mov	r1, r8
 8002da2:	eb12 0a01 	adds.w	sl, r2, r1
 8002da6:	4649      	mov	r1, r9
 8002da8:	eb43 0b01 	adc.w	fp, r3, r1
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002db8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc0:	4692      	mov	sl, r2
 8002dc2:	469b      	mov	fp, r3
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002de4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002de8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dec:	460b      	mov	r3, r1
 8002dee:	18db      	adds	r3, r3, r3
 8002df0:	643b      	str	r3, [r7, #64]	; 0x40
 8002df2:	4613      	mov	r3, r2
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e02:	f7fd fa3d 	bl	8000280 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <UART_SetConfig+0x2d4>)
 8002e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2264      	movs	r2, #100	; 0x64
 8002e16:	fb02 f303 	mul.w	r3, r2, r3
 8002e1a:	1acb      	subs	r3, r1, r3
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e22:	4b36      	ldr	r3, [pc, #216]	; (8002efc <UART_SetConfig+0x2d4>)
 8002e24:	fba3 2302 	umull	r2, r3, r3, r2
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e30:	441c      	add	r4, r3
 8002e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e36:	2200      	movs	r2, #0
 8002e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e44:	4642      	mov	r2, r8
 8002e46:	464b      	mov	r3, r9
 8002e48:	1891      	adds	r1, r2, r2
 8002e4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e4c:	415b      	adcs	r3, r3
 8002e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e54:	4641      	mov	r1, r8
 8002e56:	1851      	adds	r1, r2, r1
 8002e58:	6339      	str	r1, [r7, #48]	; 0x30
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	414b      	adcs	r3, r1
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e6c:	4659      	mov	r1, fp
 8002e6e:	00cb      	lsls	r3, r1, #3
 8002e70:	4651      	mov	r1, sl
 8002e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e76:	4651      	mov	r1, sl
 8002e78:	00ca      	lsls	r2, r1, #3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4642      	mov	r2, r8
 8002e82:	189b      	adds	r3, r3, r2
 8002e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e88:	464b      	mov	r3, r9
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ea0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	18db      	adds	r3, r3, r3
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eae:	4613      	mov	r3, r2
 8002eb0:	eb42 0303 	adc.w	r3, r2, r3
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ebe:	f7fd f9df 	bl	8000280 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <UART_SetConfig+0x2d4>)
 8002ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	2164      	movs	r1, #100	; 0x64
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	3332      	adds	r3, #50	; 0x32
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <UART_SetConfig+0x2d4>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	f003 0207 	and.w	r2, r3, #7
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4422      	add	r2, r4
 8002eee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ef0:	e105      	b.n	80030fe <UART_SetConfig+0x4d6>
 8002ef2:	bf00      	nop
 8002ef4:	40011000 	.word	0x40011000
 8002ef8:	40011400 	.word	0x40011400
 8002efc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f04:	2200      	movs	r2, #0
 8002f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f12:	4642      	mov	r2, r8
 8002f14:	464b      	mov	r3, r9
 8002f16:	1891      	adds	r1, r2, r2
 8002f18:	6239      	str	r1, [r7, #32]
 8002f1a:	415b      	adcs	r3, r3
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f22:	4641      	mov	r1, r8
 8002f24:	1854      	adds	r4, r2, r1
 8002f26:	4649      	mov	r1, r9
 8002f28:	eb43 0501 	adc.w	r5, r3, r1
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	00eb      	lsls	r3, r5, #3
 8002f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f3a:	00e2      	lsls	r2, r4, #3
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	461d      	mov	r5, r3
 8002f40:	4643      	mov	r3, r8
 8002f42:	18e3      	adds	r3, r4, r3
 8002f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f48:	464b      	mov	r3, r9
 8002f4a:	eb45 0303 	adc.w	r3, r5, r3
 8002f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f6e:	4629      	mov	r1, r5
 8002f70:	008b      	lsls	r3, r1, #2
 8002f72:	4621      	mov	r1, r4
 8002f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f78:	4621      	mov	r1, r4
 8002f7a:	008a      	lsls	r2, r1, #2
 8002f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f80:	f7fd f97e 	bl	8000280 <__aeabi_uldivmod>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <UART_SetConfig+0x4e4>)
 8002f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	011c      	lsls	r4, r3, #4
 8002f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f96:	2200      	movs	r2, #0
 8002f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fa4:	4642      	mov	r2, r8
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	1891      	adds	r1, r2, r2
 8002faa:	61b9      	str	r1, [r7, #24]
 8002fac:	415b      	adcs	r3, r3
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	1851      	adds	r1, r2, r1
 8002fb8:	6139      	str	r1, [r7, #16]
 8002fba:	4649      	mov	r1, r9
 8002fbc:	414b      	adcs	r3, r1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fcc:	4659      	mov	r1, fp
 8002fce:	00cb      	lsls	r3, r1, #3
 8002fd0:	4651      	mov	r1, sl
 8002fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd6:	4651      	mov	r1, sl
 8002fd8:	00ca      	lsls	r2, r1, #3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	189b      	adds	r3, r3, r2
 8002fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fe8:	464b      	mov	r3, r9
 8002fea:	460a      	mov	r2, r1
 8002fec:	eb42 0303 	adc.w	r3, r2, r3
 8002ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ffe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800300c:	4649      	mov	r1, r9
 800300e:	008b      	lsls	r3, r1, #2
 8003010:	4641      	mov	r1, r8
 8003012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003016:	4641      	mov	r1, r8
 8003018:	008a      	lsls	r2, r1, #2
 800301a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800301e:	f7fd f92f 	bl	8000280 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4b39      	ldr	r3, [pc, #228]	; (800310c <UART_SetConfig+0x4e4>)
 8003028:	fba3 1302 	umull	r1, r3, r3, r2
 800302c:	095b      	lsrs	r3, r3, #5
 800302e:	2164      	movs	r1, #100	; 0x64
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	3332      	adds	r3, #50	; 0x32
 800303a:	4a34      	ldr	r2, [pc, #208]	; (800310c <UART_SetConfig+0x4e4>)
 800303c:	fba2 2303 	umull	r2, r3, r2, r3
 8003040:	095b      	lsrs	r3, r3, #5
 8003042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003046:	441c      	add	r4, r3
 8003048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800304c:	2200      	movs	r2, #0
 800304e:	673b      	str	r3, [r7, #112]	; 0x70
 8003050:	677a      	str	r2, [r7, #116]	; 0x74
 8003052:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003056:	4642      	mov	r2, r8
 8003058:	464b      	mov	r3, r9
 800305a:	1891      	adds	r1, r2, r2
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	415b      	adcs	r3, r3
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003066:	4641      	mov	r1, r8
 8003068:	1851      	adds	r1, r2, r1
 800306a:	6039      	str	r1, [r7, #0]
 800306c:	4649      	mov	r1, r9
 800306e:	414b      	adcs	r3, r1
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800307e:	4659      	mov	r1, fp
 8003080:	00cb      	lsls	r3, r1, #3
 8003082:	4651      	mov	r1, sl
 8003084:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003088:	4651      	mov	r1, sl
 800308a:	00ca      	lsls	r2, r1, #3
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	4603      	mov	r3, r0
 8003092:	4642      	mov	r2, r8
 8003094:	189b      	adds	r3, r3, r2
 8003096:	66bb      	str	r3, [r7, #104]	; 0x68
 8003098:	464b      	mov	r3, r9
 800309a:	460a      	mov	r2, r1
 800309c:	eb42 0303 	adc.w	r3, r2, r3
 80030a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	663b      	str	r3, [r7, #96]	; 0x60
 80030ac:	667a      	str	r2, [r7, #100]	; 0x64
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	f04f 0300 	mov.w	r3, #0
 80030b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ba:	4649      	mov	r1, r9
 80030bc:	008b      	lsls	r3, r1, #2
 80030be:	4641      	mov	r1, r8
 80030c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030c4:	4641      	mov	r1, r8
 80030c6:	008a      	lsls	r2, r1, #2
 80030c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030cc:	f7fd f8d8 	bl	8000280 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4b0d      	ldr	r3, [pc, #52]	; (800310c <UART_SetConfig+0x4e4>)
 80030d6:	fba3 1302 	umull	r1, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2164      	movs	r1, #100	; 0x64
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <UART_SetConfig+0x4e4>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4422      	add	r2, r4
 80030fc:	609a      	str	r2, [r3, #8]
}
 80030fe:	bf00      	nop
 8003100:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003104:	46bd      	mov	sp, r7
 8003106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800310a:	bf00      	nop
 800310c:	51eb851f 	.word	0x51eb851f

08003110 <__errno>:
 8003110:	4b01      	ldr	r3, [pc, #4]	; (8003118 <__errno+0x8>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20000014 	.word	0x20000014

0800311c <__libc_init_array>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	4d0d      	ldr	r5, [pc, #52]	; (8003154 <__libc_init_array+0x38>)
 8003120:	4c0d      	ldr	r4, [pc, #52]	; (8003158 <__libc_init_array+0x3c>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	2600      	movs	r6, #0
 8003128:	42a6      	cmp	r6, r4
 800312a:	d109      	bne.n	8003140 <__libc_init_array+0x24>
 800312c:	4d0b      	ldr	r5, [pc, #44]	; (800315c <__libc_init_array+0x40>)
 800312e:	4c0c      	ldr	r4, [pc, #48]	; (8003160 <__libc_init_array+0x44>)
 8003130:	f001 f8ba 	bl	80042a8 <_init>
 8003134:	1b64      	subs	r4, r4, r5
 8003136:	10a4      	asrs	r4, r4, #2
 8003138:	2600      	movs	r6, #0
 800313a:	42a6      	cmp	r6, r4
 800313c:	d105      	bne.n	800314a <__libc_init_array+0x2e>
 800313e:	bd70      	pop	{r4, r5, r6, pc}
 8003140:	f855 3b04 	ldr.w	r3, [r5], #4
 8003144:	4798      	blx	r3
 8003146:	3601      	adds	r6, #1
 8003148:	e7ee      	b.n	8003128 <__libc_init_array+0xc>
 800314a:	f855 3b04 	ldr.w	r3, [r5], #4
 800314e:	4798      	blx	r3
 8003150:	3601      	adds	r6, #1
 8003152:	e7f2      	b.n	800313a <__libc_init_array+0x1e>
 8003154:	08004428 	.word	0x08004428
 8003158:	08004428 	.word	0x08004428
 800315c:	08004428 	.word	0x08004428
 8003160:	0800442c 	.word	0x0800442c

08003164 <memset>:
 8003164:	4402      	add	r2, r0
 8003166:	4603      	mov	r3, r0
 8003168:	4293      	cmp	r3, r2
 800316a:	d100      	bne.n	800316e <memset+0xa>
 800316c:	4770      	bx	lr
 800316e:	f803 1b01 	strb.w	r1, [r3], #1
 8003172:	e7f9      	b.n	8003168 <memset+0x4>

08003174 <srand>:
 8003174:	b538      	push	{r3, r4, r5, lr}
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <srand+0x44>)
 8003178:	681d      	ldr	r5, [r3, #0]
 800317a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800317c:	4604      	mov	r4, r0
 800317e:	b9b3      	cbnz	r3, 80031ae <srand+0x3a>
 8003180:	2018      	movs	r0, #24
 8003182:	f000 f8bf 	bl	8003304 <malloc>
 8003186:	4602      	mov	r2, r0
 8003188:	63a8      	str	r0, [r5, #56]	; 0x38
 800318a:	b920      	cbnz	r0, 8003196 <srand+0x22>
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <srand+0x48>)
 800318e:	480c      	ldr	r0, [pc, #48]	; (80031c0 <srand+0x4c>)
 8003190:	2142      	movs	r1, #66	; 0x42
 8003192:	f000 f875 	bl	8003280 <__assert_func>
 8003196:	490b      	ldr	r1, [pc, #44]	; (80031c4 <srand+0x50>)
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <srand+0x54>)
 800319a:	e9c0 1300 	strd	r1, r3, [r0]
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <srand+0x58>)
 80031a0:	6083      	str	r3, [r0, #8]
 80031a2:	230b      	movs	r3, #11
 80031a4:	8183      	strh	r3, [r0, #12]
 80031a6:	2100      	movs	r1, #0
 80031a8:	2001      	movs	r0, #1
 80031aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80031ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80031b0:	2200      	movs	r2, #0
 80031b2:	611c      	str	r4, [r3, #16]
 80031b4:	615a      	str	r2, [r3, #20]
 80031b6:	bd38      	pop	{r3, r4, r5, pc}
 80031b8:	20000014 	.word	0x20000014
 80031bc:	080042dc 	.word	0x080042dc
 80031c0:	080042f3 	.word	0x080042f3
 80031c4:	abcd330e 	.word	0xabcd330e
 80031c8:	e66d1234 	.word	0xe66d1234
 80031cc:	0005deec 	.word	0x0005deec

080031d0 <rand>:
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <rand+0x5c>)
 80031d2:	b510      	push	{r4, lr}
 80031d4:	681c      	ldr	r4, [r3, #0]
 80031d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d8:	b9b3      	cbnz	r3, 8003208 <rand+0x38>
 80031da:	2018      	movs	r0, #24
 80031dc:	f000 f892 	bl	8003304 <malloc>
 80031e0:	63a0      	str	r0, [r4, #56]	; 0x38
 80031e2:	b928      	cbnz	r0, 80031f0 <rand+0x20>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <rand+0x60>)
 80031e8:	4812      	ldr	r0, [pc, #72]	; (8003234 <rand+0x64>)
 80031ea:	214e      	movs	r1, #78	; 0x4e
 80031ec:	f000 f848 	bl	8003280 <__assert_func>
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <rand+0x68>)
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <rand+0x6c>)
 80031f4:	e9c0 2300 	strd	r2, r3, [r0]
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <rand+0x70>)
 80031fa:	6083      	str	r3, [r0, #8]
 80031fc:	230b      	movs	r3, #11
 80031fe:	8183      	strh	r3, [r0, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	2300      	movs	r3, #0
 8003204:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003208:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <rand+0x74>)
 800320c:	6920      	ldr	r0, [r4, #16]
 800320e:	6963      	ldr	r3, [r4, #20]
 8003210:	490d      	ldr	r1, [pc, #52]	; (8003248 <rand+0x78>)
 8003212:	4342      	muls	r2, r0
 8003214:	fb01 2203 	mla	r2, r1, r3, r2
 8003218:	fba0 0101 	umull	r0, r1, r0, r1
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	eb42 0001 	adc.w	r0, r2, r1
 8003222:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003226:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800322a:	bd10      	pop	{r4, pc}
 800322c:	20000014 	.word	0x20000014
 8003230:	080042dc 	.word	0x080042dc
 8003234:	080042f3 	.word	0x080042f3
 8003238:	abcd330e 	.word	0xabcd330e
 800323c:	e66d1234 	.word	0xe66d1234
 8003240:	0005deec 	.word	0x0005deec
 8003244:	5851f42d 	.word	0x5851f42d
 8003248:	4c957f2d 	.word	0x4c957f2d

0800324c <time>:
 800324c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <time+0x30>)
 8003250:	2200      	movs	r2, #0
 8003252:	4669      	mov	r1, sp
 8003254:	4604      	mov	r4, r0
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	f000 f842 	bl	80032e0 <_gettimeofday_r>
 800325c:	2800      	cmp	r0, #0
 800325e:	bfbe      	ittt	lt
 8003260:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8003264:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003268:	e9cd 2300 	strdlt	r2, r3, [sp]
 800326c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003270:	b10c      	cbz	r4, 8003276 <time+0x2a>
 8003272:	e9c4 0100 	strd	r0, r1, [r4]
 8003276:	b004      	add	sp, #16
 8003278:	bd10      	pop	{r4, pc}
 800327a:	bf00      	nop
 800327c:	20000014 	.word	0x20000014

08003280 <__assert_func>:
 8003280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003282:	4614      	mov	r4, r2
 8003284:	461a      	mov	r2, r3
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <__assert_func+0x2c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4605      	mov	r5, r0
 800328c:	68d8      	ldr	r0, [r3, #12]
 800328e:	b14c      	cbz	r4, 80032a4 <__assert_func+0x24>
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <__assert_func+0x30>)
 8003292:	9100      	str	r1, [sp, #0]
 8003294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003298:	4906      	ldr	r1, [pc, #24]	; (80032b4 <__assert_func+0x34>)
 800329a:	462b      	mov	r3, r5
 800329c:	f000 f80e 	bl	80032bc <fiprintf>
 80032a0:	f000 fcd6 	bl	8003c50 <abort>
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <__assert_func+0x38>)
 80032a6:	461c      	mov	r4, r3
 80032a8:	e7f3      	b.n	8003292 <__assert_func+0x12>
 80032aa:	bf00      	nop
 80032ac:	20000014 	.word	0x20000014
 80032b0:	0800434e 	.word	0x0800434e
 80032b4:	0800435b 	.word	0x0800435b
 80032b8:	08004389 	.word	0x08004389

080032bc <fiprintf>:
 80032bc:	b40e      	push	{r1, r2, r3}
 80032be:	b503      	push	{r0, r1, lr}
 80032c0:	4601      	mov	r1, r0
 80032c2:	ab03      	add	r3, sp, #12
 80032c4:	4805      	ldr	r0, [pc, #20]	; (80032dc <fiprintf+0x20>)
 80032c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032ca:	6800      	ldr	r0, [r0, #0]
 80032cc:	9301      	str	r3, [sp, #4]
 80032ce:	f000 f92b 	bl	8003528 <_vfiprintf_r>
 80032d2:	b002      	add	sp, #8
 80032d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d8:	b003      	add	sp, #12
 80032da:	4770      	bx	lr
 80032dc:	20000014 	.word	0x20000014

080032e0 <_gettimeofday_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4d07      	ldr	r5, [pc, #28]	; (8003300 <_gettimeofday_r+0x20>)
 80032e4:	2300      	movs	r3, #0
 80032e6:	4604      	mov	r4, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	f000 ffd3 	bl	8004298 <_gettimeofday>
 80032f2:	1c43      	adds	r3, r0, #1
 80032f4:	d102      	bne.n	80032fc <_gettimeofday_r+0x1c>
 80032f6:	682b      	ldr	r3, [r5, #0]
 80032f8:	b103      	cbz	r3, 80032fc <_gettimeofday_r+0x1c>
 80032fa:	6023      	str	r3, [r4, #0]
 80032fc:	bd38      	pop	{r3, r4, r5, pc}
 80032fe:	bf00      	nop
 8003300:	200001a4 	.word	0x200001a4

08003304 <malloc>:
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <malloc+0xc>)
 8003306:	4601      	mov	r1, r0
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f000 b86f 	b.w	80033ec <_malloc_r>
 800330e:	bf00      	nop
 8003310:	20000014 	.word	0x20000014

08003314 <_free_r>:
 8003314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003316:	2900      	cmp	r1, #0
 8003318:	d044      	beq.n	80033a4 <_free_r+0x90>
 800331a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800331e:	9001      	str	r0, [sp, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f1a1 0404 	sub.w	r4, r1, #4
 8003326:	bfb8      	it	lt
 8003328:	18e4      	addlt	r4, r4, r3
 800332a:	f000 feb9 	bl	80040a0 <__malloc_lock>
 800332e:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <_free_r+0x94>)
 8003330:	9801      	ldr	r0, [sp, #4]
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	b933      	cbnz	r3, 8003344 <_free_r+0x30>
 8003336:	6063      	str	r3, [r4, #4]
 8003338:	6014      	str	r4, [r2, #0]
 800333a:	b003      	add	sp, #12
 800333c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003340:	f000 beb4 	b.w	80040ac <__malloc_unlock>
 8003344:	42a3      	cmp	r3, r4
 8003346:	d908      	bls.n	800335a <_free_r+0x46>
 8003348:	6825      	ldr	r5, [r4, #0]
 800334a:	1961      	adds	r1, r4, r5
 800334c:	428b      	cmp	r3, r1
 800334e:	bf01      	itttt	eq
 8003350:	6819      	ldreq	r1, [r3, #0]
 8003352:	685b      	ldreq	r3, [r3, #4]
 8003354:	1949      	addeq	r1, r1, r5
 8003356:	6021      	streq	r1, [r4, #0]
 8003358:	e7ed      	b.n	8003336 <_free_r+0x22>
 800335a:	461a      	mov	r2, r3
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	b10b      	cbz	r3, 8003364 <_free_r+0x50>
 8003360:	42a3      	cmp	r3, r4
 8003362:	d9fa      	bls.n	800335a <_free_r+0x46>
 8003364:	6811      	ldr	r1, [r2, #0]
 8003366:	1855      	adds	r5, r2, r1
 8003368:	42a5      	cmp	r5, r4
 800336a:	d10b      	bne.n	8003384 <_free_r+0x70>
 800336c:	6824      	ldr	r4, [r4, #0]
 800336e:	4421      	add	r1, r4
 8003370:	1854      	adds	r4, r2, r1
 8003372:	42a3      	cmp	r3, r4
 8003374:	6011      	str	r1, [r2, #0]
 8003376:	d1e0      	bne.n	800333a <_free_r+0x26>
 8003378:	681c      	ldr	r4, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	6053      	str	r3, [r2, #4]
 800337e:	4421      	add	r1, r4
 8003380:	6011      	str	r1, [r2, #0]
 8003382:	e7da      	b.n	800333a <_free_r+0x26>
 8003384:	d902      	bls.n	800338c <_free_r+0x78>
 8003386:	230c      	movs	r3, #12
 8003388:	6003      	str	r3, [r0, #0]
 800338a:	e7d6      	b.n	800333a <_free_r+0x26>
 800338c:	6825      	ldr	r5, [r4, #0]
 800338e:	1961      	adds	r1, r4, r5
 8003390:	428b      	cmp	r3, r1
 8003392:	bf04      	itt	eq
 8003394:	6819      	ldreq	r1, [r3, #0]
 8003396:	685b      	ldreq	r3, [r3, #4]
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	bf04      	itt	eq
 800339c:	1949      	addeq	r1, r1, r5
 800339e:	6021      	streq	r1, [r4, #0]
 80033a0:	6054      	str	r4, [r2, #4]
 80033a2:	e7ca      	b.n	800333a <_free_r+0x26>
 80033a4:	b003      	add	sp, #12
 80033a6:	bd30      	pop	{r4, r5, pc}
 80033a8:	2000019c 	.word	0x2000019c

080033ac <sbrk_aligned>:
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	4e0e      	ldr	r6, [pc, #56]	; (80033e8 <sbrk_aligned+0x3c>)
 80033b0:	460c      	mov	r4, r1
 80033b2:	6831      	ldr	r1, [r6, #0]
 80033b4:	4605      	mov	r5, r0
 80033b6:	b911      	cbnz	r1, 80033be <sbrk_aligned+0x12>
 80033b8:	f000 fb7a 	bl	8003ab0 <_sbrk_r>
 80033bc:	6030      	str	r0, [r6, #0]
 80033be:	4621      	mov	r1, r4
 80033c0:	4628      	mov	r0, r5
 80033c2:	f000 fb75 	bl	8003ab0 <_sbrk_r>
 80033c6:	1c43      	adds	r3, r0, #1
 80033c8:	d00a      	beq.n	80033e0 <sbrk_aligned+0x34>
 80033ca:	1cc4      	adds	r4, r0, #3
 80033cc:	f024 0403 	bic.w	r4, r4, #3
 80033d0:	42a0      	cmp	r0, r4
 80033d2:	d007      	beq.n	80033e4 <sbrk_aligned+0x38>
 80033d4:	1a21      	subs	r1, r4, r0
 80033d6:	4628      	mov	r0, r5
 80033d8:	f000 fb6a 	bl	8003ab0 <_sbrk_r>
 80033dc:	3001      	adds	r0, #1
 80033de:	d101      	bne.n	80033e4 <sbrk_aligned+0x38>
 80033e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80033e4:	4620      	mov	r0, r4
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	200001a0 	.word	0x200001a0

080033ec <_malloc_r>:
 80033ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f0:	1ccd      	adds	r5, r1, #3
 80033f2:	f025 0503 	bic.w	r5, r5, #3
 80033f6:	3508      	adds	r5, #8
 80033f8:	2d0c      	cmp	r5, #12
 80033fa:	bf38      	it	cc
 80033fc:	250c      	movcc	r5, #12
 80033fe:	2d00      	cmp	r5, #0
 8003400:	4607      	mov	r7, r0
 8003402:	db01      	blt.n	8003408 <_malloc_r+0x1c>
 8003404:	42a9      	cmp	r1, r5
 8003406:	d905      	bls.n	8003414 <_malloc_r+0x28>
 8003408:	230c      	movs	r3, #12
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	2600      	movs	r6, #0
 800340e:	4630      	mov	r0, r6
 8003410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003414:	4e2e      	ldr	r6, [pc, #184]	; (80034d0 <_malloc_r+0xe4>)
 8003416:	f000 fe43 	bl	80040a0 <__malloc_lock>
 800341a:	6833      	ldr	r3, [r6, #0]
 800341c:	461c      	mov	r4, r3
 800341e:	bb34      	cbnz	r4, 800346e <_malloc_r+0x82>
 8003420:	4629      	mov	r1, r5
 8003422:	4638      	mov	r0, r7
 8003424:	f7ff ffc2 	bl	80033ac <sbrk_aligned>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	4604      	mov	r4, r0
 800342c:	d14d      	bne.n	80034ca <_malloc_r+0xde>
 800342e:	6834      	ldr	r4, [r6, #0]
 8003430:	4626      	mov	r6, r4
 8003432:	2e00      	cmp	r6, #0
 8003434:	d140      	bne.n	80034b8 <_malloc_r+0xcc>
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	4631      	mov	r1, r6
 800343a:	4638      	mov	r0, r7
 800343c:	eb04 0803 	add.w	r8, r4, r3
 8003440:	f000 fb36 	bl	8003ab0 <_sbrk_r>
 8003444:	4580      	cmp	r8, r0
 8003446:	d13a      	bne.n	80034be <_malloc_r+0xd2>
 8003448:	6821      	ldr	r1, [r4, #0]
 800344a:	3503      	adds	r5, #3
 800344c:	1a6d      	subs	r5, r5, r1
 800344e:	f025 0503 	bic.w	r5, r5, #3
 8003452:	3508      	adds	r5, #8
 8003454:	2d0c      	cmp	r5, #12
 8003456:	bf38      	it	cc
 8003458:	250c      	movcc	r5, #12
 800345a:	4629      	mov	r1, r5
 800345c:	4638      	mov	r0, r7
 800345e:	f7ff ffa5 	bl	80033ac <sbrk_aligned>
 8003462:	3001      	adds	r0, #1
 8003464:	d02b      	beq.n	80034be <_malloc_r+0xd2>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	442b      	add	r3, r5
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	e00e      	b.n	800348c <_malloc_r+0xa0>
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	1b52      	subs	r2, r2, r5
 8003472:	d41e      	bmi.n	80034b2 <_malloc_r+0xc6>
 8003474:	2a0b      	cmp	r2, #11
 8003476:	d916      	bls.n	80034a6 <_malloc_r+0xba>
 8003478:	1961      	adds	r1, r4, r5
 800347a:	42a3      	cmp	r3, r4
 800347c:	6025      	str	r5, [r4, #0]
 800347e:	bf18      	it	ne
 8003480:	6059      	strne	r1, [r3, #4]
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	bf08      	it	eq
 8003486:	6031      	streq	r1, [r6, #0]
 8003488:	5162      	str	r2, [r4, r5]
 800348a:	604b      	str	r3, [r1, #4]
 800348c:	4638      	mov	r0, r7
 800348e:	f104 060b 	add.w	r6, r4, #11
 8003492:	f000 fe0b 	bl	80040ac <__malloc_unlock>
 8003496:	f026 0607 	bic.w	r6, r6, #7
 800349a:	1d23      	adds	r3, r4, #4
 800349c:	1af2      	subs	r2, r6, r3
 800349e:	d0b6      	beq.n	800340e <_malloc_r+0x22>
 80034a0:	1b9b      	subs	r3, r3, r6
 80034a2:	50a3      	str	r3, [r4, r2]
 80034a4:	e7b3      	b.n	800340e <_malloc_r+0x22>
 80034a6:	6862      	ldr	r2, [r4, #4]
 80034a8:	42a3      	cmp	r3, r4
 80034aa:	bf0c      	ite	eq
 80034ac:	6032      	streq	r2, [r6, #0]
 80034ae:	605a      	strne	r2, [r3, #4]
 80034b0:	e7ec      	b.n	800348c <_malloc_r+0xa0>
 80034b2:	4623      	mov	r3, r4
 80034b4:	6864      	ldr	r4, [r4, #4]
 80034b6:	e7b2      	b.n	800341e <_malloc_r+0x32>
 80034b8:	4634      	mov	r4, r6
 80034ba:	6876      	ldr	r6, [r6, #4]
 80034bc:	e7b9      	b.n	8003432 <_malloc_r+0x46>
 80034be:	230c      	movs	r3, #12
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4638      	mov	r0, r7
 80034c4:	f000 fdf2 	bl	80040ac <__malloc_unlock>
 80034c8:	e7a1      	b.n	800340e <_malloc_r+0x22>
 80034ca:	6025      	str	r5, [r4, #0]
 80034cc:	e7de      	b.n	800348c <_malloc_r+0xa0>
 80034ce:	bf00      	nop
 80034d0:	2000019c 	.word	0x2000019c

080034d4 <__sfputc_r>:
 80034d4:	6893      	ldr	r3, [r2, #8]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	b410      	push	{r4}
 80034dc:	6093      	str	r3, [r2, #8]
 80034de:	da08      	bge.n	80034f2 <__sfputc_r+0x1e>
 80034e0:	6994      	ldr	r4, [r2, #24]
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	db01      	blt.n	80034ea <__sfputc_r+0x16>
 80034e6:	290a      	cmp	r1, #10
 80034e8:	d103      	bne.n	80034f2 <__sfputc_r+0x1e>
 80034ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ee:	f000 baef 	b.w	8003ad0 <__swbuf_r>
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	1c58      	adds	r0, r3, #1
 80034f6:	6010      	str	r0, [r2, #0]
 80034f8:	7019      	strb	r1, [r3, #0]
 80034fa:	4608      	mov	r0, r1
 80034fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003500:	4770      	bx	lr

08003502 <__sfputs_r>:
 8003502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003504:	4606      	mov	r6, r0
 8003506:	460f      	mov	r7, r1
 8003508:	4614      	mov	r4, r2
 800350a:	18d5      	adds	r5, r2, r3
 800350c:	42ac      	cmp	r4, r5
 800350e:	d101      	bne.n	8003514 <__sfputs_r+0x12>
 8003510:	2000      	movs	r0, #0
 8003512:	e007      	b.n	8003524 <__sfputs_r+0x22>
 8003514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003518:	463a      	mov	r2, r7
 800351a:	4630      	mov	r0, r6
 800351c:	f7ff ffda 	bl	80034d4 <__sfputc_r>
 8003520:	1c43      	adds	r3, r0, #1
 8003522:	d1f3      	bne.n	800350c <__sfputs_r+0xa>
 8003524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003528 <_vfiprintf_r>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	460d      	mov	r5, r1
 800352e:	b09d      	sub	sp, #116	; 0x74
 8003530:	4614      	mov	r4, r2
 8003532:	4698      	mov	r8, r3
 8003534:	4606      	mov	r6, r0
 8003536:	b118      	cbz	r0, 8003540 <_vfiprintf_r+0x18>
 8003538:	6983      	ldr	r3, [r0, #24]
 800353a:	b90b      	cbnz	r3, 8003540 <_vfiprintf_r+0x18>
 800353c:	f000 fcaa 	bl	8003e94 <__sinit>
 8003540:	4b89      	ldr	r3, [pc, #548]	; (8003768 <_vfiprintf_r+0x240>)
 8003542:	429d      	cmp	r5, r3
 8003544:	d11b      	bne.n	800357e <_vfiprintf_r+0x56>
 8003546:	6875      	ldr	r5, [r6, #4]
 8003548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800354a:	07d9      	lsls	r1, r3, #31
 800354c:	d405      	bmi.n	800355a <_vfiprintf_r+0x32>
 800354e:	89ab      	ldrh	r3, [r5, #12]
 8003550:	059a      	lsls	r2, r3, #22
 8003552:	d402      	bmi.n	800355a <_vfiprintf_r+0x32>
 8003554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003556:	f000 fd3b 	bl	8003fd0 <__retarget_lock_acquire_recursive>
 800355a:	89ab      	ldrh	r3, [r5, #12]
 800355c:	071b      	lsls	r3, r3, #28
 800355e:	d501      	bpl.n	8003564 <_vfiprintf_r+0x3c>
 8003560:	692b      	ldr	r3, [r5, #16]
 8003562:	b9eb      	cbnz	r3, 80035a0 <_vfiprintf_r+0x78>
 8003564:	4629      	mov	r1, r5
 8003566:	4630      	mov	r0, r6
 8003568:	f000 fb04 	bl	8003b74 <__swsetup_r>
 800356c:	b1c0      	cbz	r0, 80035a0 <_vfiprintf_r+0x78>
 800356e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003570:	07dc      	lsls	r4, r3, #31
 8003572:	d50e      	bpl.n	8003592 <_vfiprintf_r+0x6a>
 8003574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003578:	b01d      	add	sp, #116	; 0x74
 800357a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357e:	4b7b      	ldr	r3, [pc, #492]	; (800376c <_vfiprintf_r+0x244>)
 8003580:	429d      	cmp	r5, r3
 8003582:	d101      	bne.n	8003588 <_vfiprintf_r+0x60>
 8003584:	68b5      	ldr	r5, [r6, #8]
 8003586:	e7df      	b.n	8003548 <_vfiprintf_r+0x20>
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <_vfiprintf_r+0x248>)
 800358a:	429d      	cmp	r5, r3
 800358c:	bf08      	it	eq
 800358e:	68f5      	ldreq	r5, [r6, #12]
 8003590:	e7da      	b.n	8003548 <_vfiprintf_r+0x20>
 8003592:	89ab      	ldrh	r3, [r5, #12]
 8003594:	0598      	lsls	r0, r3, #22
 8003596:	d4ed      	bmi.n	8003574 <_vfiprintf_r+0x4c>
 8003598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800359a:	f000 fd1a 	bl	8003fd2 <__retarget_lock_release_recursive>
 800359e:	e7e9      	b.n	8003574 <_vfiprintf_r+0x4c>
 80035a0:	2300      	movs	r3, #0
 80035a2:	9309      	str	r3, [sp, #36]	; 0x24
 80035a4:	2320      	movs	r3, #32
 80035a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80035ae:	2330      	movs	r3, #48	; 0x30
 80035b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003774 <_vfiprintf_r+0x24c>
 80035b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035b8:	f04f 0901 	mov.w	r9, #1
 80035bc:	4623      	mov	r3, r4
 80035be:	469a      	mov	sl, r3
 80035c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035c4:	b10a      	cbz	r2, 80035ca <_vfiprintf_r+0xa2>
 80035c6:	2a25      	cmp	r2, #37	; 0x25
 80035c8:	d1f9      	bne.n	80035be <_vfiprintf_r+0x96>
 80035ca:	ebba 0b04 	subs.w	fp, sl, r4
 80035ce:	d00b      	beq.n	80035e8 <_vfiprintf_r+0xc0>
 80035d0:	465b      	mov	r3, fp
 80035d2:	4622      	mov	r2, r4
 80035d4:	4629      	mov	r1, r5
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7ff ff93 	bl	8003502 <__sfputs_r>
 80035dc:	3001      	adds	r0, #1
 80035de:	f000 80aa 	beq.w	8003736 <_vfiprintf_r+0x20e>
 80035e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035e4:	445a      	add	r2, fp
 80035e6:	9209      	str	r2, [sp, #36]	; 0x24
 80035e8:	f89a 3000 	ldrb.w	r3, [sl]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80a2 	beq.w	8003736 <_vfiprintf_r+0x20e>
 80035f2:	2300      	movs	r3, #0
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035fc:	f10a 0a01 	add.w	sl, sl, #1
 8003600:	9304      	str	r3, [sp, #16]
 8003602:	9307      	str	r3, [sp, #28]
 8003604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003608:	931a      	str	r3, [sp, #104]	; 0x68
 800360a:	4654      	mov	r4, sl
 800360c:	2205      	movs	r2, #5
 800360e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003612:	4858      	ldr	r0, [pc, #352]	; (8003774 <_vfiprintf_r+0x24c>)
 8003614:	f7fc fde4 	bl	80001e0 <memchr>
 8003618:	9a04      	ldr	r2, [sp, #16]
 800361a:	b9d8      	cbnz	r0, 8003654 <_vfiprintf_r+0x12c>
 800361c:	06d1      	lsls	r1, r2, #27
 800361e:	bf44      	itt	mi
 8003620:	2320      	movmi	r3, #32
 8003622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003626:	0713      	lsls	r3, r2, #28
 8003628:	bf44      	itt	mi
 800362a:	232b      	movmi	r3, #43	; 0x2b
 800362c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003630:	f89a 3000 	ldrb.w	r3, [sl]
 8003634:	2b2a      	cmp	r3, #42	; 0x2a
 8003636:	d015      	beq.n	8003664 <_vfiprintf_r+0x13c>
 8003638:	9a07      	ldr	r2, [sp, #28]
 800363a:	4654      	mov	r4, sl
 800363c:	2000      	movs	r0, #0
 800363e:	f04f 0c0a 	mov.w	ip, #10
 8003642:	4621      	mov	r1, r4
 8003644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003648:	3b30      	subs	r3, #48	; 0x30
 800364a:	2b09      	cmp	r3, #9
 800364c:	d94e      	bls.n	80036ec <_vfiprintf_r+0x1c4>
 800364e:	b1b0      	cbz	r0, 800367e <_vfiprintf_r+0x156>
 8003650:	9207      	str	r2, [sp, #28]
 8003652:	e014      	b.n	800367e <_vfiprintf_r+0x156>
 8003654:	eba0 0308 	sub.w	r3, r0, r8
 8003658:	fa09 f303 	lsl.w	r3, r9, r3
 800365c:	4313      	orrs	r3, r2
 800365e:	9304      	str	r3, [sp, #16]
 8003660:	46a2      	mov	sl, r4
 8003662:	e7d2      	b.n	800360a <_vfiprintf_r+0xe2>
 8003664:	9b03      	ldr	r3, [sp, #12]
 8003666:	1d19      	adds	r1, r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	9103      	str	r1, [sp, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	bfbb      	ittet	lt
 8003670:	425b      	neglt	r3, r3
 8003672:	f042 0202 	orrlt.w	r2, r2, #2
 8003676:	9307      	strge	r3, [sp, #28]
 8003678:	9307      	strlt	r3, [sp, #28]
 800367a:	bfb8      	it	lt
 800367c:	9204      	strlt	r2, [sp, #16]
 800367e:	7823      	ldrb	r3, [r4, #0]
 8003680:	2b2e      	cmp	r3, #46	; 0x2e
 8003682:	d10c      	bne.n	800369e <_vfiprintf_r+0x176>
 8003684:	7863      	ldrb	r3, [r4, #1]
 8003686:	2b2a      	cmp	r3, #42	; 0x2a
 8003688:	d135      	bne.n	80036f6 <_vfiprintf_r+0x1ce>
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	1d1a      	adds	r2, r3, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	9203      	str	r2, [sp, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	bfb8      	it	lt
 8003696:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800369a:	3402      	adds	r4, #2
 800369c:	9305      	str	r3, [sp, #20]
 800369e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003784 <_vfiprintf_r+0x25c>
 80036a2:	7821      	ldrb	r1, [r4, #0]
 80036a4:	2203      	movs	r2, #3
 80036a6:	4650      	mov	r0, sl
 80036a8:	f7fc fd9a 	bl	80001e0 <memchr>
 80036ac:	b140      	cbz	r0, 80036c0 <_vfiprintf_r+0x198>
 80036ae:	2340      	movs	r3, #64	; 0x40
 80036b0:	eba0 000a 	sub.w	r0, r0, sl
 80036b4:	fa03 f000 	lsl.w	r0, r3, r0
 80036b8:	9b04      	ldr	r3, [sp, #16]
 80036ba:	4303      	orrs	r3, r0
 80036bc:	3401      	adds	r4, #1
 80036be:	9304      	str	r3, [sp, #16]
 80036c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c4:	482c      	ldr	r0, [pc, #176]	; (8003778 <_vfiprintf_r+0x250>)
 80036c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036ca:	2206      	movs	r2, #6
 80036cc:	f7fc fd88 	bl	80001e0 <memchr>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d03f      	beq.n	8003754 <_vfiprintf_r+0x22c>
 80036d4:	4b29      	ldr	r3, [pc, #164]	; (800377c <_vfiprintf_r+0x254>)
 80036d6:	bb1b      	cbnz	r3, 8003720 <_vfiprintf_r+0x1f8>
 80036d8:	9b03      	ldr	r3, [sp, #12]
 80036da:	3307      	adds	r3, #7
 80036dc:	f023 0307 	bic.w	r3, r3, #7
 80036e0:	3308      	adds	r3, #8
 80036e2:	9303      	str	r3, [sp, #12]
 80036e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e6:	443b      	add	r3, r7
 80036e8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ea:	e767      	b.n	80035bc <_vfiprintf_r+0x94>
 80036ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80036f0:	460c      	mov	r4, r1
 80036f2:	2001      	movs	r0, #1
 80036f4:	e7a5      	b.n	8003642 <_vfiprintf_r+0x11a>
 80036f6:	2300      	movs	r3, #0
 80036f8:	3401      	adds	r4, #1
 80036fa:	9305      	str	r3, [sp, #20]
 80036fc:	4619      	mov	r1, r3
 80036fe:	f04f 0c0a 	mov.w	ip, #10
 8003702:	4620      	mov	r0, r4
 8003704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003708:	3a30      	subs	r2, #48	; 0x30
 800370a:	2a09      	cmp	r2, #9
 800370c:	d903      	bls.n	8003716 <_vfiprintf_r+0x1ee>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0c5      	beq.n	800369e <_vfiprintf_r+0x176>
 8003712:	9105      	str	r1, [sp, #20]
 8003714:	e7c3      	b.n	800369e <_vfiprintf_r+0x176>
 8003716:	fb0c 2101 	mla	r1, ip, r1, r2
 800371a:	4604      	mov	r4, r0
 800371c:	2301      	movs	r3, #1
 800371e:	e7f0      	b.n	8003702 <_vfiprintf_r+0x1da>
 8003720:	ab03      	add	r3, sp, #12
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	462a      	mov	r2, r5
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <_vfiprintf_r+0x258>)
 8003728:	a904      	add	r1, sp, #16
 800372a:	4630      	mov	r0, r6
 800372c:	f3af 8000 	nop.w
 8003730:	4607      	mov	r7, r0
 8003732:	1c78      	adds	r0, r7, #1
 8003734:	d1d6      	bne.n	80036e4 <_vfiprintf_r+0x1bc>
 8003736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003738:	07d9      	lsls	r1, r3, #31
 800373a:	d405      	bmi.n	8003748 <_vfiprintf_r+0x220>
 800373c:	89ab      	ldrh	r3, [r5, #12]
 800373e:	059a      	lsls	r2, r3, #22
 8003740:	d402      	bmi.n	8003748 <_vfiprintf_r+0x220>
 8003742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003744:	f000 fc45 	bl	8003fd2 <__retarget_lock_release_recursive>
 8003748:	89ab      	ldrh	r3, [r5, #12]
 800374a:	065b      	lsls	r3, r3, #25
 800374c:	f53f af12 	bmi.w	8003574 <_vfiprintf_r+0x4c>
 8003750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003752:	e711      	b.n	8003578 <_vfiprintf_r+0x50>
 8003754:	ab03      	add	r3, sp, #12
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	462a      	mov	r2, r5
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <_vfiprintf_r+0x258>)
 800375c:	a904      	add	r1, sp, #16
 800375e:	4630      	mov	r0, r6
 8003760:	f000 f880 	bl	8003864 <_printf_i>
 8003764:	e7e4      	b.n	8003730 <_vfiprintf_r+0x208>
 8003766:	bf00      	nop
 8003768:	080043e0 	.word	0x080043e0
 800376c:	08004400 	.word	0x08004400
 8003770:	080043c0 	.word	0x080043c0
 8003774:	0800438a 	.word	0x0800438a
 8003778:	08004394 	.word	0x08004394
 800377c:	00000000 	.word	0x00000000
 8003780:	08003503 	.word	0x08003503
 8003784:	08004390 	.word	0x08004390

08003788 <_printf_common>:
 8003788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800378c:	4616      	mov	r6, r2
 800378e:	4699      	mov	r9, r3
 8003790:	688a      	ldr	r2, [r1, #8]
 8003792:	690b      	ldr	r3, [r1, #16]
 8003794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003798:	4293      	cmp	r3, r2
 800379a:	bfb8      	it	lt
 800379c:	4613      	movlt	r3, r2
 800379e:	6033      	str	r3, [r6, #0]
 80037a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037a4:	4607      	mov	r7, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	b10a      	cbz	r2, 80037ae <_printf_common+0x26>
 80037aa:	3301      	adds	r3, #1
 80037ac:	6033      	str	r3, [r6, #0]
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	0699      	lsls	r1, r3, #26
 80037b2:	bf42      	ittt	mi
 80037b4:	6833      	ldrmi	r3, [r6, #0]
 80037b6:	3302      	addmi	r3, #2
 80037b8:	6033      	strmi	r3, [r6, #0]
 80037ba:	6825      	ldr	r5, [r4, #0]
 80037bc:	f015 0506 	ands.w	r5, r5, #6
 80037c0:	d106      	bne.n	80037d0 <_printf_common+0x48>
 80037c2:	f104 0a19 	add.w	sl, r4, #25
 80037c6:	68e3      	ldr	r3, [r4, #12]
 80037c8:	6832      	ldr	r2, [r6, #0]
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	42ab      	cmp	r3, r5
 80037ce:	dc26      	bgt.n	800381e <_printf_common+0x96>
 80037d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037d4:	1e13      	subs	r3, r2, #0
 80037d6:	6822      	ldr	r2, [r4, #0]
 80037d8:	bf18      	it	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	0692      	lsls	r2, r2, #26
 80037de:	d42b      	bmi.n	8003838 <_printf_common+0xb0>
 80037e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037e4:	4649      	mov	r1, r9
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d01e      	beq.n	800382c <_printf_common+0xa4>
 80037ee:	6823      	ldr	r3, [r4, #0]
 80037f0:	68e5      	ldr	r5, [r4, #12]
 80037f2:	6832      	ldr	r2, [r6, #0]
 80037f4:	f003 0306 	and.w	r3, r3, #6
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	bf08      	it	eq
 80037fc:	1aad      	subeq	r5, r5, r2
 80037fe:	68a3      	ldr	r3, [r4, #8]
 8003800:	6922      	ldr	r2, [r4, #16]
 8003802:	bf0c      	ite	eq
 8003804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003808:	2500      	movne	r5, #0
 800380a:	4293      	cmp	r3, r2
 800380c:	bfc4      	itt	gt
 800380e:	1a9b      	subgt	r3, r3, r2
 8003810:	18ed      	addgt	r5, r5, r3
 8003812:	2600      	movs	r6, #0
 8003814:	341a      	adds	r4, #26
 8003816:	42b5      	cmp	r5, r6
 8003818:	d11a      	bne.n	8003850 <_printf_common+0xc8>
 800381a:	2000      	movs	r0, #0
 800381c:	e008      	b.n	8003830 <_printf_common+0xa8>
 800381e:	2301      	movs	r3, #1
 8003820:	4652      	mov	r2, sl
 8003822:	4649      	mov	r1, r9
 8003824:	4638      	mov	r0, r7
 8003826:	47c0      	blx	r8
 8003828:	3001      	adds	r0, #1
 800382a:	d103      	bne.n	8003834 <_printf_common+0xac>
 800382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003834:	3501      	adds	r5, #1
 8003836:	e7c6      	b.n	80037c6 <_printf_common+0x3e>
 8003838:	18e1      	adds	r1, r4, r3
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	2030      	movs	r0, #48	; 0x30
 800383e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003842:	4422      	add	r2, r4
 8003844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800384c:	3302      	adds	r3, #2
 800384e:	e7c7      	b.n	80037e0 <_printf_common+0x58>
 8003850:	2301      	movs	r3, #1
 8003852:	4622      	mov	r2, r4
 8003854:	4649      	mov	r1, r9
 8003856:	4638      	mov	r0, r7
 8003858:	47c0      	blx	r8
 800385a:	3001      	adds	r0, #1
 800385c:	d0e6      	beq.n	800382c <_printf_common+0xa4>
 800385e:	3601      	adds	r6, #1
 8003860:	e7d9      	b.n	8003816 <_printf_common+0x8e>
	...

08003864 <_printf_i>:
 8003864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	7e0f      	ldrb	r7, [r1, #24]
 800386a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800386c:	2f78      	cmp	r7, #120	; 0x78
 800386e:	4691      	mov	r9, r2
 8003870:	4680      	mov	r8, r0
 8003872:	460c      	mov	r4, r1
 8003874:	469a      	mov	sl, r3
 8003876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800387a:	d807      	bhi.n	800388c <_printf_i+0x28>
 800387c:	2f62      	cmp	r7, #98	; 0x62
 800387e:	d80a      	bhi.n	8003896 <_printf_i+0x32>
 8003880:	2f00      	cmp	r7, #0
 8003882:	f000 80d8 	beq.w	8003a36 <_printf_i+0x1d2>
 8003886:	2f58      	cmp	r7, #88	; 0x58
 8003888:	f000 80a3 	beq.w	80039d2 <_printf_i+0x16e>
 800388c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003894:	e03a      	b.n	800390c <_printf_i+0xa8>
 8003896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800389a:	2b15      	cmp	r3, #21
 800389c:	d8f6      	bhi.n	800388c <_printf_i+0x28>
 800389e:	a101      	add	r1, pc, #4	; (adr r1, 80038a4 <_printf_i+0x40>)
 80038a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	08003911 	.word	0x08003911
 80038ac:	0800388d 	.word	0x0800388d
 80038b0:	0800388d 	.word	0x0800388d
 80038b4:	0800388d 	.word	0x0800388d
 80038b8:	0800388d 	.word	0x0800388d
 80038bc:	08003911 	.word	0x08003911
 80038c0:	0800388d 	.word	0x0800388d
 80038c4:	0800388d 	.word	0x0800388d
 80038c8:	0800388d 	.word	0x0800388d
 80038cc:	0800388d 	.word	0x0800388d
 80038d0:	08003a1d 	.word	0x08003a1d
 80038d4:	08003941 	.word	0x08003941
 80038d8:	080039ff 	.word	0x080039ff
 80038dc:	0800388d 	.word	0x0800388d
 80038e0:	0800388d 	.word	0x0800388d
 80038e4:	08003a3f 	.word	0x08003a3f
 80038e8:	0800388d 	.word	0x0800388d
 80038ec:	08003941 	.word	0x08003941
 80038f0:	0800388d 	.word	0x0800388d
 80038f4:	0800388d 	.word	0x0800388d
 80038f8:	08003a07 	.word	0x08003a07
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	602a      	str	r2, [r5, #0]
 8003904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800390c:	2301      	movs	r3, #1
 800390e:	e0a3      	b.n	8003a58 <_printf_i+0x1f4>
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	6829      	ldr	r1, [r5, #0]
 8003914:	0606      	lsls	r6, r0, #24
 8003916:	f101 0304 	add.w	r3, r1, #4
 800391a:	d50a      	bpl.n	8003932 <_printf_i+0xce>
 800391c:	680e      	ldr	r6, [r1, #0]
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	2e00      	cmp	r6, #0
 8003922:	da03      	bge.n	800392c <_printf_i+0xc8>
 8003924:	232d      	movs	r3, #45	; 0x2d
 8003926:	4276      	negs	r6, r6
 8003928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392c:	485e      	ldr	r0, [pc, #376]	; (8003aa8 <_printf_i+0x244>)
 800392e:	230a      	movs	r3, #10
 8003930:	e019      	b.n	8003966 <_printf_i+0x102>
 8003932:	680e      	ldr	r6, [r1, #0]
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	f010 0f40 	tst.w	r0, #64	; 0x40
 800393a:	bf18      	it	ne
 800393c:	b236      	sxthne	r6, r6
 800393e:	e7ef      	b.n	8003920 <_printf_i+0xbc>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	1d19      	adds	r1, r3, #4
 8003946:	6029      	str	r1, [r5, #0]
 8003948:	0601      	lsls	r1, r0, #24
 800394a:	d501      	bpl.n	8003950 <_printf_i+0xec>
 800394c:	681e      	ldr	r6, [r3, #0]
 800394e:	e002      	b.n	8003956 <_printf_i+0xf2>
 8003950:	0646      	lsls	r6, r0, #25
 8003952:	d5fb      	bpl.n	800394c <_printf_i+0xe8>
 8003954:	881e      	ldrh	r6, [r3, #0]
 8003956:	4854      	ldr	r0, [pc, #336]	; (8003aa8 <_printf_i+0x244>)
 8003958:	2f6f      	cmp	r7, #111	; 0x6f
 800395a:	bf0c      	ite	eq
 800395c:	2308      	moveq	r3, #8
 800395e:	230a      	movne	r3, #10
 8003960:	2100      	movs	r1, #0
 8003962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003966:	6865      	ldr	r5, [r4, #4]
 8003968:	60a5      	str	r5, [r4, #8]
 800396a:	2d00      	cmp	r5, #0
 800396c:	bfa2      	ittt	ge
 800396e:	6821      	ldrge	r1, [r4, #0]
 8003970:	f021 0104 	bicge.w	r1, r1, #4
 8003974:	6021      	strge	r1, [r4, #0]
 8003976:	b90e      	cbnz	r6, 800397c <_printf_i+0x118>
 8003978:	2d00      	cmp	r5, #0
 800397a:	d04d      	beq.n	8003a18 <_printf_i+0x1b4>
 800397c:	4615      	mov	r5, r2
 800397e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003982:	fb03 6711 	mls	r7, r3, r1, r6
 8003986:	5dc7      	ldrb	r7, [r0, r7]
 8003988:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800398c:	4637      	mov	r7, r6
 800398e:	42bb      	cmp	r3, r7
 8003990:	460e      	mov	r6, r1
 8003992:	d9f4      	bls.n	800397e <_printf_i+0x11a>
 8003994:	2b08      	cmp	r3, #8
 8003996:	d10b      	bne.n	80039b0 <_printf_i+0x14c>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	07de      	lsls	r6, r3, #31
 800399c:	d508      	bpl.n	80039b0 <_printf_i+0x14c>
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	6861      	ldr	r1, [r4, #4]
 80039a2:	4299      	cmp	r1, r3
 80039a4:	bfde      	ittt	le
 80039a6:	2330      	movle	r3, #48	; 0x30
 80039a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80039b0:	1b52      	subs	r2, r2, r5
 80039b2:	6122      	str	r2, [r4, #16]
 80039b4:	f8cd a000 	str.w	sl, [sp]
 80039b8:	464b      	mov	r3, r9
 80039ba:	aa03      	add	r2, sp, #12
 80039bc:	4621      	mov	r1, r4
 80039be:	4640      	mov	r0, r8
 80039c0:	f7ff fee2 	bl	8003788 <_printf_common>
 80039c4:	3001      	adds	r0, #1
 80039c6:	d14c      	bne.n	8003a62 <_printf_i+0x1fe>
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039cc:	b004      	add	sp, #16
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d2:	4835      	ldr	r0, [pc, #212]	; (8003aa8 <_printf_i+0x244>)
 80039d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039d8:	6829      	ldr	r1, [r5, #0]
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80039e0:	6029      	str	r1, [r5, #0]
 80039e2:	061d      	lsls	r5, r3, #24
 80039e4:	d514      	bpl.n	8003a10 <_printf_i+0x1ac>
 80039e6:	07df      	lsls	r7, r3, #31
 80039e8:	bf44      	itt	mi
 80039ea:	f043 0320 	orrmi.w	r3, r3, #32
 80039ee:	6023      	strmi	r3, [r4, #0]
 80039f0:	b91e      	cbnz	r6, 80039fa <_printf_i+0x196>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	f023 0320 	bic.w	r3, r3, #32
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	2310      	movs	r3, #16
 80039fc:	e7b0      	b.n	8003960 <_printf_i+0xfc>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f043 0320 	orr.w	r3, r3, #32
 8003a04:	6023      	str	r3, [r4, #0]
 8003a06:	2378      	movs	r3, #120	; 0x78
 8003a08:	4828      	ldr	r0, [pc, #160]	; (8003aac <_printf_i+0x248>)
 8003a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a0e:	e7e3      	b.n	80039d8 <_printf_i+0x174>
 8003a10:	0659      	lsls	r1, r3, #25
 8003a12:	bf48      	it	mi
 8003a14:	b2b6      	uxthmi	r6, r6
 8003a16:	e7e6      	b.n	80039e6 <_printf_i+0x182>
 8003a18:	4615      	mov	r5, r2
 8003a1a:	e7bb      	b.n	8003994 <_printf_i+0x130>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	6826      	ldr	r6, [r4, #0]
 8003a20:	6961      	ldr	r1, [r4, #20]
 8003a22:	1d18      	adds	r0, r3, #4
 8003a24:	6028      	str	r0, [r5, #0]
 8003a26:	0635      	lsls	r5, r6, #24
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	d501      	bpl.n	8003a30 <_printf_i+0x1cc>
 8003a2c:	6019      	str	r1, [r3, #0]
 8003a2e:	e002      	b.n	8003a36 <_printf_i+0x1d2>
 8003a30:	0670      	lsls	r0, r6, #25
 8003a32:	d5fb      	bpl.n	8003a2c <_printf_i+0x1c8>
 8003a34:	8019      	strh	r1, [r3, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	6123      	str	r3, [r4, #16]
 8003a3a:	4615      	mov	r5, r2
 8003a3c:	e7ba      	b.n	80039b4 <_printf_i+0x150>
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	1d1a      	adds	r2, r3, #4
 8003a42:	602a      	str	r2, [r5, #0]
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	6862      	ldr	r2, [r4, #4]
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	f7fc fbc8 	bl	80001e0 <memchr>
 8003a50:	b108      	cbz	r0, 8003a56 <_printf_i+0x1f2>
 8003a52:	1b40      	subs	r0, r0, r5
 8003a54:	6060      	str	r0, [r4, #4]
 8003a56:	6863      	ldr	r3, [r4, #4]
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a60:	e7a8      	b.n	80039b4 <_printf_i+0x150>
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	462a      	mov	r2, r5
 8003a66:	4649      	mov	r1, r9
 8003a68:	4640      	mov	r0, r8
 8003a6a:	47d0      	blx	sl
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	d0ab      	beq.n	80039c8 <_printf_i+0x164>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	079b      	lsls	r3, r3, #30
 8003a74:	d413      	bmi.n	8003a9e <_printf_i+0x23a>
 8003a76:	68e0      	ldr	r0, [r4, #12]
 8003a78:	9b03      	ldr	r3, [sp, #12]
 8003a7a:	4298      	cmp	r0, r3
 8003a7c:	bfb8      	it	lt
 8003a7e:	4618      	movlt	r0, r3
 8003a80:	e7a4      	b.n	80039cc <_printf_i+0x168>
 8003a82:	2301      	movs	r3, #1
 8003a84:	4632      	mov	r2, r6
 8003a86:	4649      	mov	r1, r9
 8003a88:	4640      	mov	r0, r8
 8003a8a:	47d0      	blx	sl
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	d09b      	beq.n	80039c8 <_printf_i+0x164>
 8003a90:	3501      	adds	r5, #1
 8003a92:	68e3      	ldr	r3, [r4, #12]
 8003a94:	9903      	ldr	r1, [sp, #12]
 8003a96:	1a5b      	subs	r3, r3, r1
 8003a98:	42ab      	cmp	r3, r5
 8003a9a:	dcf2      	bgt.n	8003a82 <_printf_i+0x21e>
 8003a9c:	e7eb      	b.n	8003a76 <_printf_i+0x212>
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	f104 0619 	add.w	r6, r4, #25
 8003aa4:	e7f5      	b.n	8003a92 <_printf_i+0x22e>
 8003aa6:	bf00      	nop
 8003aa8:	0800439b 	.word	0x0800439b
 8003aac:	080043ac 	.word	0x080043ac

08003ab0 <_sbrk_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4d06      	ldr	r5, [pc, #24]	; (8003acc <_sbrk_r+0x1c>)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4604      	mov	r4, r0
 8003ab8:	4608      	mov	r0, r1
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	f7fd f892 	bl	8000be4 <_sbrk>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d102      	bne.n	8003aca <_sbrk_r+0x1a>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	b103      	cbz	r3, 8003aca <_sbrk_r+0x1a>
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	200001a4 	.word	0x200001a4

08003ad0 <__swbuf_r>:
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad2:	460e      	mov	r6, r1
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	b118      	cbz	r0, 8003ae2 <__swbuf_r+0x12>
 8003ada:	6983      	ldr	r3, [r0, #24]
 8003adc:	b90b      	cbnz	r3, 8003ae2 <__swbuf_r+0x12>
 8003ade:	f000 f9d9 	bl	8003e94 <__sinit>
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <__swbuf_r+0x98>)
 8003ae4:	429c      	cmp	r4, r3
 8003ae6:	d12b      	bne.n	8003b40 <__swbuf_r+0x70>
 8003ae8:	686c      	ldr	r4, [r5, #4]
 8003aea:	69a3      	ldr	r3, [r4, #24]
 8003aec:	60a3      	str	r3, [r4, #8]
 8003aee:	89a3      	ldrh	r3, [r4, #12]
 8003af0:	071a      	lsls	r2, r3, #28
 8003af2:	d52f      	bpl.n	8003b54 <__swbuf_r+0x84>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	b36b      	cbz	r3, 8003b54 <__swbuf_r+0x84>
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	6820      	ldr	r0, [r4, #0]
 8003afc:	1ac0      	subs	r0, r0, r3
 8003afe:	6963      	ldr	r3, [r4, #20]
 8003b00:	b2f6      	uxtb	r6, r6
 8003b02:	4283      	cmp	r3, r0
 8003b04:	4637      	mov	r7, r6
 8003b06:	dc04      	bgt.n	8003b12 <__swbuf_r+0x42>
 8003b08:	4621      	mov	r1, r4
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 f92e 	bl	8003d6c <_fflush_r>
 8003b10:	bb30      	cbnz	r0, 8003b60 <__swbuf_r+0x90>
 8003b12:	68a3      	ldr	r3, [r4, #8]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	60a3      	str	r3, [r4, #8]
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	6022      	str	r2, [r4, #0]
 8003b1e:	701e      	strb	r6, [r3, #0]
 8003b20:	6963      	ldr	r3, [r4, #20]
 8003b22:	3001      	adds	r0, #1
 8003b24:	4283      	cmp	r3, r0
 8003b26:	d004      	beq.n	8003b32 <__swbuf_r+0x62>
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	07db      	lsls	r3, r3, #31
 8003b2c:	d506      	bpl.n	8003b3c <__swbuf_r+0x6c>
 8003b2e:	2e0a      	cmp	r6, #10
 8003b30:	d104      	bne.n	8003b3c <__swbuf_r+0x6c>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 f919 	bl	8003d6c <_fflush_r>
 8003b3a:	b988      	cbnz	r0, 8003b60 <__swbuf_r+0x90>
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <__swbuf_r+0x9c>)
 8003b42:	429c      	cmp	r4, r3
 8003b44:	d101      	bne.n	8003b4a <__swbuf_r+0x7a>
 8003b46:	68ac      	ldr	r4, [r5, #8]
 8003b48:	e7cf      	b.n	8003aea <__swbuf_r+0x1a>
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <__swbuf_r+0xa0>)
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	bf08      	it	eq
 8003b50:	68ec      	ldreq	r4, [r5, #12]
 8003b52:	e7ca      	b.n	8003aea <__swbuf_r+0x1a>
 8003b54:	4621      	mov	r1, r4
 8003b56:	4628      	mov	r0, r5
 8003b58:	f000 f80c 	bl	8003b74 <__swsetup_r>
 8003b5c:	2800      	cmp	r0, #0
 8003b5e:	d0cb      	beq.n	8003af8 <__swbuf_r+0x28>
 8003b60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003b64:	e7ea      	b.n	8003b3c <__swbuf_r+0x6c>
 8003b66:	bf00      	nop
 8003b68:	080043e0 	.word	0x080043e0
 8003b6c:	08004400 	.word	0x08004400
 8003b70:	080043c0 	.word	0x080043c0

08003b74 <__swsetup_r>:
 8003b74:	4b32      	ldr	r3, [pc, #200]	; (8003c40 <__swsetup_r+0xcc>)
 8003b76:	b570      	push	{r4, r5, r6, lr}
 8003b78:	681d      	ldr	r5, [r3, #0]
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	b125      	cbz	r5, 8003b8a <__swsetup_r+0x16>
 8003b80:	69ab      	ldr	r3, [r5, #24]
 8003b82:	b913      	cbnz	r3, 8003b8a <__swsetup_r+0x16>
 8003b84:	4628      	mov	r0, r5
 8003b86:	f000 f985 	bl	8003e94 <__sinit>
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	; (8003c44 <__swsetup_r+0xd0>)
 8003b8c:	429c      	cmp	r4, r3
 8003b8e:	d10f      	bne.n	8003bb0 <__swsetup_r+0x3c>
 8003b90:	686c      	ldr	r4, [r5, #4]
 8003b92:	89a3      	ldrh	r3, [r4, #12]
 8003b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b98:	0719      	lsls	r1, r3, #28
 8003b9a:	d42c      	bmi.n	8003bf6 <__swsetup_r+0x82>
 8003b9c:	06dd      	lsls	r5, r3, #27
 8003b9e:	d411      	bmi.n	8003bc4 <__swsetup_r+0x50>
 8003ba0:	2309      	movs	r3, #9
 8003ba2:	6033      	str	r3, [r6, #0]
 8003ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ba8:	81a3      	strh	r3, [r4, #12]
 8003baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bae:	e03e      	b.n	8003c2e <__swsetup_r+0xba>
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <__swsetup_r+0xd4>)
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	d101      	bne.n	8003bba <__swsetup_r+0x46>
 8003bb6:	68ac      	ldr	r4, [r5, #8]
 8003bb8:	e7eb      	b.n	8003b92 <__swsetup_r+0x1e>
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <__swsetup_r+0xd8>)
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	bf08      	it	eq
 8003bc0:	68ec      	ldreq	r4, [r5, #12]
 8003bc2:	e7e6      	b.n	8003b92 <__swsetup_r+0x1e>
 8003bc4:	0758      	lsls	r0, r3, #29
 8003bc6:	d512      	bpl.n	8003bee <__swsetup_r+0x7a>
 8003bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bca:	b141      	cbz	r1, 8003bde <__swsetup_r+0x6a>
 8003bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bd0:	4299      	cmp	r1, r3
 8003bd2:	d002      	beq.n	8003bda <__swsetup_r+0x66>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff fb9d 	bl	8003314 <_free_r>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	2300      	movs	r3, #0
 8003be8:	6063      	str	r3, [r4, #4]
 8003bea:	6923      	ldr	r3, [r4, #16]
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	f043 0308 	orr.w	r3, r3, #8
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	6923      	ldr	r3, [r4, #16]
 8003bf8:	b94b      	cbnz	r3, 8003c0e <__swsetup_r+0x9a>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d003      	beq.n	8003c0e <__swsetup_r+0x9a>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f000 fa09 	bl	8004020 <__smakebuf_r>
 8003c0e:	89a0      	ldrh	r0, [r4, #12]
 8003c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c14:	f010 0301 	ands.w	r3, r0, #1
 8003c18:	d00a      	beq.n	8003c30 <__swsetup_r+0xbc>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60a3      	str	r3, [r4, #8]
 8003c1e:	6963      	ldr	r3, [r4, #20]
 8003c20:	425b      	negs	r3, r3
 8003c22:	61a3      	str	r3, [r4, #24]
 8003c24:	6923      	ldr	r3, [r4, #16]
 8003c26:	b943      	cbnz	r3, 8003c3a <__swsetup_r+0xc6>
 8003c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c2c:	d1ba      	bne.n	8003ba4 <__swsetup_r+0x30>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	0781      	lsls	r1, r0, #30
 8003c32:	bf58      	it	pl
 8003c34:	6963      	ldrpl	r3, [r4, #20]
 8003c36:	60a3      	str	r3, [r4, #8]
 8003c38:	e7f4      	b.n	8003c24 <__swsetup_r+0xb0>
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e7f7      	b.n	8003c2e <__swsetup_r+0xba>
 8003c3e:	bf00      	nop
 8003c40:	20000014 	.word	0x20000014
 8003c44:	080043e0 	.word	0x080043e0
 8003c48:	08004400 	.word	0x08004400
 8003c4c:	080043c0 	.word	0x080043c0

08003c50 <abort>:
 8003c50:	b508      	push	{r3, lr}
 8003c52:	2006      	movs	r0, #6
 8003c54:	f000 fa58 	bl	8004108 <raise>
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f7fc ff4b 	bl	8000af4 <_exit>
	...

08003c60 <__sflush_r>:
 8003c60:	898a      	ldrh	r2, [r1, #12]
 8003c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c66:	4605      	mov	r5, r0
 8003c68:	0710      	lsls	r0, r2, #28
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	d458      	bmi.n	8003d20 <__sflush_r+0xc0>
 8003c6e:	684b      	ldr	r3, [r1, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	dc05      	bgt.n	8003c80 <__sflush_r+0x20>
 8003c74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dc02      	bgt.n	8003c80 <__sflush_r+0x20>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	d0f9      	beq.n	8003c7a <__sflush_r+0x1a>
 8003c86:	2300      	movs	r3, #0
 8003c88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c8c:	682f      	ldr	r7, [r5, #0]
 8003c8e:	602b      	str	r3, [r5, #0]
 8003c90:	d032      	beq.n	8003cf8 <__sflush_r+0x98>
 8003c92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	075a      	lsls	r2, r3, #29
 8003c98:	d505      	bpl.n	8003ca6 <__sflush_r+0x46>
 8003c9a:	6863      	ldr	r3, [r4, #4]
 8003c9c:	1ac0      	subs	r0, r0, r3
 8003c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ca0:	b10b      	cbz	r3, 8003ca6 <__sflush_r+0x46>
 8003ca2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ca4:	1ac0      	subs	r0, r0, r3
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cac:	6a21      	ldr	r1, [r4, #32]
 8003cae:	4628      	mov	r0, r5
 8003cb0:	47b0      	blx	r6
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	d106      	bne.n	8003cc6 <__sflush_r+0x66>
 8003cb8:	6829      	ldr	r1, [r5, #0]
 8003cba:	291d      	cmp	r1, #29
 8003cbc:	d82c      	bhi.n	8003d18 <__sflush_r+0xb8>
 8003cbe:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <__sflush_r+0x108>)
 8003cc0:	40ca      	lsrs	r2, r1
 8003cc2:	07d6      	lsls	r6, r2, #31
 8003cc4:	d528      	bpl.n	8003d18 <__sflush_r+0xb8>
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	6062      	str	r2, [r4, #4]
 8003cca:	04d9      	lsls	r1, r3, #19
 8003ccc:	6922      	ldr	r2, [r4, #16]
 8003cce:	6022      	str	r2, [r4, #0]
 8003cd0:	d504      	bpl.n	8003cdc <__sflush_r+0x7c>
 8003cd2:	1c42      	adds	r2, r0, #1
 8003cd4:	d101      	bne.n	8003cda <__sflush_r+0x7a>
 8003cd6:	682b      	ldr	r3, [r5, #0]
 8003cd8:	b903      	cbnz	r3, 8003cdc <__sflush_r+0x7c>
 8003cda:	6560      	str	r0, [r4, #84]	; 0x54
 8003cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cde:	602f      	str	r7, [r5, #0]
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	d0ca      	beq.n	8003c7a <__sflush_r+0x1a>
 8003ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ce8:	4299      	cmp	r1, r3
 8003cea:	d002      	beq.n	8003cf2 <__sflush_r+0x92>
 8003cec:	4628      	mov	r0, r5
 8003cee:	f7ff fb11 	bl	8003314 <_free_r>
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	6360      	str	r0, [r4, #52]	; 0x34
 8003cf6:	e7c1      	b.n	8003c7c <__sflush_r+0x1c>
 8003cf8:	6a21      	ldr	r1, [r4, #32]
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	47b0      	blx	r6
 8003d00:	1c41      	adds	r1, r0, #1
 8003d02:	d1c7      	bne.n	8003c94 <__sflush_r+0x34>
 8003d04:	682b      	ldr	r3, [r5, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0c4      	beq.n	8003c94 <__sflush_r+0x34>
 8003d0a:	2b1d      	cmp	r3, #29
 8003d0c:	d001      	beq.n	8003d12 <__sflush_r+0xb2>
 8003d0e:	2b16      	cmp	r3, #22
 8003d10:	d101      	bne.n	8003d16 <__sflush_r+0xb6>
 8003d12:	602f      	str	r7, [r5, #0]
 8003d14:	e7b1      	b.n	8003c7a <__sflush_r+0x1a>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1c:	81a3      	strh	r3, [r4, #12]
 8003d1e:	e7ad      	b.n	8003c7c <__sflush_r+0x1c>
 8003d20:	690f      	ldr	r7, [r1, #16]
 8003d22:	2f00      	cmp	r7, #0
 8003d24:	d0a9      	beq.n	8003c7a <__sflush_r+0x1a>
 8003d26:	0793      	lsls	r3, r2, #30
 8003d28:	680e      	ldr	r6, [r1, #0]
 8003d2a:	bf08      	it	eq
 8003d2c:	694b      	ldreq	r3, [r1, #20]
 8003d2e:	600f      	str	r7, [r1, #0]
 8003d30:	bf18      	it	ne
 8003d32:	2300      	movne	r3, #0
 8003d34:	eba6 0807 	sub.w	r8, r6, r7
 8003d38:	608b      	str	r3, [r1, #8]
 8003d3a:	f1b8 0f00 	cmp.w	r8, #0
 8003d3e:	dd9c      	ble.n	8003c7a <__sflush_r+0x1a>
 8003d40:	6a21      	ldr	r1, [r4, #32]
 8003d42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d44:	4643      	mov	r3, r8
 8003d46:	463a      	mov	r2, r7
 8003d48:	4628      	mov	r0, r5
 8003d4a:	47b0      	blx	r6
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	dc06      	bgt.n	8003d5e <__sflush_r+0xfe>
 8003d50:	89a3      	ldrh	r3, [r4, #12]
 8003d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d56:	81a3      	strh	r3, [r4, #12]
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d5c:	e78e      	b.n	8003c7c <__sflush_r+0x1c>
 8003d5e:	4407      	add	r7, r0
 8003d60:	eba8 0800 	sub.w	r8, r8, r0
 8003d64:	e7e9      	b.n	8003d3a <__sflush_r+0xda>
 8003d66:	bf00      	nop
 8003d68:	20400001 	.word	0x20400001

08003d6c <_fflush_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	690b      	ldr	r3, [r1, #16]
 8003d70:	4605      	mov	r5, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	b913      	cbnz	r3, 8003d7c <_fflush_r+0x10>
 8003d76:	2500      	movs	r5, #0
 8003d78:	4628      	mov	r0, r5
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	b118      	cbz	r0, 8003d86 <_fflush_r+0x1a>
 8003d7e:	6983      	ldr	r3, [r0, #24]
 8003d80:	b90b      	cbnz	r3, 8003d86 <_fflush_r+0x1a>
 8003d82:	f000 f887 	bl	8003e94 <__sinit>
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <_fflush_r+0x6c>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d11b      	bne.n	8003dc4 <_fflush_r+0x58>
 8003d8c:	686c      	ldr	r4, [r5, #4]
 8003d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0ef      	beq.n	8003d76 <_fflush_r+0xa>
 8003d96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d98:	07d0      	lsls	r0, r2, #31
 8003d9a:	d404      	bmi.n	8003da6 <_fflush_r+0x3a>
 8003d9c:	0599      	lsls	r1, r3, #22
 8003d9e:	d402      	bmi.n	8003da6 <_fflush_r+0x3a>
 8003da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003da2:	f000 f915 	bl	8003fd0 <__retarget_lock_acquire_recursive>
 8003da6:	4628      	mov	r0, r5
 8003da8:	4621      	mov	r1, r4
 8003daa:	f7ff ff59 	bl	8003c60 <__sflush_r>
 8003dae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003db0:	07da      	lsls	r2, r3, #31
 8003db2:	4605      	mov	r5, r0
 8003db4:	d4e0      	bmi.n	8003d78 <_fflush_r+0xc>
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	059b      	lsls	r3, r3, #22
 8003dba:	d4dd      	bmi.n	8003d78 <_fflush_r+0xc>
 8003dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dbe:	f000 f908 	bl	8003fd2 <__retarget_lock_release_recursive>
 8003dc2:	e7d9      	b.n	8003d78 <_fflush_r+0xc>
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <_fflush_r+0x70>)
 8003dc6:	429c      	cmp	r4, r3
 8003dc8:	d101      	bne.n	8003dce <_fflush_r+0x62>
 8003dca:	68ac      	ldr	r4, [r5, #8]
 8003dcc:	e7df      	b.n	8003d8e <_fflush_r+0x22>
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <_fflush_r+0x74>)
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	bf08      	it	eq
 8003dd4:	68ec      	ldreq	r4, [r5, #12]
 8003dd6:	e7da      	b.n	8003d8e <_fflush_r+0x22>
 8003dd8:	080043e0 	.word	0x080043e0
 8003ddc:	08004400 	.word	0x08004400
 8003de0:	080043c0 	.word	0x080043c0

08003de4 <std>:
 8003de4:	2300      	movs	r3, #0
 8003de6:	b510      	push	{r4, lr}
 8003de8:	4604      	mov	r4, r0
 8003dea:	e9c0 3300 	strd	r3, r3, [r0]
 8003dee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003df2:	6083      	str	r3, [r0, #8]
 8003df4:	8181      	strh	r1, [r0, #12]
 8003df6:	6643      	str	r3, [r0, #100]	; 0x64
 8003df8:	81c2      	strh	r2, [r0, #14]
 8003dfa:	6183      	str	r3, [r0, #24]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	2208      	movs	r2, #8
 8003e00:	305c      	adds	r0, #92	; 0x5c
 8003e02:	f7ff f9af 	bl	8003164 <memset>
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <std+0x38>)
 8003e08:	6263      	str	r3, [r4, #36]	; 0x24
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <std+0x3c>)
 8003e0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e0e:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <std+0x40>)
 8003e10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <std+0x44>)
 8003e14:	6224      	str	r4, [r4, #32]
 8003e16:	6323      	str	r3, [r4, #48]	; 0x30
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08004141 	.word	0x08004141
 8003e20:	08004163 	.word	0x08004163
 8003e24:	0800419b 	.word	0x0800419b
 8003e28:	080041bf 	.word	0x080041bf

08003e2c <_cleanup_r>:
 8003e2c:	4901      	ldr	r1, [pc, #4]	; (8003e34 <_cleanup_r+0x8>)
 8003e2e:	f000 b8af 	b.w	8003f90 <_fwalk_reent>
 8003e32:	bf00      	nop
 8003e34:	08003d6d 	.word	0x08003d6d

08003e38 <__sfmoreglue>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	2268      	movs	r2, #104	; 0x68
 8003e3c:	1e4d      	subs	r5, r1, #1
 8003e3e:	4355      	muls	r5, r2
 8003e40:	460e      	mov	r6, r1
 8003e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e46:	f7ff fad1 	bl	80033ec <_malloc_r>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	b140      	cbz	r0, 8003e60 <__sfmoreglue+0x28>
 8003e4e:	2100      	movs	r1, #0
 8003e50:	e9c0 1600 	strd	r1, r6, [r0]
 8003e54:	300c      	adds	r0, #12
 8003e56:	60a0      	str	r0, [r4, #8]
 8003e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e5c:	f7ff f982 	bl	8003164 <memset>
 8003e60:	4620      	mov	r0, r4
 8003e62:	bd70      	pop	{r4, r5, r6, pc}

08003e64 <__sfp_lock_acquire>:
 8003e64:	4801      	ldr	r0, [pc, #4]	; (8003e6c <__sfp_lock_acquire+0x8>)
 8003e66:	f000 b8b3 	b.w	8003fd0 <__retarget_lock_acquire_recursive>
 8003e6a:	bf00      	nop
 8003e6c:	200001a9 	.word	0x200001a9

08003e70 <__sfp_lock_release>:
 8003e70:	4801      	ldr	r0, [pc, #4]	; (8003e78 <__sfp_lock_release+0x8>)
 8003e72:	f000 b8ae 	b.w	8003fd2 <__retarget_lock_release_recursive>
 8003e76:	bf00      	nop
 8003e78:	200001a9 	.word	0x200001a9

08003e7c <__sinit_lock_acquire>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <__sinit_lock_acquire+0x8>)
 8003e7e:	f000 b8a7 	b.w	8003fd0 <__retarget_lock_acquire_recursive>
 8003e82:	bf00      	nop
 8003e84:	200001aa 	.word	0x200001aa

08003e88 <__sinit_lock_release>:
 8003e88:	4801      	ldr	r0, [pc, #4]	; (8003e90 <__sinit_lock_release+0x8>)
 8003e8a:	f000 b8a2 	b.w	8003fd2 <__retarget_lock_release_recursive>
 8003e8e:	bf00      	nop
 8003e90:	200001aa 	.word	0x200001aa

08003e94 <__sinit>:
 8003e94:	b510      	push	{r4, lr}
 8003e96:	4604      	mov	r4, r0
 8003e98:	f7ff fff0 	bl	8003e7c <__sinit_lock_acquire>
 8003e9c:	69a3      	ldr	r3, [r4, #24]
 8003e9e:	b11b      	cbz	r3, 8003ea8 <__sinit+0x14>
 8003ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea4:	f7ff bff0 	b.w	8003e88 <__sinit_lock_release>
 8003ea8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003eac:	6523      	str	r3, [r4, #80]	; 0x50
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <__sinit+0x68>)
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <__sinit+0x6c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003eb6:	42a3      	cmp	r3, r4
 8003eb8:	bf04      	itt	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	61a3      	streq	r3, [r4, #24]
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f000 f820 	bl	8003f04 <__sfp>
 8003ec4:	6060      	str	r0, [r4, #4]
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 f81c 	bl	8003f04 <__sfp>
 8003ecc:	60a0      	str	r0, [r4, #8]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 f818 	bl	8003f04 <__sfp>
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60e0      	str	r0, [r4, #12]
 8003ed8:	2104      	movs	r1, #4
 8003eda:	6860      	ldr	r0, [r4, #4]
 8003edc:	f7ff ff82 	bl	8003de4 <std>
 8003ee0:	68a0      	ldr	r0, [r4, #8]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	2109      	movs	r1, #9
 8003ee6:	f7ff ff7d 	bl	8003de4 <std>
 8003eea:	68e0      	ldr	r0, [r4, #12]
 8003eec:	2202      	movs	r2, #2
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff ff78 	bl	8003de4 <std>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	61a3      	str	r3, [r4, #24]
 8003ef8:	e7d2      	b.n	8003ea0 <__sinit+0xc>
 8003efa:	bf00      	nop
 8003efc:	080042d8 	.word	0x080042d8
 8003f00:	08003e2d 	.word	0x08003e2d

08003f04 <__sfp>:
 8003f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f06:	4607      	mov	r7, r0
 8003f08:	f7ff ffac 	bl	8003e64 <__sfp_lock_acquire>
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <__sfp+0x84>)
 8003f0e:	681e      	ldr	r6, [r3, #0]
 8003f10:	69b3      	ldr	r3, [r6, #24]
 8003f12:	b913      	cbnz	r3, 8003f1a <__sfp+0x16>
 8003f14:	4630      	mov	r0, r6
 8003f16:	f7ff ffbd 	bl	8003e94 <__sinit>
 8003f1a:	3648      	adds	r6, #72	; 0x48
 8003f1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	d503      	bpl.n	8003f2c <__sfp+0x28>
 8003f24:	6833      	ldr	r3, [r6, #0]
 8003f26:	b30b      	cbz	r3, 8003f6c <__sfp+0x68>
 8003f28:	6836      	ldr	r6, [r6, #0]
 8003f2a:	e7f7      	b.n	8003f1c <__sfp+0x18>
 8003f2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f30:	b9d5      	cbnz	r5, 8003f68 <__sfp+0x64>
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <__sfp+0x88>)
 8003f34:	60e3      	str	r3, [r4, #12]
 8003f36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f3a:	6665      	str	r5, [r4, #100]	; 0x64
 8003f3c:	f000 f847 	bl	8003fce <__retarget_lock_init_recursive>
 8003f40:	f7ff ff96 	bl	8003e70 <__sfp_lock_release>
 8003f44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f4c:	6025      	str	r5, [r4, #0]
 8003f4e:	61a5      	str	r5, [r4, #24]
 8003f50:	2208      	movs	r2, #8
 8003f52:	4629      	mov	r1, r5
 8003f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003f58:	f7ff f904 	bl	8003164 <memset>
 8003f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f64:	4620      	mov	r0, r4
 8003f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f68:	3468      	adds	r4, #104	; 0x68
 8003f6a:	e7d9      	b.n	8003f20 <__sfp+0x1c>
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4638      	mov	r0, r7
 8003f70:	f7ff ff62 	bl	8003e38 <__sfmoreglue>
 8003f74:	4604      	mov	r4, r0
 8003f76:	6030      	str	r0, [r6, #0]
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d1d5      	bne.n	8003f28 <__sfp+0x24>
 8003f7c:	f7ff ff78 	bl	8003e70 <__sfp_lock_release>
 8003f80:	230c      	movs	r3, #12
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	e7ee      	b.n	8003f64 <__sfp+0x60>
 8003f86:	bf00      	nop
 8003f88:	080042d8 	.word	0x080042d8
 8003f8c:	ffff0001 	.word	0xffff0001

08003f90 <_fwalk_reent>:
 8003f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f94:	4606      	mov	r6, r0
 8003f96:	4688      	mov	r8, r1
 8003f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f9c:	2700      	movs	r7, #0
 8003f9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fa2:	f1b9 0901 	subs.w	r9, r9, #1
 8003fa6:	d505      	bpl.n	8003fb4 <_fwalk_reent+0x24>
 8003fa8:	6824      	ldr	r4, [r4, #0]
 8003faa:	2c00      	cmp	r4, #0
 8003fac:	d1f7      	bne.n	8003f9e <_fwalk_reent+0xe>
 8003fae:	4638      	mov	r0, r7
 8003fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fb4:	89ab      	ldrh	r3, [r5, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d907      	bls.n	8003fca <_fwalk_reent+0x3a>
 8003fba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	d003      	beq.n	8003fca <_fwalk_reent+0x3a>
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	47c0      	blx	r8
 8003fc8:	4307      	orrs	r7, r0
 8003fca:	3568      	adds	r5, #104	; 0x68
 8003fcc:	e7e9      	b.n	8003fa2 <_fwalk_reent+0x12>

08003fce <__retarget_lock_init_recursive>:
 8003fce:	4770      	bx	lr

08003fd0 <__retarget_lock_acquire_recursive>:
 8003fd0:	4770      	bx	lr

08003fd2 <__retarget_lock_release_recursive>:
 8003fd2:	4770      	bx	lr

08003fd4 <__swhatbuf_r>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	460e      	mov	r6, r1
 8003fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	b096      	sub	sp, #88	; 0x58
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	da08      	bge.n	8003ff8 <__swhatbuf_r+0x24>
 8003fe6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	061a      	lsls	r2, r3, #24
 8003ff0:	d410      	bmi.n	8004014 <__swhatbuf_r+0x40>
 8003ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ff6:	e00e      	b.n	8004016 <__swhatbuf_r+0x42>
 8003ff8:	466a      	mov	r2, sp
 8003ffa:	f000 f907 	bl	800420c <_fstat_r>
 8003ffe:	2800      	cmp	r0, #0
 8004000:	dbf1      	blt.n	8003fe6 <__swhatbuf_r+0x12>
 8004002:	9a01      	ldr	r2, [sp, #4]
 8004004:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004008:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800400c:	425a      	negs	r2, r3
 800400e:	415a      	adcs	r2, r3
 8004010:	602a      	str	r2, [r5, #0]
 8004012:	e7ee      	b.n	8003ff2 <__swhatbuf_r+0x1e>
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	2000      	movs	r0, #0
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	b016      	add	sp, #88	; 0x58
 800401c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004020 <__smakebuf_r>:
 8004020:	898b      	ldrh	r3, [r1, #12]
 8004022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004024:	079d      	lsls	r5, r3, #30
 8004026:	4606      	mov	r6, r0
 8004028:	460c      	mov	r4, r1
 800402a:	d507      	bpl.n	800403c <__smakebuf_r+0x1c>
 800402c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	2301      	movs	r3, #1
 8004036:	6163      	str	r3, [r4, #20]
 8004038:	b002      	add	sp, #8
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	ab01      	add	r3, sp, #4
 800403e:	466a      	mov	r2, sp
 8004040:	f7ff ffc8 	bl	8003fd4 <__swhatbuf_r>
 8004044:	9900      	ldr	r1, [sp, #0]
 8004046:	4605      	mov	r5, r0
 8004048:	4630      	mov	r0, r6
 800404a:	f7ff f9cf 	bl	80033ec <_malloc_r>
 800404e:	b948      	cbnz	r0, 8004064 <__smakebuf_r+0x44>
 8004050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004054:	059a      	lsls	r2, r3, #22
 8004056:	d4ef      	bmi.n	8004038 <__smakebuf_r+0x18>
 8004058:	f023 0303 	bic.w	r3, r3, #3
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	e7e3      	b.n	800402c <__smakebuf_r+0xc>
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <__smakebuf_r+0x7c>)
 8004066:	62b3      	str	r3, [r6, #40]	; 0x28
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	6020      	str	r0, [r4, #0]
 800406c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004070:	81a3      	strh	r3, [r4, #12]
 8004072:	9b00      	ldr	r3, [sp, #0]
 8004074:	6163      	str	r3, [r4, #20]
 8004076:	9b01      	ldr	r3, [sp, #4]
 8004078:	6120      	str	r0, [r4, #16]
 800407a:	b15b      	cbz	r3, 8004094 <__smakebuf_r+0x74>
 800407c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004080:	4630      	mov	r0, r6
 8004082:	f000 f8d5 	bl	8004230 <_isatty_r>
 8004086:	b128      	cbz	r0, 8004094 <__smakebuf_r+0x74>
 8004088:	89a3      	ldrh	r3, [r4, #12]
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	81a3      	strh	r3, [r4, #12]
 8004094:	89a0      	ldrh	r0, [r4, #12]
 8004096:	4305      	orrs	r5, r0
 8004098:	81a5      	strh	r5, [r4, #12]
 800409a:	e7cd      	b.n	8004038 <__smakebuf_r+0x18>
 800409c:	08003e2d 	.word	0x08003e2d

080040a0 <__malloc_lock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_lock+0x8>)
 80040a2:	f7ff bf95 	b.w	8003fd0 <__retarget_lock_acquire_recursive>
 80040a6:	bf00      	nop
 80040a8:	200001a8 	.word	0x200001a8

080040ac <__malloc_unlock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_unlock+0x8>)
 80040ae:	f7ff bf90 	b.w	8003fd2 <__retarget_lock_release_recursive>
 80040b2:	bf00      	nop
 80040b4:	200001a8 	.word	0x200001a8

080040b8 <_raise_r>:
 80040b8:	291f      	cmp	r1, #31
 80040ba:	b538      	push	{r3, r4, r5, lr}
 80040bc:	4604      	mov	r4, r0
 80040be:	460d      	mov	r5, r1
 80040c0:	d904      	bls.n	80040cc <_raise_r+0x14>
 80040c2:	2316      	movs	r3, #22
 80040c4:	6003      	str	r3, [r0, #0]
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ca:	bd38      	pop	{r3, r4, r5, pc}
 80040cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040ce:	b112      	cbz	r2, 80040d6 <_raise_r+0x1e>
 80040d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80040d4:	b94b      	cbnz	r3, 80040ea <_raise_r+0x32>
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 f830 	bl	800413c <_getpid_r>
 80040dc:	462a      	mov	r2, r5
 80040de:	4601      	mov	r1, r0
 80040e0:	4620      	mov	r0, r4
 80040e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e6:	f000 b817 	b.w	8004118 <_kill_r>
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d00a      	beq.n	8004104 <_raise_r+0x4c>
 80040ee:	1c59      	adds	r1, r3, #1
 80040f0:	d103      	bne.n	80040fa <_raise_r+0x42>
 80040f2:	2316      	movs	r3, #22
 80040f4:	6003      	str	r3, [r0, #0]
 80040f6:	2001      	movs	r0, #1
 80040f8:	e7e7      	b.n	80040ca <_raise_r+0x12>
 80040fa:	2400      	movs	r4, #0
 80040fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004100:	4628      	mov	r0, r5
 8004102:	4798      	blx	r3
 8004104:	2000      	movs	r0, #0
 8004106:	e7e0      	b.n	80040ca <_raise_r+0x12>

08004108 <raise>:
 8004108:	4b02      	ldr	r3, [pc, #8]	; (8004114 <raise+0xc>)
 800410a:	4601      	mov	r1, r0
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	f7ff bfd3 	b.w	80040b8 <_raise_r>
 8004112:	bf00      	nop
 8004114:	20000014 	.word	0x20000014

08004118 <_kill_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d07      	ldr	r5, [pc, #28]	; (8004138 <_kill_r+0x20>)
 800411c:	2300      	movs	r3, #0
 800411e:	4604      	mov	r4, r0
 8004120:	4608      	mov	r0, r1
 8004122:	4611      	mov	r1, r2
 8004124:	602b      	str	r3, [r5, #0]
 8004126:	f7fc fcd5 	bl	8000ad4 <_kill>
 800412a:	1c43      	adds	r3, r0, #1
 800412c:	d102      	bne.n	8004134 <_kill_r+0x1c>
 800412e:	682b      	ldr	r3, [r5, #0]
 8004130:	b103      	cbz	r3, 8004134 <_kill_r+0x1c>
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	bd38      	pop	{r3, r4, r5, pc}
 8004136:	bf00      	nop
 8004138:	200001a4 	.word	0x200001a4

0800413c <_getpid_r>:
 800413c:	f7fc bcc2 	b.w	8000ac4 <_getpid>

08004140 <__sread>:
 8004140:	b510      	push	{r4, lr}
 8004142:	460c      	mov	r4, r1
 8004144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004148:	f000 f894 	bl	8004274 <_read_r>
 800414c:	2800      	cmp	r0, #0
 800414e:	bfab      	itete	ge
 8004150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004152:	89a3      	ldrhlt	r3, [r4, #12]
 8004154:	181b      	addge	r3, r3, r0
 8004156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800415a:	bfac      	ite	ge
 800415c:	6563      	strge	r3, [r4, #84]	; 0x54
 800415e:	81a3      	strhlt	r3, [r4, #12]
 8004160:	bd10      	pop	{r4, pc}

08004162 <__swrite>:
 8004162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	461f      	mov	r7, r3
 8004168:	898b      	ldrh	r3, [r1, #12]
 800416a:	05db      	lsls	r3, r3, #23
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4616      	mov	r6, r2
 8004172:	d505      	bpl.n	8004180 <__swrite+0x1e>
 8004174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004178:	2302      	movs	r3, #2
 800417a:	2200      	movs	r2, #0
 800417c:	f000 f868 	bl	8004250 <_lseek_r>
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	4632      	mov	r2, r6
 800418e:	463b      	mov	r3, r7
 8004190:	4628      	mov	r0, r5
 8004192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004196:	f000 b817 	b.w	80041c8 <_write_r>

0800419a <__sseek>:
 800419a:	b510      	push	{r4, lr}
 800419c:	460c      	mov	r4, r1
 800419e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a2:	f000 f855 	bl	8004250 <_lseek_r>
 80041a6:	1c43      	adds	r3, r0, #1
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	bf15      	itete	ne
 80041ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80041ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041b6:	81a3      	strheq	r3, [r4, #12]
 80041b8:	bf18      	it	ne
 80041ba:	81a3      	strhne	r3, [r4, #12]
 80041bc:	bd10      	pop	{r4, pc}

080041be <__sclose>:
 80041be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c2:	f000 b813 	b.w	80041ec <_close_r>
	...

080041c8 <_write_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4d07      	ldr	r5, [pc, #28]	; (80041e8 <_write_r+0x20>)
 80041cc:	4604      	mov	r4, r0
 80041ce:	4608      	mov	r0, r1
 80041d0:	4611      	mov	r1, r2
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f7fc fcb3 	bl	8000b42 <_write>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d102      	bne.n	80041e6 <_write_r+0x1e>
 80041e0:	682b      	ldr	r3, [r5, #0]
 80041e2:	b103      	cbz	r3, 80041e6 <_write_r+0x1e>
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	bd38      	pop	{r3, r4, r5, pc}
 80041e8:	200001a4 	.word	0x200001a4

080041ec <_close_r>:
 80041ec:	b538      	push	{r3, r4, r5, lr}
 80041ee:	4d06      	ldr	r5, [pc, #24]	; (8004208 <_close_r+0x1c>)
 80041f0:	2300      	movs	r3, #0
 80041f2:	4604      	mov	r4, r0
 80041f4:	4608      	mov	r0, r1
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	f7fc fcbf 	bl	8000b7a <_close>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_close_r+0x1a>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_close_r+0x1a>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	200001a4 	.word	0x200001a4

0800420c <_fstat_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d07      	ldr	r5, [pc, #28]	; (800422c <_fstat_r+0x20>)
 8004210:	2300      	movs	r3, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	f7fc fcba 	bl	8000b92 <_fstat>
 800421e:	1c43      	adds	r3, r0, #1
 8004220:	d102      	bne.n	8004228 <_fstat_r+0x1c>
 8004222:	682b      	ldr	r3, [r5, #0]
 8004224:	b103      	cbz	r3, 8004228 <_fstat_r+0x1c>
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	bd38      	pop	{r3, r4, r5, pc}
 800422a:	bf00      	nop
 800422c:	200001a4 	.word	0x200001a4

08004230 <_isatty_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	4d06      	ldr	r5, [pc, #24]	; (800424c <_isatty_r+0x1c>)
 8004234:	2300      	movs	r3, #0
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	f7fc fcb9 	bl	8000bb2 <_isatty>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d102      	bne.n	800424a <_isatty_r+0x1a>
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	b103      	cbz	r3, 800424a <_isatty_r+0x1a>
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	bd38      	pop	{r3, r4, r5, pc}
 800424c:	200001a4 	.word	0x200001a4

08004250 <_lseek_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d07      	ldr	r5, [pc, #28]	; (8004270 <_lseek_r+0x20>)
 8004254:	4604      	mov	r4, r0
 8004256:	4608      	mov	r0, r1
 8004258:	4611      	mov	r1, r2
 800425a:	2200      	movs	r2, #0
 800425c:	602a      	str	r2, [r5, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	f7fc fcb2 	bl	8000bc8 <_lseek>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_lseek_r+0x1e>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_lseek_r+0x1e>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	200001a4 	.word	0x200001a4

08004274 <_read_r>:
 8004274:	b538      	push	{r3, r4, r5, lr}
 8004276:	4d07      	ldr	r5, [pc, #28]	; (8004294 <_read_r+0x20>)
 8004278:	4604      	mov	r4, r0
 800427a:	4608      	mov	r0, r1
 800427c:	4611      	mov	r1, r2
 800427e:	2200      	movs	r2, #0
 8004280:	602a      	str	r2, [r5, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f7fc fc40 	bl	8000b08 <_read>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d102      	bne.n	8004292 <_read_r+0x1e>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	b103      	cbz	r3, 8004292 <_read_r+0x1e>
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	200001a4 	.word	0x200001a4

08004298 <_gettimeofday>:
 8004298:	4b02      	ldr	r3, [pc, #8]	; (80042a4 <_gettimeofday+0xc>)
 800429a:	2258      	movs	r2, #88	; 0x58
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042a2:	4770      	bx	lr
 80042a4:	200001a4 	.word	0x200001a4

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
