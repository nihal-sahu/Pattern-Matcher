
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ff4  08003ff4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ffc  08003ffc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000007c  08004080  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004080  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad67  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f6  00000000  00000000  0002ae13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002cfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016857  00000000  00000000  0002d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf20  00000000  00000000  00044157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008898b  00000000  00000000  00050077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8a02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  000d8a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000dbca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000dbcc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e7c 	.word	0x08003e7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08003e7c 	.word	0x08003e7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
uint16_t counter = 0;



int main(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0

	//initialize i2c, gpio, and uart peripherals
	HAL_Init();
 800058a:	f000 fcb9 	bl	8000f00 <HAL_Init>
	SystemClock_Config();
 800058e:	f000 f977 	bl	8000880 <SystemClock_Config>
	MX_GPIO_Init();
 8000592:	f000 fa39 	bl	8000a08 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000596:	f000 fa0d 	bl	80009b4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 800059a:	f000 f9dd 	bl	8000958 <MX_I2C1_Init>
	srand(time(0));
 800059e:	2000      	movs	r0, #0
 80005a0:	f002 fc3e 	bl	8002e20 <time>
 80005a4:	4602      	mov	r2, r0
 80005a6:	460b      	mov	r3, r1
 80005a8:	4613      	mov	r3, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fbcc 	bl	8002d48 <srand>

	*sentData = 1;
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <main+0xc8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	sendData();
 80005b8:	f000 f94a 	bl	8000850 <sendData>

	//WAIT FOR STM32 ON-BOARD BUTTON PRESS TO START GAME
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80005bc:	bf00      	nop
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	4823      	ldr	r0, [pc, #140]	; (8000650 <main+0xcc>)
 80005c4:	f000 ff9c 	bl	8001500 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d1f7      	bne.n	80005be <main+0x3a>
	while (1)
	{
		//START PATTERN GENERATION

		//send level to arduino to display on 7 Segment
		*sentData = level;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <main+0xd0>)
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <main+0xc8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	701a      	strb	r2, [r3, #0]
		sendData();
 80005da:	f000 f939 	bl	8000850 <sendData>

		//light LED's and generate pattern
		for (uint16_t i = 0; i < level; ++i)
 80005de:	2300      	movs	r3, #0
 80005e0:	80fb      	strh	r3, [r7, #6]
 80005e2:	e004      	b.n	80005ee <main+0x6a>
		{
			led_pattern_gen();
 80005e4:	f000 f83a 	bl	800065c <led_pattern_gen>
		for (uint16_t i = 0; i < level; ++i)
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	3301      	adds	r3, #1
 80005ec:	80fb      	strh	r3, [r7, #6]
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <main+0xd0>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	88fa      	ldrh	r2, [r7, #6]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3f5      	bcc.n	80005e4 <main+0x60>
		}

		for (uint16_t i = 0; i < level; ++i)
 80005f8:	2300      	movs	r3, #0
 80005fa:	80bb      	strh	r3, [r7, #4]
 80005fc:	e00c      	b.n	8000618 <main+0x94>
		{
			bttn_pattern[i] = button_matching();
 80005fe:	88bc      	ldrh	r4, [r7, #4]
 8000600:	f000 f870 	bl	80006e4 <button_matching>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <main+0xd4>)
 800060a:	551a      	strb	r2, [r3, r4]
			HAL_Delay(250);
 800060c:	20fa      	movs	r0, #250	; 0xfa
 800060e:	f000 fce9 	bl	8000fe4 <HAL_Delay>
		for (uint16_t i = 0; i < level; ++i)
 8000612:	88bb      	ldrh	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	80bb      	strh	r3, [r7, #4]
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <main+0xd0>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	88ba      	ldrh	r2, [r7, #4]
 800061e:	429a      	cmp	r2, r3
 8000620:	d3ed      	bcc.n	80005fe <main+0x7a>
		}

		//if an error was found
		if (!pattern_check())
 8000622:	f000 f89d 	bl	8000760 <pattern_check>
 8000626:	4603      	mov	r3, r0
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d106      	bne.n	8000640 <main+0xbc>
			break;

		//if an error wasn't found
		next_level();
 8000632:	f000 f8bd 	bl	80007b0 <next_level>
		HAL_Delay(1000);
 8000636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063a:	f000 fcd3 	bl	8000fe4 <HAL_Delay>
		*sentData = level;
 800063e:	e7c6      	b.n	80005ce <main+0x4a>
			break;
 8000640:	bf00      	nop
 8000642:	2300      	movs	r3, #0
	}

}
 8000644:	4618      	mov	r0, r3
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	20000000 	.word	0x20000000
 8000650:	40020800 	.word	0x40020800
 8000654:	2000000a 	.word	0x2000000a
 8000658:	200001c8 	.word	0x200001c8

0800065c <led_pattern_gen>:

void led_pattern_gen()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint8_t led = (rand() % (2 - 0 + 1)) + 0;
 8000662:	f002 fb9f 	bl	8002da4 <rand>
 8000666:	4602      	mov	r2, r0
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <led_pattern_gen+0x74>)
 800066a:	fb83 3102 	smull	r3, r1, r3, r2
 800066e:	17d3      	asrs	r3, r2, #31
 8000670:	1ac9      	subs	r1, r1, r3
 8000672:	460b      	mov	r3, r1
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	440b      	add	r3, r1
 8000678:	1ad1      	subs	r1, r2, r3
 800067a:	460b      	mov	r3, r1
 800067c:	71fb      	strb	r3, [r7, #7]

	HAL_Delay(500);
 800067e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000682:	f000 fcaf 	bl	8000fe4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, led_arr[led]);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <led_pattern_gen+0x78>)
 800068a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800068e:	4619      	mov	r1, r3
 8000690:	4811      	ldr	r0, [pc, #68]	; (80006d8 <led_pattern_gen+0x7c>)
 8000692:	f000 ff66 	bl	8001562 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800069a:	f000 fca3 	bl	8000fe4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, led_arr[led]);
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <led_pattern_gen+0x78>)
 80006a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <led_pattern_gen+0x7c>)
 80006aa:	f000 ff5a 	bl	8001562 <HAL_GPIO_TogglePin>

	led_pattern[counter] = led;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <led_pattern_gen+0x80>)
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <led_pattern_gen+0x84>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	5453      	strb	r3, [r2, r1]
	counter++;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <led_pattern_gen+0x80>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <led_pattern_gen+0x80>)
 80006c4:	801a      	strh	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	55555556 	.word	0x55555556
 80006d4:	20000004 	.word	0x20000004
 80006d8:	40020800 	.word	0x40020800
 80006dc:	2000022c 	.word	0x2000022c
 80006e0:	20000164 	.word	0x20000164

080006e4 <button_matching>:

uint8_t button_matching()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 80006e8:	e01d      	b.n	8000726 <button_matching+0x42>
	{
		if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 80006ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ee:	481b      	ldr	r0, [pc, #108]	; (800075c <button_matching+0x78>)
 80006f0:	f000 ff06 	bl	8001500 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <button_matching+0x1a>
		{
			return 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e02b      	b.n	8000756 <button_matching+0x72>
		}
		else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4816      	ldr	r0, [pc, #88]	; (800075c <button_matching+0x78>)
 8000704:	f000 fefc 	bl	8001500 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <button_matching+0x2e>
		{
			return 1;
 800070e:	2301      	movs	r3, #1
 8000710:	e021      	b.n	8000756 <button_matching+0x72>
		}
		else if (!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13))
 8000712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <button_matching+0x78>)
 8000718:	f000 fef2 	bl	8001500 <HAL_GPIO_ReadPin>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d101      	bne.n	8000726 <button_matching+0x42>
		{
			return 2;
 8000722:	2302      	movs	r3, #2
 8000724:	e017      	b.n	8000756 <button_matching+0x72>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15))
 8000726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <button_matching+0x78>)
 800072c:	f000 fee8 	bl	8001500 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d00f      	beq.n	8000756 <button_matching+0x72>
 8000736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <button_matching+0x78>)
 800073c:	f000 fee0 	bl	8001500 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d007      	beq.n	8000756 <button_matching+0x72>
 8000746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <button_matching+0x78>)
 800074c:	f000 fed8 	bl	8001500 <HAL_GPIO_ReadPin>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1c9      	bne.n	80006ea <button_matching+0x6>
		}
	}
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40020400 	.word	0x40020400

08000760 <pattern_check>:

bool pattern_check()
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	for (int i = 0; i < level; ++i)
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	e00e      	b.n	800078a <pattern_check+0x2a>
	{
		if (led_pattern[i] != bttn_pattern[i])
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <pattern_check+0x44>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	781a      	ldrb	r2, [r3, #0]
 8000774:	490c      	ldr	r1, [pc, #48]	; (80007a8 <pattern_check+0x48>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	440b      	add	r3, r1
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	429a      	cmp	r2, r3
 800077e:	d001      	beq.n	8000784 <pattern_check+0x24>
			return false;
 8000780:	2300      	movs	r3, #0
 8000782:	e009      	b.n	8000798 <pattern_check+0x38>
	for (int i = 0; i < level; ++i)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <pattern_check+0x4c>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4293      	cmp	r3, r2
 8000794:	dbea      	blt.n	800076c <pattern_check+0xc>
	}

	return true;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	20000164 	.word	0x20000164
 80007a8:	200001c8 	.word	0x200001c8
 80007ac:	2000000a 	.word	0x2000000a

080007b0 <next_level>:

void next_level()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	//reset user button and led patterns
	for (int i = 0; i < level; ++i)
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e00c      	b.n	80007d6 <next_level+0x26>
	{
		led_pattern[i] = 0;
 80007bc:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <next_level+0x88>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
		bttn_pattern[i] = 0;
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <next_level+0x8c>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < level; ++i)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <next_level+0x90>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4293      	cmp	r3, r2
 80007e0:	dbec      	blt.n	80007bc <next_level+0xc>
	}

	//animation

	for (uint8_t i = 0; i < 6; ++i)
 80007e2:	2300      	movs	r3, #0
 80007e4:	70fb      	strb	r3, [r7, #3]
 80007e6:	e017      	b.n	8000818 <next_level+0x68>
	{
		for (uint8_t j = 0; j < 3; ++j)
 80007e8:	2300      	movs	r3, #0
 80007ea:	70bb      	strb	r3, [r7, #2]
 80007ec:	e00a      	b.n	8000804 <next_level+0x54>
		{
			HAL_GPIO_TogglePin(GPIOC, led_arr[j]);
 80007ee:	78bb      	ldrb	r3, [r7, #2]
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <next_level+0x94>)
 80007f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <next_level+0x98>)
 80007fa:	f000 feb2 	bl	8001562 <HAL_GPIO_TogglePin>
		for (uint8_t j = 0; j < 3; ++j)
 80007fe:	78bb      	ldrb	r3, [r7, #2]
 8000800:	3301      	adds	r3, #1
 8000802:	70bb      	strb	r3, [r7, #2]
 8000804:	78bb      	ldrb	r3, [r7, #2]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d9f1      	bls.n	80007ee <next_level+0x3e>
		}
		HAL_Delay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f000 fbe9 	bl	8000fe4 <HAL_Delay>
	for (uint8_t i = 0; i < 6; ++i)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	3301      	adds	r3, #1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b05      	cmp	r3, #5
 800081c:	d9e4      	bls.n	80007e8 <next_level+0x38>
	}

	level++;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <next_level+0x90>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <next_level+0x90>)
 8000828:	801a      	strh	r2, [r3, #0]
	counter = 0;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <next_level+0x9c>)
 800082c:	2200      	movs	r2, #0
 800082e:	801a      	strh	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000164 	.word	0x20000164
 800083c:	200001c8 	.word	0x200001c8
 8000840:	2000000a 	.word	0x2000000a
 8000844:	20000004 	.word	0x20000004
 8000848:	40020800 	.word	0x40020800
 800084c:	2000022c 	.word	0x2000022c

08000850 <sendData>:

void sendData()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af02      	add	r7, sp, #8
	//wait for i2c data to be sent
	while(HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_ADDRESS, STM32DataBuffer, 1, 100) != HAL_OK);
 8000856:	bf00      	nop
 8000858:	2364      	movs	r3, #100	; 0x64
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	2301      	movs	r3, #1
 800085e:	4a06      	ldr	r2, [pc, #24]	; (8000878 <sendData+0x28>)
 8000860:	2166      	movs	r1, #102	; 0x66
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <sendData+0x2c>)
 8000864:	f000 ffdc 	bl	8001820 <HAL_I2C_Master_Transmit>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f4      	bne.n	8000858 <sendData+0x8>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000130 	.word	0x20000130
 800087c:	20000098 	.word	0x20000098

08000880 <SystemClock_Config>:
	//wait until some i2c data is received by the arduino
	while(HAL_I2C_Master_Receive(&hi2c1, ARDUINO_ADDRESS , ArduinoDataBuffer, 50, 100) != HAL_OK);
}

void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fa52 	bl	8002d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd4>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f4:	2310      	movs	r3, #16
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008fe:	2304      	movs	r3, #4
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000902:	2307      	movs	r3, #7
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fa90 	bl	8001e30 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 f909 	bl	8000b2c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fcf2 	bl	8002320 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000942:	f000 f8f3 	bl	8000b2c <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_I2C1_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000996:	f000 fdff 	bl	8001598 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 f8c4 	bl	8000b2c <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000098 	.word	0x20000098
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART2_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ec:	f001 feb8 	bl	8002760 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f899 	bl	8000b2c <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000ec 	.word	0x200000ec
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b3e      	ldr	r3, [pc, #248]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3d      	ldr	r2, [pc, #244]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a36      	ldr	r2, [pc, #216]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a2f      	ldr	r2, [pc, #188]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_GPIO_Init+0x114>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <MX_GPIO_Init+0x118>)
 8000a94:	f000 fd4c 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000a9e:	4821      	ldr	r0, [pc, #132]	; (8000b24 <MX_GPIO_Init+0x11c>)
 8000aa0:	f000 fd46 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aaa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	481a      	ldr	r0, [pc, #104]	; (8000b24 <MX_GPIO_Init+0x11c>)
 8000abc:	f000 fb9c 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4812      	ldr	r0, [pc, #72]	; (8000b20 <MX_GPIO_Init+0x118>)
 8000ad8:	f000 fb8e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 8000adc:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	480b      	ldr	r0, [pc, #44]	; (8000b24 <MX_GPIO_Init+0x11c>)
 8000af6:	f000 fb7f 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000afa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x120>)
 8000b10:	f000 fb72 	bl	80011f8 <HAL_GPIO_Init>

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020400 	.word	0x40020400

08000b2c <Error_Handler>:

void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop

  __disable_irq();
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b76:	2007      	movs	r0, #7
 8000b78:	f000 fb0a 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_I2C_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bc6:	23c0      	movs	r3, #192	; 0xc0
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <HAL_I2C_MspInit+0x8c>)
 8000be2:	f000 fb09 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_UART_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12b      	bne.n	8000c92 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_UART_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c72:	230c      	movs	r3, #12
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c82:	2307      	movs	r3, #7
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_UART_MspInit+0x8c>)
 8000c8e:	f000 fab3 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f956 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_kill>:

int _kill(int pid, int sig)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d16:	f001 ffe5 	bl	8002ce4 <__errno>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2216      	movs	r2, #22
 8000d1e:	601a      	str	r2, [r3, #0]
	return -1;
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <_exit>:

void _exit (int status)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ffe7 	bl	8000d0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d3e:	e7fe      	b.n	8000d3e <_exit+0x12>

08000d40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e00a      	b.n	8000d68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d52:	f3af 8000 	nop.w
 8000d56:	4601      	mov	r1, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	60ba      	str	r2, [r7, #8]
 8000d5e:	b2ca      	uxtb	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf0      	blt.n	8000d52 <_read+0x12>
	}

return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e009      	b.n	8000da0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf1      	blt.n	8000d8c <_write+0x12>
	}
	return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_close>:

int _close(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dda:	605a      	str	r2, [r3, #4]
	return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_isatty>:

int _isatty(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return 1;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f001 ff4a 	bl	8002ce4 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20018000 	.word	0x20018000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	20000230 	.word	0x20000230
 8000e84:	20000248 	.word	0x20000248

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <SystemInit+0x20>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <SystemInit+0x20>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb2:	490e      	ldr	r1, [pc, #56]	; (8000eec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec8:	4c0b      	ldr	r4, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ed6:	f7ff ffd7 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f001 ff09 	bl	8002cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fb51 	bl	8000584 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ef0:	08004004 	.word	0x08004004
  ldr r2, =_sbss
 8000ef4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ef8:	20000248 	.word	0x20000248

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f04:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_Init+0x40>)
 8000f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_Init+0x40>)
 8000f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x40>)
 8000f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f931 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fe00 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f93b 	bl	80011de <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f80:	f000 f911 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000014 	.word	0x20000014
 8000fa0:	20000010 	.word	0x20000010

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000014 	.word	0x20000014
 8000fc8:	20000234 	.word	0x20000234

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000234 	.word	0x20000234

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000014 	.word	0x20000014

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5c 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e159      	b.n	80014c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8148 	bne.w	80014c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b01      	cmp	r3, #1
 800123c:	d005      	beq.n	800124a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	2b02      	cmp	r3, #2
 8001248:	d130      	bne.n	80012ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68da      	ldr	r2, [r3, #12]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001280:	2201      	movs	r2, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 0201 	and.w	r2, r3, #1
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d017      	beq.n	80012e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d123      	bne.n	800133c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	220f      	movs	r2, #15
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	69b9      	ldr	r1, [r7, #24]
 8001338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a2 	beq.w	80014c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a52      	ldr	r2, [pc, #328]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x202>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a48      	ldr	r2, [pc, #288]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1fe>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a47      	ldr	r2, [pc, #284]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a46      	ldr	r2, [pc, #280]	; (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1f6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a45      	ldr	r2, [pc, #276]	; (80014f8 <HAL_GPIO_Init+0x300>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1f2>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4935      	ldr	r1, [pc, #212]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_GPIO_Init+0x304>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a24      	ldr	r2, [pc, #144]	; (80014fc <HAL_GPIO_Init+0x304>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <HAL_GPIO_Init+0x304>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_GPIO_Init+0x304>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_GPIO_Init+0x304>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f aea2 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800
 80014f4:	40020c00 	.word	0x40020c00
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001574:	887a      	ldrh	r2, [r7, #2]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43d9      	mvns	r1, r3
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e12b      	b.n	8001802 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fae2 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015fc:	f001 f888 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8001600:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a81      	ldr	r2, [pc, #516]	; (800180c <HAL_I2C_Init+0x274>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d807      	bhi.n	800161c <HAL_I2C_Init+0x84>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a80      	ldr	r2, [pc, #512]	; (8001810 <HAL_I2C_Init+0x278>)
 8001610:	4293      	cmp	r3, r2
 8001612:	bf94      	ite	ls
 8001614:	2301      	movls	r3, #1
 8001616:	2300      	movhi	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	e006      	b.n	800162a <HAL_I2C_Init+0x92>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a7d      	ldr	r2, [pc, #500]	; (8001814 <HAL_I2C_Init+0x27c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0e7      	b.n	8001802 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4a78      	ldr	r2, [pc, #480]	; (8001818 <HAL_I2C_Init+0x280>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9b      	lsrs	r3, r3, #18
 800163c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_I2C_Init+0x274>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d802      	bhi.n	800166c <HAL_I2C_Init+0xd4>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3301      	adds	r3, #1
 800166a:	e009      	b.n	8001680 <HAL_I2C_Init+0xe8>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	4a69      	ldr	r2, [pc, #420]	; (800181c <HAL_I2C_Init+0x284>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	3301      	adds	r3, #1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	430b      	orrs	r3, r1
 8001686:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001692:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	495c      	ldr	r1, [pc, #368]	; (800180c <HAL_I2C_Init+0x274>)
 800169c:	428b      	cmp	r3, r1
 800169e:	d819      	bhi.n	80016d4 <HAL_I2C_Init+0x13c>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e59      	subs	r1, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016b4:	400b      	ands	r3, r1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <HAL_I2C_Init+0x138>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1e59      	subs	r1, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ce:	e051      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e04f      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_I2C_Init+0x168>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e012      	b.n	8001726 <HAL_I2C_Init+0x18e>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Init+0x196>
 800172a:	2301      	movs	r3, #1
 800172c:	e022      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <HAL_I2C_Init+0x1bc>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e58      	subs	r0, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6859      	ldr	r1, [r3, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	440b      	add	r3, r1
 8001744:	fbb0 f3f3 	udiv	r3, r0, r3
 8001748:	3301      	adds	r3, #1
 800174a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	e00f      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	0099      	lsls	r1, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	fbb0 f3f3 	udiv	r3, r0, r3
 800176a:	3301      	adds	r3, #1
 800176c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	6809      	ldr	r1, [r1, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6911      	ldr	r1, [r2, #16]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68d2      	ldr	r2, [r2, #12]
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	000186a0 	.word	0x000186a0
 8001810:	001e847f 	.word	0x001e847f
 8001814:	003d08ff 	.word	0x003d08ff
 8001818:	431bde83 	.word	0x431bde83
 800181c:	10624dd3 	.word	0x10624dd3

08001820 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	460b      	mov	r3, r1
 800182e:	817b      	strh	r3, [r7, #10]
 8001830:	4613      	mov	r3, r2
 8001832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fbca 	bl	8000fcc <HAL_GetTick>
 8001838:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b20      	cmp	r3, #32
 8001844:	f040 80e0 	bne.w	8001a08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2319      	movs	r3, #25
 800184e:	2201      	movs	r2, #1
 8001850:	4970      	ldr	r1, [pc, #448]	; (8001a14 <HAL_I2C_Master_Transmit+0x1f4>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f964 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e0d3      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x50>
 800186c:	2302      	movs	r3, #2
 800186e:	e0cc      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d007      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2221      	movs	r2, #33	; 0x21
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2210      	movs	r2, #16
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	893a      	ldrh	r2, [r7, #8]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_I2C_Master_Transmit+0x1f8>)
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f89c 	bl	8001a1c <I2C_MasterRequestWrite>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e08d      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001904:	e066      	b.n	80019d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	6a39      	ldr	r1, [r7, #32]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f9de 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2b04      	cmp	r3, #4
 800191c:	d107      	bne.n	800192e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d11b      	bne.n	80019a8 <HAL_I2C_Master_Transmit+0x188>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	d017      	beq.n	80019a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6a39      	ldr	r1, [r7, #32]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f9ce 	bl	8001d4e <I2C_WaitOnBTFFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e01a      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d194      	bne.n	8001906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	00100002 	.word	0x00100002
 8001a18:	ffff0000 	.word	0xffff0000

08001a1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d006      	beq.n	8001a46 <I2C_MasterRequestWrite+0x2a>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d003      	beq.n	8001a46 <I2C_MasterRequestWrite+0x2a>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a44:	d108      	bne.n	8001a58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e00b      	b.n	8001a70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	2b12      	cmp	r3, #18
 8001a5e:	d107      	bne.n	8001a70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f84f 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a96:	d103      	bne.n	8001aa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e035      	b.n	8001b10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aac:	d108      	bne.n	8001ac0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	e01b      	b.n	8001af8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ac0:	897b      	ldrh	r3, [r7, #10]
 8001ac2:	11db      	asrs	r3, r3, #7
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 0306 	and.w	r3, r3, #6
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f063 030f 	orn	r3, r3, #15
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <I2C_MasterRequestWrite+0xfc>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f875 	bl	8001bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e010      	b.n	8001b10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aee:	897b      	ldrh	r3, [r7, #10]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <I2C_MasterRequestWrite+0x100>)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f865 	bl	8001bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	00010008 	.word	0x00010008
 8001b1c:	00010002 	.word	0x00010002

08001b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b30:	e025      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b38:	d021      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3a:	f7ff fa47 	bl	8000fcc <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d302      	bcc.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d116      	bne.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e023      	b.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10d      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4013      	ands	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	e00c      	b.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d0b6      	beq.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bdc:	e051      	b.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bec:	d123      	bne.n	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e046      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d021      	beq.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7ff f9c5 	bl	8000fcc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d116      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e020      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10c      	bne.n	8001ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	e00b      	b.n	8001cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d18d      	bne.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd8:	e02d      	b.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f878 	bl	8001dd0 <I2C_IsAcknowledgeFailed>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e02d      	b.n	8001d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf0:	d021      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7ff f96b 	bl	8000fcc <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d302      	bcc.n	8001d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d116      	bne.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f043 0220 	orr.w	r2, r3, #32
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e007      	b.n	8001d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d1ca      	bne.n	8001cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d5a:	e02d      	b.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f837 	bl	8001dd0 <I2C_IsAcknowledgeFailed>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e02d      	b.n	8001dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d72:	d021      	beq.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff f92a 	bl	8000fcc <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d302      	bcc.n	8001d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e007      	b.n	8001dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d1ca      	bne.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d11b      	bne.n	8001e20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001df0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e267      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d075      	beq.n	8001f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d00c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d112      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e72:	d10b      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	4b7e      	ldr	r3, [pc, #504]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x108>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d157      	bne.n	8001f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e242      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d106      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x74>
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a75      	ldr	r2, [pc, #468]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xb0>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x98>
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6f      	ldr	r2, [pc, #444]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	4b69      	ldr	r3, [pc, #420]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a68      	ldr	r2, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f870 	bl	8000fcc <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff f86c 	bl	8000fcc <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e207      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	4b5b      	ldr	r3, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xc0>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff f85c 	bl	8000fcc <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff f858 	bl	8000fcc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1f3      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0xe8>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d063      	beq.n	800200e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f46:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d11c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f5e:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d005      	beq.n	8001f82 <HAL_RCC_OscConfig+0x152>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d001      	beq.n	8001f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e1c7      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4937      	ldr	r1, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	e03a      	b.n	800200e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d020      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa0:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCC_OscConfig+0x244>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7ff f811 	bl	8000fcc <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fae:	f7ff f80d 	bl	8000fcc <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1a8      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4925      	ldr	r1, [pc, #148]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCC_OscConfig+0x244>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7fe fff0 	bl	8000fcc <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ff0:	f7fe ffec 	bl	8000fcc <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e187      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d036      	beq.n	8002088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_RCC_OscConfig+0x248>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7fe ffd0 	bl	8000fcc <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002030:	f7fe ffcc 	bl	8000fcc <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e167      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x240>)
 8002044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x200>
 800204e:	e01b      	b.n	8002088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_OscConfig+0x248>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe ffb9 	bl	8000fcc <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	e00e      	b.n	800207c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205e:	f7fe ffb5 	bl	8000fcc <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d907      	bls.n	800207c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e150      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 8002070:	40023800 	.word	0x40023800
 8002074:	42470000 	.word	0x42470000
 8002078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	4b88      	ldr	r3, [pc, #544]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800207e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1ea      	bne.n	800205e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8097 	beq.w	80021c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002096:	2300      	movs	r3, #0
 8002098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209a:	4b81      	ldr	r3, [pc, #516]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	; 0x40
 80020b6:	4b7a      	ldr	r3, [pc, #488]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d118      	bne.n	8002104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020d2:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a73      	ldr	r2, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020de:	f7fe ff75 	bl	8000fcc <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e6:	f7fe ff71 	bl	8000fcc <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e10c      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_OscConfig+0x474>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x2ea>
 800210c:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
 8002118:	e01c      	b.n	8002154 <HAL_RCC_OscConfig+0x324>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x30c>
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a5e      	ldr	r2, [pc, #376]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 0304 	orr.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
 800212e:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6713      	str	r3, [r2, #112]	; 0x70
 800213a:	e00b      	b.n	8002154 <HAL_RCC_OscConfig+0x324>
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	4a54      	ldr	r2, [pc, #336]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800214e:	f023 0304 	bic.w	r3, r3, #4
 8002152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d015      	beq.n	8002188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7fe ff36 	bl	8000fcc <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe ff32 	bl	8000fcc <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0cb      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217a:	4b49      	ldr	r3, [pc, #292]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ee      	beq.n	8002164 <HAL_RCC_OscConfig+0x334>
 8002186:	e014      	b.n	80021b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7fe ff20 	bl	8000fcc <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe ff1c 	bl	8000fcc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0b5      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1ee      	bne.n	8002190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b8:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	4a38      	ldr	r2, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80a1 	beq.w	8002310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ce:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d05c      	beq.n	8002294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d141      	bne.n	8002266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_RCC_OscConfig+0x478>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fef0 	bl	8000fcc <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe feec 	bl	8000fcc <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e087      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	491b      	ldr	r1, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x478>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe fec5 	bl	8000fcc <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe fec1 	bl	8000fcc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e05c      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x416>
 8002264:	e054      	b.n	8002310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0x478>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7fe feae 	bl	8000fcc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe feaa 	bl	8000fcc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e045      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x470>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x444>
 8002292:	e03d      	b.n	8002310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e038      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4ec>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d028      	beq.n	800230c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d121      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11a      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d111      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0cc      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b68      	ldr	r3, [pc, #416]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d90c      	bls.n	800235c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0b8      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d020      	beq.n	80023aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800237e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800238c:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a52      	ldr	r2, [pc, #328]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002398:	4b50      	ldr	r3, [pc, #320]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	494d      	ldr	r1, [pc, #308]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d044      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d119      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e07f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023de:	4b3f      	ldr	r3, [pc, #252]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e067      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	4b37      	ldr	r3, [pc, #220]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f023 0203 	bic.w	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4934      	ldr	r1, [pc, #208]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7fe fddc 	bl	8000fcc <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	e00a      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002418:	f7fe fdd8 	bl	8000fcc <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e04f      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 020c 	and.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1eb      	bne.n	8002418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d20c      	bcs.n	8002468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e032      	b.n	80024ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	4916      	ldr	r1, [pc, #88]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002492:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a6:	f000 f821 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 80024aa:	4602      	mov	r2, r0
 80024ac:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	490a      	ldr	r1, [pc, #40]	; (80024e0 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	5ccb      	ldrb	r3, [r1, r3]
 80024ba:	fa22 f303 	lsr.w	r3, r2, r3
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd3c 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08003e94 	.word	0x08003e94
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	20000010 	.word	0x20000010

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b094      	sub	sp, #80	; 0x50
 80024f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	647b      	str	r3, [r7, #68]	; 0x44
 80024f8:	2300      	movs	r3, #0
 80024fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024fc:	2300      	movs	r3, #0
 80024fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002504:	4b79      	ldr	r3, [pc, #484]	; (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d00d      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x40>
 8002510:	2b08      	cmp	r3, #8
 8002512:	f200 80e1 	bhi.w	80026d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <HAL_RCC_GetSysClockFreq+0x34>
 800251a:	2b04      	cmp	r3, #4
 800251c:	d003      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x3a>
 800251e:	e0db      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002522:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002524:	e0db      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002526:	4b73      	ldr	r3, [pc, #460]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002528:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800252a:	e0d8      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002536:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d063      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002542:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	2200      	movs	r2, #0
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
 800254c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800254e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
 800255a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800255e:	4622      	mov	r2, r4
 8002560:	462b      	mov	r3, r5
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4621      	mov	r1, r4
 8002578:	1a51      	subs	r1, r2, r1
 800257a:	6139      	str	r1, [r7, #16]
 800257c:	4629      	mov	r1, r5
 800257e:	eb63 0301 	sbc.w	r3, r3, r1
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002590:	4659      	mov	r1, fp
 8002592:	018b      	lsls	r3, r1, #6
 8002594:	4651      	mov	r1, sl
 8002596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259a:	4651      	mov	r1, sl
 800259c:	018a      	lsls	r2, r1, #6
 800259e:	4651      	mov	r1, sl
 80025a0:	ebb2 0801 	subs.w	r8, r2, r1
 80025a4:	4659      	mov	r1, fp
 80025a6:	eb63 0901 	sbc.w	r9, r3, r1
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025be:	4690      	mov	r8, r2
 80025c0:	4699      	mov	r9, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	eb18 0303 	adds.w	r3, r8, r3
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	462b      	mov	r3, r5
 80025cc:	eb49 0303 	adc.w	r3, r9, r3
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	f04f 0300 	mov.w	r3, #0
 80025da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025de:	4629      	mov	r1, r5
 80025e0:	024b      	lsls	r3, r1, #9
 80025e2:	4621      	mov	r1, r4
 80025e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025e8:	4621      	mov	r1, r4
 80025ea:	024a      	lsls	r2, r1, #9
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f2:	2200      	movs	r2, #0
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025fc:	f7fd fe40 	bl	8000280 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4613      	mov	r3, r2
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	e058      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260a:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	2200      	movs	r2, #0
 8002612:	4618      	mov	r0, r3
 8002614:	4611      	mov	r1, r2
 8002616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
 8002620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002624:	4642      	mov	r2, r8
 8002626:	464b      	mov	r3, r9
 8002628:	f04f 0000 	mov.w	r0, #0
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	0159      	lsls	r1, r3, #5
 8002632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002636:	0150      	lsls	r0, r2, #5
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4641      	mov	r1, r8
 800263e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002642:	4649      	mov	r1, r9
 8002644:	eb63 0b01 	sbc.w	fp, r3, r1
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800265c:	ebb2 040a 	subs.w	r4, r2, sl
 8002660:	eb63 050b 	sbc.w	r5, r3, fp
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	00eb      	lsls	r3, r5, #3
 800266e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002672:	00e2      	lsls	r2, r4, #3
 8002674:	4614      	mov	r4, r2
 8002676:	461d      	mov	r5, r3
 8002678:	4643      	mov	r3, r8
 800267a:	18e3      	adds	r3, r4, r3
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	464b      	mov	r3, r9
 8002680:	eb45 0303 	adc.w	r3, r5, r3
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002692:	4629      	mov	r1, r5
 8002694:	028b      	lsls	r3, r1, #10
 8002696:	4621      	mov	r1, r4
 8002698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800269c:	4621      	mov	r1, r4
 800269e:	028a      	lsls	r2, r1, #10
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
 80026a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a6:	2200      	movs	r2, #0
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	61fa      	str	r2, [r7, #28]
 80026ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b0:	f7fd fde6 	bl	8000280 <__aeabi_uldivmod>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4613      	mov	r3, r2
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_GetSysClockFreq+0x200>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026d6:	e002      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3750      	adds	r7, #80	; 0x50
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <HAL_RCC_GetHCLKFreq+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2000000c 	.word	0x2000000c

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002714:	f7ff fff0 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0a9b      	lsrs	r3, r3, #10
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800
 8002734:	08003ea4 	.word	0x08003ea4

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800273c:	f7ff ffdc 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4903      	ldr	r1, [pc, #12]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	08003ea4 	.word	0x08003ea4

08002760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e03f      	b.n	80027f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe fa46 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f829 	bl	80027fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002800:	b0c0      	sub	sp, #256	; 0x100
 8002802:	af00      	add	r7, sp, #0
 8002804:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002818:	68d9      	ldr	r1, [r3, #12]
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	ea40 0301 	orr.w	r3, r0, r1
 8002824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	431a      	orrs	r2, r3
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	431a      	orrs	r2, r3
 800283c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002854:	f021 010c 	bic.w	r1, r1, #12
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002862:	430b      	orrs	r3, r1
 8002864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002876:	6999      	ldr	r1, [r3, #24]
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	ea40 0301 	orr.w	r3, r0, r1
 8002882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4b8f      	ldr	r3, [pc, #572]	; (8002ac8 <UART_SetConfig+0x2cc>)
 800288c:	429a      	cmp	r2, r3
 800288e:	d005      	beq.n	800289c <UART_SetConfig+0xa0>
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <UART_SetConfig+0x2d0>)
 8002898:	429a      	cmp	r2, r3
 800289a:	d104      	bne.n	80028a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800289c:	f7ff ff4c 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 80028a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028a4:	e003      	b.n	80028ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028a6:	f7ff ff33 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 80028aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b8:	f040 810c 	bne.w	8002ad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	1891      	adds	r1, r2, r2
 80028d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80028d6:	415b      	adcs	r3, r3
 80028d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028de:	4621      	mov	r1, r4
 80028e0:	eb12 0801 	adds.w	r8, r2, r1
 80028e4:	4629      	mov	r1, r5
 80028e6:	eb43 0901 	adc.w	r9, r3, r1
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028fe:	4690      	mov	r8, r2
 8002900:	4699      	mov	r9, r3
 8002902:	4623      	mov	r3, r4
 8002904:	eb18 0303 	adds.w	r3, r8, r3
 8002908:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800290c:	462b      	mov	r3, r5
 800290e:	eb49 0303 	adc.w	r3, r9, r3
 8002912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002922:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800292a:	460b      	mov	r3, r1
 800292c:	18db      	adds	r3, r3, r3
 800292e:	653b      	str	r3, [r7, #80]	; 0x50
 8002930:	4613      	mov	r3, r2
 8002932:	eb42 0303 	adc.w	r3, r2, r3
 8002936:	657b      	str	r3, [r7, #84]	; 0x54
 8002938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800293c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002940:	f7fd fc9e 	bl	8000280 <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4b61      	ldr	r3, [pc, #388]	; (8002ad0 <UART_SetConfig+0x2d4>)
 800294a:	fba3 2302 	umull	r2, r3, r3, r2
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	011c      	lsls	r4, r3, #4
 8002952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002956:	2200      	movs	r2, #0
 8002958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800295c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002964:	4642      	mov	r2, r8
 8002966:	464b      	mov	r3, r9
 8002968:	1891      	adds	r1, r2, r2
 800296a:	64b9      	str	r1, [r7, #72]	; 0x48
 800296c:	415b      	adcs	r3, r3
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002974:	4641      	mov	r1, r8
 8002976:	eb12 0a01 	adds.w	sl, r2, r1
 800297a:	4649      	mov	r1, r9
 800297c:	eb43 0b01 	adc.w	fp, r3, r1
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800298c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002994:	4692      	mov	sl, r2
 8002996:	469b      	mov	fp, r3
 8002998:	4643      	mov	r3, r8
 800299a:	eb1a 0303 	adds.w	r3, sl, r3
 800299e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029a2:	464b      	mov	r3, r9
 80029a4:	eb4b 0303 	adc.w	r3, fp, r3
 80029a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029c0:	460b      	mov	r3, r1
 80029c2:	18db      	adds	r3, r3, r3
 80029c4:	643b      	str	r3, [r7, #64]	; 0x40
 80029c6:	4613      	mov	r3, r2
 80029c8:	eb42 0303 	adc.w	r3, r2, r3
 80029cc:	647b      	str	r3, [r7, #68]	; 0x44
 80029ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029d6:	f7fd fc53 	bl	8000280 <__aeabi_uldivmod>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4611      	mov	r1, r2
 80029e0:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <UART_SetConfig+0x2d4>)
 80029e2:	fba3 2301 	umull	r2, r3, r3, r1
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2264      	movs	r2, #100	; 0x64
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	1acb      	subs	r3, r1, r3
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <UART_SetConfig+0x2d4>)
 80029f8:	fba3 2302 	umull	r2, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a04:	441c      	add	r4, r3
 8002a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a18:	4642      	mov	r2, r8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	1891      	adds	r1, r2, r2
 8002a1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a20:	415b      	adcs	r3, r3
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a28:	4641      	mov	r1, r8
 8002a2a:	1851      	adds	r1, r2, r1
 8002a2c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a2e:	4649      	mov	r1, r9
 8002a30:	414b      	adcs	r3, r1
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a40:	4659      	mov	r1, fp
 8002a42:	00cb      	lsls	r3, r1, #3
 8002a44:	4651      	mov	r1, sl
 8002a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a4a:	4651      	mov	r1, sl
 8002a4c:	00ca      	lsls	r2, r1, #3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	4642      	mov	r2, r8
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a5c:	464b      	mov	r3, r9
 8002a5e:	460a      	mov	r2, r1
 8002a60:	eb42 0303 	adc.w	r3, r2, r3
 8002a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	18db      	adds	r3, r3, r3
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a82:	4613      	mov	r3, r2
 8002a84:	eb42 0303 	adc.w	r3, r2, r3
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a92:	f7fd fbf5 	bl	8000280 <__aeabi_uldivmod>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <UART_SetConfig+0x2d4>)
 8002a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	2164      	movs	r1, #100	; 0x64
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	3332      	adds	r3, #50	; 0x32
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <UART_SetConfig+0x2d4>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	f003 0207 	and.w	r2, r3, #7
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4422      	add	r2, r4
 8002ac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ac4:	e105      	b.n	8002cd2 <UART_SetConfig+0x4d6>
 8002ac6:	bf00      	nop
 8002ac8:	40011000 	.word	0x40011000
 8002acc:	40011400 	.word	0x40011400
 8002ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ade:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ae6:	4642      	mov	r2, r8
 8002ae8:	464b      	mov	r3, r9
 8002aea:	1891      	adds	r1, r2, r2
 8002aec:	6239      	str	r1, [r7, #32]
 8002aee:	415b      	adcs	r3, r3
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
 8002af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002af6:	4641      	mov	r1, r8
 8002af8:	1854      	adds	r4, r2, r1
 8002afa:	4649      	mov	r1, r9
 8002afc:	eb43 0501 	adc.w	r5, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	00eb      	lsls	r3, r5, #3
 8002b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b0e:	00e2      	lsls	r2, r4, #3
 8002b10:	4614      	mov	r4, r2
 8002b12:	461d      	mov	r5, r3
 8002b14:	4643      	mov	r3, r8
 8002b16:	18e3      	adds	r3, r4, r3
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	eb45 0303 	adc.w	r3, r5, r3
 8002b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b42:	4629      	mov	r1, r5
 8002b44:	008b      	lsls	r3, r1, #2
 8002b46:	4621      	mov	r1, r4
 8002b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	008a      	lsls	r2, r1, #2
 8002b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b54:	f7fd fb94 	bl	8000280 <__aeabi_uldivmod>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4b60      	ldr	r3, [pc, #384]	; (8002ce0 <UART_SetConfig+0x4e4>)
 8002b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	011c      	lsls	r4, r3, #4
 8002b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	1891      	adds	r1, r2, r2
 8002b7e:	61b9      	str	r1, [r7, #24]
 8002b80:	415b      	adcs	r3, r3
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b88:	4641      	mov	r1, r8
 8002b8a:	1851      	adds	r1, r2, r1
 8002b8c:	6139      	str	r1, [r7, #16]
 8002b8e:	4649      	mov	r1, r9
 8002b90:	414b      	adcs	r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	00cb      	lsls	r3, r1, #3
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002baa:	4651      	mov	r1, sl
 8002bac:	00ca      	lsls	r2, r1, #3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	460a      	mov	r2, r1
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002be0:	4649      	mov	r1, r9
 8002be2:	008b      	lsls	r3, r1, #2
 8002be4:	4641      	mov	r1, r8
 8002be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bea:	4641      	mov	r1, r8
 8002bec:	008a      	lsls	r2, r1, #2
 8002bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bf2:	f7fd fb45 	bl	8000280 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <UART_SetConfig+0x4e4>)
 8002bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	2164      	movs	r1, #100	; 0x64
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	3332      	adds	r3, #50	; 0x32
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <UART_SetConfig+0x4e4>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1a:	441c      	add	r4, r3
 8002c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c20:	2200      	movs	r2, #0
 8002c22:	673b      	str	r3, [r7, #112]	; 0x70
 8002c24:	677a      	str	r2, [r7, #116]	; 0x74
 8002c26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	1891      	adds	r1, r2, r2
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	415b      	adcs	r3, r3
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	1851      	adds	r1, r2, r1
 8002c3e:	6039      	str	r1, [r7, #0]
 8002c40:	4649      	mov	r1, r9
 8002c42:	414b      	adcs	r3, r1
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c52:	4659      	mov	r1, fp
 8002c54:	00cb      	lsls	r3, r1, #3
 8002c56:	4651      	mov	r1, sl
 8002c58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c5c:	4651      	mov	r1, sl
 8002c5e:	00ca      	lsls	r2, r1, #3
 8002c60:	4610      	mov	r0, r2
 8002c62:	4619      	mov	r1, r3
 8002c64:	4603      	mov	r3, r0
 8002c66:	4642      	mov	r2, r8
 8002c68:	189b      	adds	r3, r3, r2
 8002c6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	460a      	mov	r2, r1
 8002c70:	eb42 0303 	adc.w	r3, r2, r3
 8002c74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c80:	667a      	str	r2, [r7, #100]	; 0x64
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c8e:	4649      	mov	r1, r9
 8002c90:	008b      	lsls	r3, r1, #2
 8002c92:	4641      	mov	r1, r8
 8002c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c98:	4641      	mov	r1, r8
 8002c9a:	008a      	lsls	r2, r1, #2
 8002c9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ca0:	f7fd faee 	bl	8000280 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <UART_SetConfig+0x4e4>)
 8002caa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2164      	movs	r1, #100	; 0x64
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	3332      	adds	r3, #50	; 0x32
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <UART_SetConfig+0x4e4>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4422      	add	r2, r4
 8002cd0:	609a      	str	r2, [r3, #8]
}
 8002cd2:	bf00      	nop
 8002cd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cde:	bf00      	nop
 8002ce0:	51eb851f 	.word	0x51eb851f

08002ce4 <__errno>:
 8002ce4:	4b01      	ldr	r3, [pc, #4]	; (8002cec <__errno+0x8>)
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000018 	.word	0x20000018

08002cf0 <__libc_init_array>:
 8002cf0:	b570      	push	{r4, r5, r6, lr}
 8002cf2:	4d0d      	ldr	r5, [pc, #52]	; (8002d28 <__libc_init_array+0x38>)
 8002cf4:	4c0d      	ldr	r4, [pc, #52]	; (8002d2c <__libc_init_array+0x3c>)
 8002cf6:	1b64      	subs	r4, r4, r5
 8002cf8:	10a4      	asrs	r4, r4, #2
 8002cfa:	2600      	movs	r6, #0
 8002cfc:	42a6      	cmp	r6, r4
 8002cfe:	d109      	bne.n	8002d14 <__libc_init_array+0x24>
 8002d00:	4d0b      	ldr	r5, [pc, #44]	; (8002d30 <__libc_init_array+0x40>)
 8002d02:	4c0c      	ldr	r4, [pc, #48]	; (8002d34 <__libc_init_array+0x44>)
 8002d04:	f001 f8ba 	bl	8003e7c <_init>
 8002d08:	1b64      	subs	r4, r4, r5
 8002d0a:	10a4      	asrs	r4, r4, #2
 8002d0c:	2600      	movs	r6, #0
 8002d0e:	42a6      	cmp	r6, r4
 8002d10:	d105      	bne.n	8002d1e <__libc_init_array+0x2e>
 8002d12:	bd70      	pop	{r4, r5, r6, pc}
 8002d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d18:	4798      	blx	r3
 8002d1a:	3601      	adds	r6, #1
 8002d1c:	e7ee      	b.n	8002cfc <__libc_init_array+0xc>
 8002d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d22:	4798      	blx	r3
 8002d24:	3601      	adds	r6, #1
 8002d26:	e7f2      	b.n	8002d0e <__libc_init_array+0x1e>
 8002d28:	08003ffc 	.word	0x08003ffc
 8002d2c:	08003ffc 	.word	0x08003ffc
 8002d30:	08003ffc 	.word	0x08003ffc
 8002d34:	08004000 	.word	0x08004000

08002d38 <memset>:
 8002d38:	4402      	add	r2, r0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <memset+0xa>
 8002d40:	4770      	bx	lr
 8002d42:	f803 1b01 	strb.w	r1, [r3], #1
 8002d46:	e7f9      	b.n	8002d3c <memset+0x4>

08002d48 <srand>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <srand+0x44>)
 8002d4c:	681d      	ldr	r5, [r3, #0]
 8002d4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d50:	4604      	mov	r4, r0
 8002d52:	b9b3      	cbnz	r3, 8002d82 <srand+0x3a>
 8002d54:	2018      	movs	r0, #24
 8002d56:	f000 f8bf 	bl	8002ed8 <malloc>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	63a8      	str	r0, [r5, #56]	; 0x38
 8002d5e:	b920      	cbnz	r0, 8002d6a <srand+0x22>
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <srand+0x48>)
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <srand+0x4c>)
 8002d64:	2142      	movs	r1, #66	; 0x42
 8002d66:	f000 f875 	bl	8002e54 <__assert_func>
 8002d6a:	490b      	ldr	r1, [pc, #44]	; (8002d98 <srand+0x50>)
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <srand+0x54>)
 8002d6e:	e9c0 1300 	strd	r1, r3, [r0]
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <srand+0x58>)
 8002d74:	6083      	str	r3, [r0, #8]
 8002d76:	230b      	movs	r3, #11
 8002d78:	8183      	strh	r3, [r0, #12]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002d82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002d84:	2200      	movs	r2, #0
 8002d86:	611c      	str	r4, [r3, #16]
 8002d88:	615a      	str	r2, [r3, #20]
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000018 	.word	0x20000018
 8002d90:	08003eb0 	.word	0x08003eb0
 8002d94:	08003ec7 	.word	0x08003ec7
 8002d98:	abcd330e 	.word	0xabcd330e
 8002d9c:	e66d1234 	.word	0xe66d1234
 8002da0:	0005deec 	.word	0x0005deec

08002da4 <rand>:
 8002da4:	4b16      	ldr	r3, [pc, #88]	; (8002e00 <rand+0x5c>)
 8002da6:	b510      	push	{r4, lr}
 8002da8:	681c      	ldr	r4, [r3, #0]
 8002daa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dac:	b9b3      	cbnz	r3, 8002ddc <rand+0x38>
 8002dae:	2018      	movs	r0, #24
 8002db0:	f000 f892 	bl	8002ed8 <malloc>
 8002db4:	63a0      	str	r0, [r4, #56]	; 0x38
 8002db6:	b928      	cbnz	r0, 8002dc4 <rand+0x20>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <rand+0x60>)
 8002dbc:	4812      	ldr	r0, [pc, #72]	; (8002e08 <rand+0x64>)
 8002dbe:	214e      	movs	r1, #78	; 0x4e
 8002dc0:	f000 f848 	bl	8002e54 <__assert_func>
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <rand+0x68>)
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <rand+0x6c>)
 8002dc8:	e9c0 2300 	strd	r2, r3, [r0]
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <rand+0x70>)
 8002dce:	6083      	str	r3, [r0, #8]
 8002dd0:	230b      	movs	r3, #11
 8002dd2:	8183      	strh	r3, [r0, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002ddc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <rand+0x74>)
 8002de0:	6920      	ldr	r0, [r4, #16]
 8002de2:	6963      	ldr	r3, [r4, #20]
 8002de4:	490d      	ldr	r1, [pc, #52]	; (8002e1c <rand+0x78>)
 8002de6:	4342      	muls	r2, r0
 8002de8:	fb01 2203 	mla	r2, r1, r3, r2
 8002dec:	fba0 0101 	umull	r0, r1, r0, r1
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	eb42 0001 	adc.w	r0, r2, r1
 8002df6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002dfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002dfe:	bd10      	pop	{r4, pc}
 8002e00:	20000018 	.word	0x20000018
 8002e04:	08003eb0 	.word	0x08003eb0
 8002e08:	08003ec7 	.word	0x08003ec7
 8002e0c:	abcd330e 	.word	0xabcd330e
 8002e10:	e66d1234 	.word	0xe66d1234
 8002e14:	0005deec 	.word	0x0005deec
 8002e18:	5851f42d 	.word	0x5851f42d
 8002e1c:	4c957f2d 	.word	0x4c957f2d

08002e20 <time>:
 8002e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <time+0x30>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	4669      	mov	r1, sp
 8002e28:	4604      	mov	r4, r0
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f000 f842 	bl	8002eb4 <_gettimeofday_r>
 8002e30:	2800      	cmp	r0, #0
 8002e32:	bfbe      	ittt	lt
 8002e34:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002e38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e3c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002e40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e44:	b10c      	cbz	r4, 8002e4a <time+0x2a>
 8002e46:	e9c4 0100 	strd	r0, r1, [r4]
 8002e4a:	b004      	add	sp, #16
 8002e4c:	bd10      	pop	{r4, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000018 	.word	0x20000018

08002e54 <__assert_func>:
 8002e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e56:	4614      	mov	r4, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <__assert_func+0x2c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4605      	mov	r5, r0
 8002e60:	68d8      	ldr	r0, [r3, #12]
 8002e62:	b14c      	cbz	r4, 8002e78 <__assert_func+0x24>
 8002e64:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <__assert_func+0x30>)
 8002e66:	9100      	str	r1, [sp, #0]
 8002e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e6c:	4906      	ldr	r1, [pc, #24]	; (8002e88 <__assert_func+0x34>)
 8002e6e:	462b      	mov	r3, r5
 8002e70:	f000 f80e 	bl	8002e90 <fiprintf>
 8002e74:	f000 fcd6 	bl	8003824 <abort>
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <__assert_func+0x38>)
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	e7f3      	b.n	8002e66 <__assert_func+0x12>
 8002e7e:	bf00      	nop
 8002e80:	20000018 	.word	0x20000018
 8002e84:	08003f22 	.word	0x08003f22
 8002e88:	08003f2f 	.word	0x08003f2f
 8002e8c:	08003f5d 	.word	0x08003f5d

08002e90 <fiprintf>:
 8002e90:	b40e      	push	{r1, r2, r3}
 8002e92:	b503      	push	{r0, r1, lr}
 8002e94:	4601      	mov	r1, r0
 8002e96:	ab03      	add	r3, sp, #12
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <fiprintf+0x20>)
 8002e9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e9e:	6800      	ldr	r0, [r0, #0]
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	f000 f92b 	bl	80030fc <_vfiprintf_r>
 8002ea6:	b002      	add	sp, #8
 8002ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002eac:	b003      	add	sp, #12
 8002eae:	4770      	bx	lr
 8002eb0:	20000018 	.word	0x20000018

08002eb4 <_gettimeofday_r>:
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	4d07      	ldr	r5, [pc, #28]	; (8002ed4 <_gettimeofday_r+0x20>)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	4604      	mov	r4, r0
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	602b      	str	r3, [r5, #0]
 8002ec2:	f000 ffd3 	bl	8003e6c <_gettimeofday>
 8002ec6:	1c43      	adds	r3, r0, #1
 8002ec8:	d102      	bne.n	8002ed0 <_gettimeofday_r+0x1c>
 8002eca:	682b      	ldr	r3, [r5, #0]
 8002ecc:	b103      	cbz	r3, 8002ed0 <_gettimeofday_r+0x1c>
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	bd38      	pop	{r3, r4, r5, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000240 	.word	0x20000240

08002ed8 <malloc>:
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <malloc+0xc>)
 8002eda:	4601      	mov	r1, r0
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f000 b86f 	b.w	8002fc0 <_malloc_r>
 8002ee2:	bf00      	nop
 8002ee4:	20000018 	.word	0x20000018

08002ee8 <_free_r>:
 8002ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eea:	2900      	cmp	r1, #0
 8002eec:	d044      	beq.n	8002f78 <_free_r+0x90>
 8002eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ef2:	9001      	str	r0, [sp, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8002efa:	bfb8      	it	lt
 8002efc:	18e4      	addlt	r4, r4, r3
 8002efe:	f000 feb9 	bl	8003c74 <__malloc_lock>
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <_free_r+0x94>)
 8002f04:	9801      	ldr	r0, [sp, #4]
 8002f06:	6813      	ldr	r3, [r2, #0]
 8002f08:	b933      	cbnz	r3, 8002f18 <_free_r+0x30>
 8002f0a:	6063      	str	r3, [r4, #4]
 8002f0c:	6014      	str	r4, [r2, #0]
 8002f0e:	b003      	add	sp, #12
 8002f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f14:	f000 beb4 	b.w	8003c80 <__malloc_unlock>
 8002f18:	42a3      	cmp	r3, r4
 8002f1a:	d908      	bls.n	8002f2e <_free_r+0x46>
 8002f1c:	6825      	ldr	r5, [r4, #0]
 8002f1e:	1961      	adds	r1, r4, r5
 8002f20:	428b      	cmp	r3, r1
 8002f22:	bf01      	itttt	eq
 8002f24:	6819      	ldreq	r1, [r3, #0]
 8002f26:	685b      	ldreq	r3, [r3, #4]
 8002f28:	1949      	addeq	r1, r1, r5
 8002f2a:	6021      	streq	r1, [r4, #0]
 8002f2c:	e7ed      	b.n	8002f0a <_free_r+0x22>
 8002f2e:	461a      	mov	r2, r3
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b10b      	cbz	r3, 8002f38 <_free_r+0x50>
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	d9fa      	bls.n	8002f2e <_free_r+0x46>
 8002f38:	6811      	ldr	r1, [r2, #0]
 8002f3a:	1855      	adds	r5, r2, r1
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d10b      	bne.n	8002f58 <_free_r+0x70>
 8002f40:	6824      	ldr	r4, [r4, #0]
 8002f42:	4421      	add	r1, r4
 8002f44:	1854      	adds	r4, r2, r1
 8002f46:	42a3      	cmp	r3, r4
 8002f48:	6011      	str	r1, [r2, #0]
 8002f4a:	d1e0      	bne.n	8002f0e <_free_r+0x26>
 8002f4c:	681c      	ldr	r4, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	4421      	add	r1, r4
 8002f54:	6011      	str	r1, [r2, #0]
 8002f56:	e7da      	b.n	8002f0e <_free_r+0x26>
 8002f58:	d902      	bls.n	8002f60 <_free_r+0x78>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	6003      	str	r3, [r0, #0]
 8002f5e:	e7d6      	b.n	8002f0e <_free_r+0x26>
 8002f60:	6825      	ldr	r5, [r4, #0]
 8002f62:	1961      	adds	r1, r4, r5
 8002f64:	428b      	cmp	r3, r1
 8002f66:	bf04      	itt	eq
 8002f68:	6819      	ldreq	r1, [r3, #0]
 8002f6a:	685b      	ldreq	r3, [r3, #4]
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	bf04      	itt	eq
 8002f70:	1949      	addeq	r1, r1, r5
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6054      	str	r4, [r2, #4]
 8002f76:	e7ca      	b.n	8002f0e <_free_r+0x26>
 8002f78:	b003      	add	sp, #12
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	20000238 	.word	0x20000238

08002f80 <sbrk_aligned>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4e0e      	ldr	r6, [pc, #56]	; (8002fbc <sbrk_aligned+0x3c>)
 8002f84:	460c      	mov	r4, r1
 8002f86:	6831      	ldr	r1, [r6, #0]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b911      	cbnz	r1, 8002f92 <sbrk_aligned+0x12>
 8002f8c:	f000 fb7a 	bl	8003684 <_sbrk_r>
 8002f90:	6030      	str	r0, [r6, #0]
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fb75 	bl	8003684 <_sbrk_r>
 8002f9a:	1c43      	adds	r3, r0, #1
 8002f9c:	d00a      	beq.n	8002fb4 <sbrk_aligned+0x34>
 8002f9e:	1cc4      	adds	r4, r0, #3
 8002fa0:	f024 0403 	bic.w	r4, r4, #3
 8002fa4:	42a0      	cmp	r0, r4
 8002fa6:	d007      	beq.n	8002fb8 <sbrk_aligned+0x38>
 8002fa8:	1a21      	subs	r1, r4, r0
 8002faa:	4628      	mov	r0, r5
 8002fac:	f000 fb6a 	bl	8003684 <_sbrk_r>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	d101      	bne.n	8002fb8 <sbrk_aligned+0x38>
 8002fb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	2000023c 	.word	0x2000023c

08002fc0 <_malloc_r>:
 8002fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fc4:	1ccd      	adds	r5, r1, #3
 8002fc6:	f025 0503 	bic.w	r5, r5, #3
 8002fca:	3508      	adds	r5, #8
 8002fcc:	2d0c      	cmp	r5, #12
 8002fce:	bf38      	it	cc
 8002fd0:	250c      	movcc	r5, #12
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	db01      	blt.n	8002fdc <_malloc_r+0x1c>
 8002fd8:	42a9      	cmp	r1, r5
 8002fda:	d905      	bls.n	8002fe8 <_malloc_r+0x28>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fe8:	4e2e      	ldr	r6, [pc, #184]	; (80030a4 <_malloc_r+0xe4>)
 8002fea:	f000 fe43 	bl	8003c74 <__malloc_lock>
 8002fee:	6833      	ldr	r3, [r6, #0]
 8002ff0:	461c      	mov	r4, r3
 8002ff2:	bb34      	cbnz	r4, 8003042 <_malloc_r+0x82>
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	f7ff ffc2 	bl	8002f80 <sbrk_aligned>
 8002ffc:	1c43      	adds	r3, r0, #1
 8002ffe:	4604      	mov	r4, r0
 8003000:	d14d      	bne.n	800309e <_malloc_r+0xde>
 8003002:	6834      	ldr	r4, [r6, #0]
 8003004:	4626      	mov	r6, r4
 8003006:	2e00      	cmp	r6, #0
 8003008:	d140      	bne.n	800308c <_malloc_r+0xcc>
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	4631      	mov	r1, r6
 800300e:	4638      	mov	r0, r7
 8003010:	eb04 0803 	add.w	r8, r4, r3
 8003014:	f000 fb36 	bl	8003684 <_sbrk_r>
 8003018:	4580      	cmp	r8, r0
 800301a:	d13a      	bne.n	8003092 <_malloc_r+0xd2>
 800301c:	6821      	ldr	r1, [r4, #0]
 800301e:	3503      	adds	r5, #3
 8003020:	1a6d      	subs	r5, r5, r1
 8003022:	f025 0503 	bic.w	r5, r5, #3
 8003026:	3508      	adds	r5, #8
 8003028:	2d0c      	cmp	r5, #12
 800302a:	bf38      	it	cc
 800302c:	250c      	movcc	r5, #12
 800302e:	4629      	mov	r1, r5
 8003030:	4638      	mov	r0, r7
 8003032:	f7ff ffa5 	bl	8002f80 <sbrk_aligned>
 8003036:	3001      	adds	r0, #1
 8003038:	d02b      	beq.n	8003092 <_malloc_r+0xd2>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	442b      	add	r3, r5
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	e00e      	b.n	8003060 <_malloc_r+0xa0>
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	1b52      	subs	r2, r2, r5
 8003046:	d41e      	bmi.n	8003086 <_malloc_r+0xc6>
 8003048:	2a0b      	cmp	r2, #11
 800304a:	d916      	bls.n	800307a <_malloc_r+0xba>
 800304c:	1961      	adds	r1, r4, r5
 800304e:	42a3      	cmp	r3, r4
 8003050:	6025      	str	r5, [r4, #0]
 8003052:	bf18      	it	ne
 8003054:	6059      	strne	r1, [r3, #4]
 8003056:	6863      	ldr	r3, [r4, #4]
 8003058:	bf08      	it	eq
 800305a:	6031      	streq	r1, [r6, #0]
 800305c:	5162      	str	r2, [r4, r5]
 800305e:	604b      	str	r3, [r1, #4]
 8003060:	4638      	mov	r0, r7
 8003062:	f104 060b 	add.w	r6, r4, #11
 8003066:	f000 fe0b 	bl	8003c80 <__malloc_unlock>
 800306a:	f026 0607 	bic.w	r6, r6, #7
 800306e:	1d23      	adds	r3, r4, #4
 8003070:	1af2      	subs	r2, r6, r3
 8003072:	d0b6      	beq.n	8002fe2 <_malloc_r+0x22>
 8003074:	1b9b      	subs	r3, r3, r6
 8003076:	50a3      	str	r3, [r4, r2]
 8003078:	e7b3      	b.n	8002fe2 <_malloc_r+0x22>
 800307a:	6862      	ldr	r2, [r4, #4]
 800307c:	42a3      	cmp	r3, r4
 800307e:	bf0c      	ite	eq
 8003080:	6032      	streq	r2, [r6, #0]
 8003082:	605a      	strne	r2, [r3, #4]
 8003084:	e7ec      	b.n	8003060 <_malloc_r+0xa0>
 8003086:	4623      	mov	r3, r4
 8003088:	6864      	ldr	r4, [r4, #4]
 800308a:	e7b2      	b.n	8002ff2 <_malloc_r+0x32>
 800308c:	4634      	mov	r4, r6
 800308e:	6876      	ldr	r6, [r6, #4]
 8003090:	e7b9      	b.n	8003006 <_malloc_r+0x46>
 8003092:	230c      	movs	r3, #12
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	4638      	mov	r0, r7
 8003098:	f000 fdf2 	bl	8003c80 <__malloc_unlock>
 800309c:	e7a1      	b.n	8002fe2 <_malloc_r+0x22>
 800309e:	6025      	str	r5, [r4, #0]
 80030a0:	e7de      	b.n	8003060 <_malloc_r+0xa0>
 80030a2:	bf00      	nop
 80030a4:	20000238 	.word	0x20000238

080030a8 <__sfputc_r>:
 80030a8:	6893      	ldr	r3, [r2, #8]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	b410      	push	{r4}
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	da08      	bge.n	80030c6 <__sfputc_r+0x1e>
 80030b4:	6994      	ldr	r4, [r2, #24]
 80030b6:	42a3      	cmp	r3, r4
 80030b8:	db01      	blt.n	80030be <__sfputc_r+0x16>
 80030ba:	290a      	cmp	r1, #10
 80030bc:	d103      	bne.n	80030c6 <__sfputc_r+0x1e>
 80030be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030c2:	f000 baef 	b.w	80036a4 <__swbuf_r>
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	1c58      	adds	r0, r3, #1
 80030ca:	6010      	str	r0, [r2, #0]
 80030cc:	7019      	strb	r1, [r3, #0]
 80030ce:	4608      	mov	r0, r1
 80030d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <__sfputs_r>:
 80030d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d8:	4606      	mov	r6, r0
 80030da:	460f      	mov	r7, r1
 80030dc:	4614      	mov	r4, r2
 80030de:	18d5      	adds	r5, r2, r3
 80030e0:	42ac      	cmp	r4, r5
 80030e2:	d101      	bne.n	80030e8 <__sfputs_r+0x12>
 80030e4:	2000      	movs	r0, #0
 80030e6:	e007      	b.n	80030f8 <__sfputs_r+0x22>
 80030e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ec:	463a      	mov	r2, r7
 80030ee:	4630      	mov	r0, r6
 80030f0:	f7ff ffda 	bl	80030a8 <__sfputc_r>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d1f3      	bne.n	80030e0 <__sfputs_r+0xa>
 80030f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030fc <_vfiprintf_r>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	460d      	mov	r5, r1
 8003102:	b09d      	sub	sp, #116	; 0x74
 8003104:	4614      	mov	r4, r2
 8003106:	4698      	mov	r8, r3
 8003108:	4606      	mov	r6, r0
 800310a:	b118      	cbz	r0, 8003114 <_vfiprintf_r+0x18>
 800310c:	6983      	ldr	r3, [r0, #24]
 800310e:	b90b      	cbnz	r3, 8003114 <_vfiprintf_r+0x18>
 8003110:	f000 fcaa 	bl	8003a68 <__sinit>
 8003114:	4b89      	ldr	r3, [pc, #548]	; (800333c <_vfiprintf_r+0x240>)
 8003116:	429d      	cmp	r5, r3
 8003118:	d11b      	bne.n	8003152 <_vfiprintf_r+0x56>
 800311a:	6875      	ldr	r5, [r6, #4]
 800311c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800311e:	07d9      	lsls	r1, r3, #31
 8003120:	d405      	bmi.n	800312e <_vfiprintf_r+0x32>
 8003122:	89ab      	ldrh	r3, [r5, #12]
 8003124:	059a      	lsls	r2, r3, #22
 8003126:	d402      	bmi.n	800312e <_vfiprintf_r+0x32>
 8003128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800312a:	f000 fd3b 	bl	8003ba4 <__retarget_lock_acquire_recursive>
 800312e:	89ab      	ldrh	r3, [r5, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	d501      	bpl.n	8003138 <_vfiprintf_r+0x3c>
 8003134:	692b      	ldr	r3, [r5, #16]
 8003136:	b9eb      	cbnz	r3, 8003174 <_vfiprintf_r+0x78>
 8003138:	4629      	mov	r1, r5
 800313a:	4630      	mov	r0, r6
 800313c:	f000 fb04 	bl	8003748 <__swsetup_r>
 8003140:	b1c0      	cbz	r0, 8003174 <_vfiprintf_r+0x78>
 8003142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003144:	07dc      	lsls	r4, r3, #31
 8003146:	d50e      	bpl.n	8003166 <_vfiprintf_r+0x6a>
 8003148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800314c:	b01d      	add	sp, #116	; 0x74
 800314e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003152:	4b7b      	ldr	r3, [pc, #492]	; (8003340 <_vfiprintf_r+0x244>)
 8003154:	429d      	cmp	r5, r3
 8003156:	d101      	bne.n	800315c <_vfiprintf_r+0x60>
 8003158:	68b5      	ldr	r5, [r6, #8]
 800315a:	e7df      	b.n	800311c <_vfiprintf_r+0x20>
 800315c:	4b79      	ldr	r3, [pc, #484]	; (8003344 <_vfiprintf_r+0x248>)
 800315e:	429d      	cmp	r5, r3
 8003160:	bf08      	it	eq
 8003162:	68f5      	ldreq	r5, [r6, #12]
 8003164:	e7da      	b.n	800311c <_vfiprintf_r+0x20>
 8003166:	89ab      	ldrh	r3, [r5, #12]
 8003168:	0598      	lsls	r0, r3, #22
 800316a:	d4ed      	bmi.n	8003148 <_vfiprintf_r+0x4c>
 800316c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800316e:	f000 fd1a 	bl	8003ba6 <__retarget_lock_release_recursive>
 8003172:	e7e9      	b.n	8003148 <_vfiprintf_r+0x4c>
 8003174:	2300      	movs	r3, #0
 8003176:	9309      	str	r3, [sp, #36]	; 0x24
 8003178:	2320      	movs	r3, #32
 800317a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800317e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003182:	2330      	movs	r3, #48	; 0x30
 8003184:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003348 <_vfiprintf_r+0x24c>
 8003188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800318c:	f04f 0901 	mov.w	r9, #1
 8003190:	4623      	mov	r3, r4
 8003192:	469a      	mov	sl, r3
 8003194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003198:	b10a      	cbz	r2, 800319e <_vfiprintf_r+0xa2>
 800319a:	2a25      	cmp	r2, #37	; 0x25
 800319c:	d1f9      	bne.n	8003192 <_vfiprintf_r+0x96>
 800319e:	ebba 0b04 	subs.w	fp, sl, r4
 80031a2:	d00b      	beq.n	80031bc <_vfiprintf_r+0xc0>
 80031a4:	465b      	mov	r3, fp
 80031a6:	4622      	mov	r2, r4
 80031a8:	4629      	mov	r1, r5
 80031aa:	4630      	mov	r0, r6
 80031ac:	f7ff ff93 	bl	80030d6 <__sfputs_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	f000 80aa 	beq.w	800330a <_vfiprintf_r+0x20e>
 80031b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031b8:	445a      	add	r2, fp
 80031ba:	9209      	str	r2, [sp, #36]	; 0x24
 80031bc:	f89a 3000 	ldrb.w	r3, [sl]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a2 	beq.w	800330a <_vfiprintf_r+0x20e>
 80031c6:	2300      	movs	r3, #0
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031d0:	f10a 0a01 	add.w	sl, sl, #1
 80031d4:	9304      	str	r3, [sp, #16]
 80031d6:	9307      	str	r3, [sp, #28]
 80031d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031dc:	931a      	str	r3, [sp, #104]	; 0x68
 80031de:	4654      	mov	r4, sl
 80031e0:	2205      	movs	r2, #5
 80031e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e6:	4858      	ldr	r0, [pc, #352]	; (8003348 <_vfiprintf_r+0x24c>)
 80031e8:	f7fc fffa 	bl	80001e0 <memchr>
 80031ec:	9a04      	ldr	r2, [sp, #16]
 80031ee:	b9d8      	cbnz	r0, 8003228 <_vfiprintf_r+0x12c>
 80031f0:	06d1      	lsls	r1, r2, #27
 80031f2:	bf44      	itt	mi
 80031f4:	2320      	movmi	r3, #32
 80031f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031fa:	0713      	lsls	r3, r2, #28
 80031fc:	bf44      	itt	mi
 80031fe:	232b      	movmi	r3, #43	; 0x2b
 8003200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003204:	f89a 3000 	ldrb.w	r3, [sl]
 8003208:	2b2a      	cmp	r3, #42	; 0x2a
 800320a:	d015      	beq.n	8003238 <_vfiprintf_r+0x13c>
 800320c:	9a07      	ldr	r2, [sp, #28]
 800320e:	4654      	mov	r4, sl
 8003210:	2000      	movs	r0, #0
 8003212:	f04f 0c0a 	mov.w	ip, #10
 8003216:	4621      	mov	r1, r4
 8003218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800321c:	3b30      	subs	r3, #48	; 0x30
 800321e:	2b09      	cmp	r3, #9
 8003220:	d94e      	bls.n	80032c0 <_vfiprintf_r+0x1c4>
 8003222:	b1b0      	cbz	r0, 8003252 <_vfiprintf_r+0x156>
 8003224:	9207      	str	r2, [sp, #28]
 8003226:	e014      	b.n	8003252 <_vfiprintf_r+0x156>
 8003228:	eba0 0308 	sub.w	r3, r0, r8
 800322c:	fa09 f303 	lsl.w	r3, r9, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	46a2      	mov	sl, r4
 8003236:	e7d2      	b.n	80031de <_vfiprintf_r+0xe2>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	1d19      	adds	r1, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9103      	str	r1, [sp, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	bfbb      	ittet	lt
 8003244:	425b      	neglt	r3, r3
 8003246:	f042 0202 	orrlt.w	r2, r2, #2
 800324a:	9307      	strge	r3, [sp, #28]
 800324c:	9307      	strlt	r3, [sp, #28]
 800324e:	bfb8      	it	lt
 8003250:	9204      	strlt	r2, [sp, #16]
 8003252:	7823      	ldrb	r3, [r4, #0]
 8003254:	2b2e      	cmp	r3, #46	; 0x2e
 8003256:	d10c      	bne.n	8003272 <_vfiprintf_r+0x176>
 8003258:	7863      	ldrb	r3, [r4, #1]
 800325a:	2b2a      	cmp	r3, #42	; 0x2a
 800325c:	d135      	bne.n	80032ca <_vfiprintf_r+0x1ce>
 800325e:	9b03      	ldr	r3, [sp, #12]
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	9203      	str	r2, [sp, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	bfb8      	it	lt
 800326a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800326e:	3402      	adds	r4, #2
 8003270:	9305      	str	r3, [sp, #20]
 8003272:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003358 <_vfiprintf_r+0x25c>
 8003276:	7821      	ldrb	r1, [r4, #0]
 8003278:	2203      	movs	r2, #3
 800327a:	4650      	mov	r0, sl
 800327c:	f7fc ffb0 	bl	80001e0 <memchr>
 8003280:	b140      	cbz	r0, 8003294 <_vfiprintf_r+0x198>
 8003282:	2340      	movs	r3, #64	; 0x40
 8003284:	eba0 000a 	sub.w	r0, r0, sl
 8003288:	fa03 f000 	lsl.w	r0, r3, r0
 800328c:	9b04      	ldr	r3, [sp, #16]
 800328e:	4303      	orrs	r3, r0
 8003290:	3401      	adds	r4, #1
 8003292:	9304      	str	r3, [sp, #16]
 8003294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003298:	482c      	ldr	r0, [pc, #176]	; (800334c <_vfiprintf_r+0x250>)
 800329a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800329e:	2206      	movs	r2, #6
 80032a0:	f7fc ff9e 	bl	80001e0 <memchr>
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d03f      	beq.n	8003328 <_vfiprintf_r+0x22c>
 80032a8:	4b29      	ldr	r3, [pc, #164]	; (8003350 <_vfiprintf_r+0x254>)
 80032aa:	bb1b      	cbnz	r3, 80032f4 <_vfiprintf_r+0x1f8>
 80032ac:	9b03      	ldr	r3, [sp, #12]
 80032ae:	3307      	adds	r3, #7
 80032b0:	f023 0307 	bic.w	r3, r3, #7
 80032b4:	3308      	adds	r3, #8
 80032b6:	9303      	str	r3, [sp, #12]
 80032b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ba:	443b      	add	r3, r7
 80032bc:	9309      	str	r3, [sp, #36]	; 0x24
 80032be:	e767      	b.n	8003190 <_vfiprintf_r+0x94>
 80032c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80032c4:	460c      	mov	r4, r1
 80032c6:	2001      	movs	r0, #1
 80032c8:	e7a5      	b.n	8003216 <_vfiprintf_r+0x11a>
 80032ca:	2300      	movs	r3, #0
 80032cc:	3401      	adds	r4, #1
 80032ce:	9305      	str	r3, [sp, #20]
 80032d0:	4619      	mov	r1, r3
 80032d2:	f04f 0c0a 	mov.w	ip, #10
 80032d6:	4620      	mov	r0, r4
 80032d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032dc:	3a30      	subs	r2, #48	; 0x30
 80032de:	2a09      	cmp	r2, #9
 80032e0:	d903      	bls.n	80032ea <_vfiprintf_r+0x1ee>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0c5      	beq.n	8003272 <_vfiprintf_r+0x176>
 80032e6:	9105      	str	r1, [sp, #20]
 80032e8:	e7c3      	b.n	8003272 <_vfiprintf_r+0x176>
 80032ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ee:	4604      	mov	r4, r0
 80032f0:	2301      	movs	r3, #1
 80032f2:	e7f0      	b.n	80032d6 <_vfiprintf_r+0x1da>
 80032f4:	ab03      	add	r3, sp, #12
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	462a      	mov	r2, r5
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <_vfiprintf_r+0x258>)
 80032fc:	a904      	add	r1, sp, #16
 80032fe:	4630      	mov	r0, r6
 8003300:	f3af 8000 	nop.w
 8003304:	4607      	mov	r7, r0
 8003306:	1c78      	adds	r0, r7, #1
 8003308:	d1d6      	bne.n	80032b8 <_vfiprintf_r+0x1bc>
 800330a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800330c:	07d9      	lsls	r1, r3, #31
 800330e:	d405      	bmi.n	800331c <_vfiprintf_r+0x220>
 8003310:	89ab      	ldrh	r3, [r5, #12]
 8003312:	059a      	lsls	r2, r3, #22
 8003314:	d402      	bmi.n	800331c <_vfiprintf_r+0x220>
 8003316:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003318:	f000 fc45 	bl	8003ba6 <__retarget_lock_release_recursive>
 800331c:	89ab      	ldrh	r3, [r5, #12]
 800331e:	065b      	lsls	r3, r3, #25
 8003320:	f53f af12 	bmi.w	8003148 <_vfiprintf_r+0x4c>
 8003324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003326:	e711      	b.n	800314c <_vfiprintf_r+0x50>
 8003328:	ab03      	add	r3, sp, #12
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	462a      	mov	r2, r5
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <_vfiprintf_r+0x258>)
 8003330:	a904      	add	r1, sp, #16
 8003332:	4630      	mov	r0, r6
 8003334:	f000 f880 	bl	8003438 <_printf_i>
 8003338:	e7e4      	b.n	8003304 <_vfiprintf_r+0x208>
 800333a:	bf00      	nop
 800333c:	08003fb4 	.word	0x08003fb4
 8003340:	08003fd4 	.word	0x08003fd4
 8003344:	08003f94 	.word	0x08003f94
 8003348:	08003f5e 	.word	0x08003f5e
 800334c:	08003f68 	.word	0x08003f68
 8003350:	00000000 	.word	0x00000000
 8003354:	080030d7 	.word	0x080030d7
 8003358:	08003f64 	.word	0x08003f64

0800335c <_printf_common>:
 800335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003360:	4616      	mov	r6, r2
 8003362:	4699      	mov	r9, r3
 8003364:	688a      	ldr	r2, [r1, #8]
 8003366:	690b      	ldr	r3, [r1, #16]
 8003368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800336c:	4293      	cmp	r3, r2
 800336e:	bfb8      	it	lt
 8003370:	4613      	movlt	r3, r2
 8003372:	6033      	str	r3, [r6, #0]
 8003374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003378:	4607      	mov	r7, r0
 800337a:	460c      	mov	r4, r1
 800337c:	b10a      	cbz	r2, 8003382 <_printf_common+0x26>
 800337e:	3301      	adds	r3, #1
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	0699      	lsls	r1, r3, #26
 8003386:	bf42      	ittt	mi
 8003388:	6833      	ldrmi	r3, [r6, #0]
 800338a:	3302      	addmi	r3, #2
 800338c:	6033      	strmi	r3, [r6, #0]
 800338e:	6825      	ldr	r5, [r4, #0]
 8003390:	f015 0506 	ands.w	r5, r5, #6
 8003394:	d106      	bne.n	80033a4 <_printf_common+0x48>
 8003396:	f104 0a19 	add.w	sl, r4, #25
 800339a:	68e3      	ldr	r3, [r4, #12]
 800339c:	6832      	ldr	r2, [r6, #0]
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	dc26      	bgt.n	80033f2 <_printf_common+0x96>
 80033a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033a8:	1e13      	subs	r3, r2, #0
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	bf18      	it	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	0692      	lsls	r2, r2, #26
 80033b2:	d42b      	bmi.n	800340c <_printf_common+0xb0>
 80033b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033b8:	4649      	mov	r1, r9
 80033ba:	4638      	mov	r0, r7
 80033bc:	47c0      	blx	r8
 80033be:	3001      	adds	r0, #1
 80033c0:	d01e      	beq.n	8003400 <_printf_common+0xa4>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	68e5      	ldr	r5, [r4, #12]
 80033c6:	6832      	ldr	r2, [r6, #0]
 80033c8:	f003 0306 	and.w	r3, r3, #6
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	bf08      	it	eq
 80033d0:	1aad      	subeq	r5, r5, r2
 80033d2:	68a3      	ldr	r3, [r4, #8]
 80033d4:	6922      	ldr	r2, [r4, #16]
 80033d6:	bf0c      	ite	eq
 80033d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033dc:	2500      	movne	r5, #0
 80033de:	4293      	cmp	r3, r2
 80033e0:	bfc4      	itt	gt
 80033e2:	1a9b      	subgt	r3, r3, r2
 80033e4:	18ed      	addgt	r5, r5, r3
 80033e6:	2600      	movs	r6, #0
 80033e8:	341a      	adds	r4, #26
 80033ea:	42b5      	cmp	r5, r6
 80033ec:	d11a      	bne.n	8003424 <_printf_common+0xc8>
 80033ee:	2000      	movs	r0, #0
 80033f0:	e008      	b.n	8003404 <_printf_common+0xa8>
 80033f2:	2301      	movs	r3, #1
 80033f4:	4652      	mov	r2, sl
 80033f6:	4649      	mov	r1, r9
 80033f8:	4638      	mov	r0, r7
 80033fa:	47c0      	blx	r8
 80033fc:	3001      	adds	r0, #1
 80033fe:	d103      	bne.n	8003408 <_printf_common+0xac>
 8003400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003408:	3501      	adds	r5, #1
 800340a:	e7c6      	b.n	800339a <_printf_common+0x3e>
 800340c:	18e1      	adds	r1, r4, r3
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	2030      	movs	r0, #48	; 0x30
 8003412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003416:	4422      	add	r2, r4
 8003418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800341c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003420:	3302      	adds	r3, #2
 8003422:	e7c7      	b.n	80033b4 <_printf_common+0x58>
 8003424:	2301      	movs	r3, #1
 8003426:	4622      	mov	r2, r4
 8003428:	4649      	mov	r1, r9
 800342a:	4638      	mov	r0, r7
 800342c:	47c0      	blx	r8
 800342e:	3001      	adds	r0, #1
 8003430:	d0e6      	beq.n	8003400 <_printf_common+0xa4>
 8003432:	3601      	adds	r6, #1
 8003434:	e7d9      	b.n	80033ea <_printf_common+0x8e>
	...

08003438 <_printf_i>:
 8003438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	7e0f      	ldrb	r7, [r1, #24]
 800343e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003440:	2f78      	cmp	r7, #120	; 0x78
 8003442:	4691      	mov	r9, r2
 8003444:	4680      	mov	r8, r0
 8003446:	460c      	mov	r4, r1
 8003448:	469a      	mov	sl, r3
 800344a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800344e:	d807      	bhi.n	8003460 <_printf_i+0x28>
 8003450:	2f62      	cmp	r7, #98	; 0x62
 8003452:	d80a      	bhi.n	800346a <_printf_i+0x32>
 8003454:	2f00      	cmp	r7, #0
 8003456:	f000 80d8 	beq.w	800360a <_printf_i+0x1d2>
 800345a:	2f58      	cmp	r7, #88	; 0x58
 800345c:	f000 80a3 	beq.w	80035a6 <_printf_i+0x16e>
 8003460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003468:	e03a      	b.n	80034e0 <_printf_i+0xa8>
 800346a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800346e:	2b15      	cmp	r3, #21
 8003470:	d8f6      	bhi.n	8003460 <_printf_i+0x28>
 8003472:	a101      	add	r1, pc, #4	; (adr r1, 8003478 <_printf_i+0x40>)
 8003474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003478:	080034d1 	.word	0x080034d1
 800347c:	080034e5 	.word	0x080034e5
 8003480:	08003461 	.word	0x08003461
 8003484:	08003461 	.word	0x08003461
 8003488:	08003461 	.word	0x08003461
 800348c:	08003461 	.word	0x08003461
 8003490:	080034e5 	.word	0x080034e5
 8003494:	08003461 	.word	0x08003461
 8003498:	08003461 	.word	0x08003461
 800349c:	08003461 	.word	0x08003461
 80034a0:	08003461 	.word	0x08003461
 80034a4:	080035f1 	.word	0x080035f1
 80034a8:	08003515 	.word	0x08003515
 80034ac:	080035d3 	.word	0x080035d3
 80034b0:	08003461 	.word	0x08003461
 80034b4:	08003461 	.word	0x08003461
 80034b8:	08003613 	.word	0x08003613
 80034bc:	08003461 	.word	0x08003461
 80034c0:	08003515 	.word	0x08003515
 80034c4:	08003461 	.word	0x08003461
 80034c8:	08003461 	.word	0x08003461
 80034cc:	080035db 	.word	0x080035db
 80034d0:	682b      	ldr	r3, [r5, #0]
 80034d2:	1d1a      	adds	r2, r3, #4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	602a      	str	r2, [r5, #0]
 80034d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0a3      	b.n	800362c <_printf_i+0x1f4>
 80034e4:	6820      	ldr	r0, [r4, #0]
 80034e6:	6829      	ldr	r1, [r5, #0]
 80034e8:	0606      	lsls	r6, r0, #24
 80034ea:	f101 0304 	add.w	r3, r1, #4
 80034ee:	d50a      	bpl.n	8003506 <_printf_i+0xce>
 80034f0:	680e      	ldr	r6, [r1, #0]
 80034f2:	602b      	str	r3, [r5, #0]
 80034f4:	2e00      	cmp	r6, #0
 80034f6:	da03      	bge.n	8003500 <_printf_i+0xc8>
 80034f8:	232d      	movs	r3, #45	; 0x2d
 80034fa:	4276      	negs	r6, r6
 80034fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003500:	485e      	ldr	r0, [pc, #376]	; (800367c <_printf_i+0x244>)
 8003502:	230a      	movs	r3, #10
 8003504:	e019      	b.n	800353a <_printf_i+0x102>
 8003506:	680e      	ldr	r6, [r1, #0]
 8003508:	602b      	str	r3, [r5, #0]
 800350a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800350e:	bf18      	it	ne
 8003510:	b236      	sxthne	r6, r6
 8003512:	e7ef      	b.n	80034f4 <_printf_i+0xbc>
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	6820      	ldr	r0, [r4, #0]
 8003518:	1d19      	adds	r1, r3, #4
 800351a:	6029      	str	r1, [r5, #0]
 800351c:	0601      	lsls	r1, r0, #24
 800351e:	d501      	bpl.n	8003524 <_printf_i+0xec>
 8003520:	681e      	ldr	r6, [r3, #0]
 8003522:	e002      	b.n	800352a <_printf_i+0xf2>
 8003524:	0646      	lsls	r6, r0, #25
 8003526:	d5fb      	bpl.n	8003520 <_printf_i+0xe8>
 8003528:	881e      	ldrh	r6, [r3, #0]
 800352a:	4854      	ldr	r0, [pc, #336]	; (800367c <_printf_i+0x244>)
 800352c:	2f6f      	cmp	r7, #111	; 0x6f
 800352e:	bf0c      	ite	eq
 8003530:	2308      	moveq	r3, #8
 8003532:	230a      	movne	r3, #10
 8003534:	2100      	movs	r1, #0
 8003536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800353a:	6865      	ldr	r5, [r4, #4]
 800353c:	60a5      	str	r5, [r4, #8]
 800353e:	2d00      	cmp	r5, #0
 8003540:	bfa2      	ittt	ge
 8003542:	6821      	ldrge	r1, [r4, #0]
 8003544:	f021 0104 	bicge.w	r1, r1, #4
 8003548:	6021      	strge	r1, [r4, #0]
 800354a:	b90e      	cbnz	r6, 8003550 <_printf_i+0x118>
 800354c:	2d00      	cmp	r5, #0
 800354e:	d04d      	beq.n	80035ec <_printf_i+0x1b4>
 8003550:	4615      	mov	r5, r2
 8003552:	fbb6 f1f3 	udiv	r1, r6, r3
 8003556:	fb03 6711 	mls	r7, r3, r1, r6
 800355a:	5dc7      	ldrb	r7, [r0, r7]
 800355c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003560:	4637      	mov	r7, r6
 8003562:	42bb      	cmp	r3, r7
 8003564:	460e      	mov	r6, r1
 8003566:	d9f4      	bls.n	8003552 <_printf_i+0x11a>
 8003568:	2b08      	cmp	r3, #8
 800356a:	d10b      	bne.n	8003584 <_printf_i+0x14c>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	07de      	lsls	r6, r3, #31
 8003570:	d508      	bpl.n	8003584 <_printf_i+0x14c>
 8003572:	6923      	ldr	r3, [r4, #16]
 8003574:	6861      	ldr	r1, [r4, #4]
 8003576:	4299      	cmp	r1, r3
 8003578:	bfde      	ittt	le
 800357a:	2330      	movle	r3, #48	; 0x30
 800357c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003580:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003584:	1b52      	subs	r2, r2, r5
 8003586:	6122      	str	r2, [r4, #16]
 8003588:	f8cd a000 	str.w	sl, [sp]
 800358c:	464b      	mov	r3, r9
 800358e:	aa03      	add	r2, sp, #12
 8003590:	4621      	mov	r1, r4
 8003592:	4640      	mov	r0, r8
 8003594:	f7ff fee2 	bl	800335c <_printf_common>
 8003598:	3001      	adds	r0, #1
 800359a:	d14c      	bne.n	8003636 <_printf_i+0x1fe>
 800359c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a0:	b004      	add	sp, #16
 80035a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a6:	4835      	ldr	r0, [pc, #212]	; (800367c <_printf_i+0x244>)
 80035a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035ac:	6829      	ldr	r1, [r5, #0]
 80035ae:	6823      	ldr	r3, [r4, #0]
 80035b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80035b4:	6029      	str	r1, [r5, #0]
 80035b6:	061d      	lsls	r5, r3, #24
 80035b8:	d514      	bpl.n	80035e4 <_printf_i+0x1ac>
 80035ba:	07df      	lsls	r7, r3, #31
 80035bc:	bf44      	itt	mi
 80035be:	f043 0320 	orrmi.w	r3, r3, #32
 80035c2:	6023      	strmi	r3, [r4, #0]
 80035c4:	b91e      	cbnz	r6, 80035ce <_printf_i+0x196>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	f023 0320 	bic.w	r3, r3, #32
 80035cc:	6023      	str	r3, [r4, #0]
 80035ce:	2310      	movs	r3, #16
 80035d0:	e7b0      	b.n	8003534 <_printf_i+0xfc>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	f043 0320 	orr.w	r3, r3, #32
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	2378      	movs	r3, #120	; 0x78
 80035dc:	4828      	ldr	r0, [pc, #160]	; (8003680 <_printf_i+0x248>)
 80035de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035e2:	e7e3      	b.n	80035ac <_printf_i+0x174>
 80035e4:	0659      	lsls	r1, r3, #25
 80035e6:	bf48      	it	mi
 80035e8:	b2b6      	uxthmi	r6, r6
 80035ea:	e7e6      	b.n	80035ba <_printf_i+0x182>
 80035ec:	4615      	mov	r5, r2
 80035ee:	e7bb      	b.n	8003568 <_printf_i+0x130>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	6826      	ldr	r6, [r4, #0]
 80035f4:	6961      	ldr	r1, [r4, #20]
 80035f6:	1d18      	adds	r0, r3, #4
 80035f8:	6028      	str	r0, [r5, #0]
 80035fa:	0635      	lsls	r5, r6, #24
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	d501      	bpl.n	8003604 <_printf_i+0x1cc>
 8003600:	6019      	str	r1, [r3, #0]
 8003602:	e002      	b.n	800360a <_printf_i+0x1d2>
 8003604:	0670      	lsls	r0, r6, #25
 8003606:	d5fb      	bpl.n	8003600 <_printf_i+0x1c8>
 8003608:	8019      	strh	r1, [r3, #0]
 800360a:	2300      	movs	r3, #0
 800360c:	6123      	str	r3, [r4, #16]
 800360e:	4615      	mov	r5, r2
 8003610:	e7ba      	b.n	8003588 <_printf_i+0x150>
 8003612:	682b      	ldr	r3, [r5, #0]
 8003614:	1d1a      	adds	r2, r3, #4
 8003616:	602a      	str	r2, [r5, #0]
 8003618:	681d      	ldr	r5, [r3, #0]
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	2100      	movs	r1, #0
 800361e:	4628      	mov	r0, r5
 8003620:	f7fc fdde 	bl	80001e0 <memchr>
 8003624:	b108      	cbz	r0, 800362a <_printf_i+0x1f2>
 8003626:	1b40      	subs	r0, r0, r5
 8003628:	6060      	str	r0, [r4, #4]
 800362a:	6863      	ldr	r3, [r4, #4]
 800362c:	6123      	str	r3, [r4, #16]
 800362e:	2300      	movs	r3, #0
 8003630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003634:	e7a8      	b.n	8003588 <_printf_i+0x150>
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	462a      	mov	r2, r5
 800363a:	4649      	mov	r1, r9
 800363c:	4640      	mov	r0, r8
 800363e:	47d0      	blx	sl
 8003640:	3001      	adds	r0, #1
 8003642:	d0ab      	beq.n	800359c <_printf_i+0x164>
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	079b      	lsls	r3, r3, #30
 8003648:	d413      	bmi.n	8003672 <_printf_i+0x23a>
 800364a:	68e0      	ldr	r0, [r4, #12]
 800364c:	9b03      	ldr	r3, [sp, #12]
 800364e:	4298      	cmp	r0, r3
 8003650:	bfb8      	it	lt
 8003652:	4618      	movlt	r0, r3
 8003654:	e7a4      	b.n	80035a0 <_printf_i+0x168>
 8003656:	2301      	movs	r3, #1
 8003658:	4632      	mov	r2, r6
 800365a:	4649      	mov	r1, r9
 800365c:	4640      	mov	r0, r8
 800365e:	47d0      	blx	sl
 8003660:	3001      	adds	r0, #1
 8003662:	d09b      	beq.n	800359c <_printf_i+0x164>
 8003664:	3501      	adds	r5, #1
 8003666:	68e3      	ldr	r3, [r4, #12]
 8003668:	9903      	ldr	r1, [sp, #12]
 800366a:	1a5b      	subs	r3, r3, r1
 800366c:	42ab      	cmp	r3, r5
 800366e:	dcf2      	bgt.n	8003656 <_printf_i+0x21e>
 8003670:	e7eb      	b.n	800364a <_printf_i+0x212>
 8003672:	2500      	movs	r5, #0
 8003674:	f104 0619 	add.w	r6, r4, #25
 8003678:	e7f5      	b.n	8003666 <_printf_i+0x22e>
 800367a:	bf00      	nop
 800367c:	08003f6f 	.word	0x08003f6f
 8003680:	08003f80 	.word	0x08003f80

08003684 <_sbrk_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4d06      	ldr	r5, [pc, #24]	; (80036a0 <_sbrk_r+0x1c>)
 8003688:	2300      	movs	r3, #0
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	602b      	str	r3, [r5, #0]
 8003690:	f7fd fbc4 	bl	8000e1c <_sbrk>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d102      	bne.n	800369e <_sbrk_r+0x1a>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	b103      	cbz	r3, 800369e <_sbrk_r+0x1a>
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	bd38      	pop	{r3, r4, r5, pc}
 80036a0:	20000240 	.word	0x20000240

080036a4 <__swbuf_r>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	460e      	mov	r6, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	4605      	mov	r5, r0
 80036ac:	b118      	cbz	r0, 80036b6 <__swbuf_r+0x12>
 80036ae:	6983      	ldr	r3, [r0, #24]
 80036b0:	b90b      	cbnz	r3, 80036b6 <__swbuf_r+0x12>
 80036b2:	f000 f9d9 	bl	8003a68 <__sinit>
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <__swbuf_r+0x98>)
 80036b8:	429c      	cmp	r4, r3
 80036ba:	d12b      	bne.n	8003714 <__swbuf_r+0x70>
 80036bc:	686c      	ldr	r4, [r5, #4]
 80036be:	69a3      	ldr	r3, [r4, #24]
 80036c0:	60a3      	str	r3, [r4, #8]
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	071a      	lsls	r2, r3, #28
 80036c6:	d52f      	bpl.n	8003728 <__swbuf_r+0x84>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	b36b      	cbz	r3, 8003728 <__swbuf_r+0x84>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	1ac0      	subs	r0, r0, r3
 80036d2:	6963      	ldr	r3, [r4, #20]
 80036d4:	b2f6      	uxtb	r6, r6
 80036d6:	4283      	cmp	r3, r0
 80036d8:	4637      	mov	r7, r6
 80036da:	dc04      	bgt.n	80036e6 <__swbuf_r+0x42>
 80036dc:	4621      	mov	r1, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f92e 	bl	8003940 <_fflush_r>
 80036e4:	bb30      	cbnz	r0, 8003734 <__swbuf_r+0x90>
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	6022      	str	r2, [r4, #0]
 80036f2:	701e      	strb	r6, [r3, #0]
 80036f4:	6963      	ldr	r3, [r4, #20]
 80036f6:	3001      	adds	r0, #1
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d004      	beq.n	8003706 <__swbuf_r+0x62>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	07db      	lsls	r3, r3, #31
 8003700:	d506      	bpl.n	8003710 <__swbuf_r+0x6c>
 8003702:	2e0a      	cmp	r6, #10
 8003704:	d104      	bne.n	8003710 <__swbuf_r+0x6c>
 8003706:	4621      	mov	r1, r4
 8003708:	4628      	mov	r0, r5
 800370a:	f000 f919 	bl	8003940 <_fflush_r>
 800370e:	b988      	cbnz	r0, 8003734 <__swbuf_r+0x90>
 8003710:	4638      	mov	r0, r7
 8003712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <__swbuf_r+0x9c>)
 8003716:	429c      	cmp	r4, r3
 8003718:	d101      	bne.n	800371e <__swbuf_r+0x7a>
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	e7cf      	b.n	80036be <__swbuf_r+0x1a>
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <__swbuf_r+0xa0>)
 8003720:	429c      	cmp	r4, r3
 8003722:	bf08      	it	eq
 8003724:	68ec      	ldreq	r4, [r5, #12]
 8003726:	e7ca      	b.n	80036be <__swbuf_r+0x1a>
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f80c 	bl	8003748 <__swsetup_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d0cb      	beq.n	80036cc <__swbuf_r+0x28>
 8003734:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003738:	e7ea      	b.n	8003710 <__swbuf_r+0x6c>
 800373a:	bf00      	nop
 800373c:	08003fb4 	.word	0x08003fb4
 8003740:	08003fd4 	.word	0x08003fd4
 8003744:	08003f94 	.word	0x08003f94

08003748 <__swsetup_r>:
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <__swsetup_r+0xcc>)
 800374a:	b570      	push	{r4, r5, r6, lr}
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	4606      	mov	r6, r0
 8003750:	460c      	mov	r4, r1
 8003752:	b125      	cbz	r5, 800375e <__swsetup_r+0x16>
 8003754:	69ab      	ldr	r3, [r5, #24]
 8003756:	b913      	cbnz	r3, 800375e <__swsetup_r+0x16>
 8003758:	4628      	mov	r0, r5
 800375a:	f000 f985 	bl	8003a68 <__sinit>
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <__swsetup_r+0xd0>)
 8003760:	429c      	cmp	r4, r3
 8003762:	d10f      	bne.n	8003784 <__swsetup_r+0x3c>
 8003764:	686c      	ldr	r4, [r5, #4]
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800376c:	0719      	lsls	r1, r3, #28
 800376e:	d42c      	bmi.n	80037ca <__swsetup_r+0x82>
 8003770:	06dd      	lsls	r5, r3, #27
 8003772:	d411      	bmi.n	8003798 <__swsetup_r+0x50>
 8003774:	2309      	movs	r3, #9
 8003776:	6033      	str	r3, [r6, #0]
 8003778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800377c:	81a3      	strh	r3, [r4, #12]
 800377e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003782:	e03e      	b.n	8003802 <__swsetup_r+0xba>
 8003784:	4b25      	ldr	r3, [pc, #148]	; (800381c <__swsetup_r+0xd4>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d101      	bne.n	800378e <__swsetup_r+0x46>
 800378a:	68ac      	ldr	r4, [r5, #8]
 800378c:	e7eb      	b.n	8003766 <__swsetup_r+0x1e>
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <__swsetup_r+0xd8>)
 8003790:	429c      	cmp	r4, r3
 8003792:	bf08      	it	eq
 8003794:	68ec      	ldreq	r4, [r5, #12]
 8003796:	e7e6      	b.n	8003766 <__swsetup_r+0x1e>
 8003798:	0758      	lsls	r0, r3, #29
 800379a:	d512      	bpl.n	80037c2 <__swsetup_r+0x7a>
 800379c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800379e:	b141      	cbz	r1, 80037b2 <__swsetup_r+0x6a>
 80037a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a4:	4299      	cmp	r1, r3
 80037a6:	d002      	beq.n	80037ae <__swsetup_r+0x66>
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff fb9d 	bl	8002ee8 <_free_r>
 80037ae:	2300      	movs	r3, #0
 80037b0:	6363      	str	r3, [r4, #52]	; 0x34
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	6923      	ldr	r3, [r4, #16]
 80037cc:	b94b      	cbnz	r3, 80037e2 <__swsetup_r+0x9a>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d003      	beq.n	80037e2 <__swsetup_r+0x9a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4630      	mov	r0, r6
 80037de:	f000 fa09 	bl	8003bf4 <__smakebuf_r>
 80037e2:	89a0      	ldrh	r0, [r4, #12]
 80037e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037e8:	f010 0301 	ands.w	r3, r0, #1
 80037ec:	d00a      	beq.n	8003804 <__swsetup_r+0xbc>
 80037ee:	2300      	movs	r3, #0
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	6963      	ldr	r3, [r4, #20]
 80037f4:	425b      	negs	r3, r3
 80037f6:	61a3      	str	r3, [r4, #24]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	b943      	cbnz	r3, 800380e <__swsetup_r+0xc6>
 80037fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003800:	d1ba      	bne.n	8003778 <__swsetup_r+0x30>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	0781      	lsls	r1, r0, #30
 8003806:	bf58      	it	pl
 8003808:	6963      	ldrpl	r3, [r4, #20]
 800380a:	60a3      	str	r3, [r4, #8]
 800380c:	e7f4      	b.n	80037f8 <__swsetup_r+0xb0>
 800380e:	2000      	movs	r0, #0
 8003810:	e7f7      	b.n	8003802 <__swsetup_r+0xba>
 8003812:	bf00      	nop
 8003814:	20000018 	.word	0x20000018
 8003818:	08003fb4 	.word	0x08003fb4
 800381c:	08003fd4 	.word	0x08003fd4
 8003820:	08003f94 	.word	0x08003f94

08003824 <abort>:
 8003824:	b508      	push	{r3, lr}
 8003826:	2006      	movs	r0, #6
 8003828:	f000 fa58 	bl	8003cdc <raise>
 800382c:	2001      	movs	r0, #1
 800382e:	f7fd fa7d 	bl	8000d2c <_exit>
	...

08003834 <__sflush_r>:
 8003834:	898a      	ldrh	r2, [r1, #12]
 8003836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800383a:	4605      	mov	r5, r0
 800383c:	0710      	lsls	r0, r2, #28
 800383e:	460c      	mov	r4, r1
 8003840:	d458      	bmi.n	80038f4 <__sflush_r+0xc0>
 8003842:	684b      	ldr	r3, [r1, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	dc05      	bgt.n	8003854 <__sflush_r+0x20>
 8003848:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	dc02      	bgt.n	8003854 <__sflush_r+0x20>
 800384e:	2000      	movs	r0, #0
 8003850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003856:	2e00      	cmp	r6, #0
 8003858:	d0f9      	beq.n	800384e <__sflush_r+0x1a>
 800385a:	2300      	movs	r3, #0
 800385c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003860:	682f      	ldr	r7, [r5, #0]
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	d032      	beq.n	80038cc <__sflush_r+0x98>
 8003866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	075a      	lsls	r2, r3, #29
 800386c:	d505      	bpl.n	800387a <__sflush_r+0x46>
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	1ac0      	subs	r0, r0, r3
 8003872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003874:	b10b      	cbz	r3, 800387a <__sflush_r+0x46>
 8003876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003878:	1ac0      	subs	r0, r0, r3
 800387a:	2300      	movs	r3, #0
 800387c:	4602      	mov	r2, r0
 800387e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003880:	6a21      	ldr	r1, [r4, #32]
 8003882:	4628      	mov	r0, r5
 8003884:	47b0      	blx	r6
 8003886:	1c43      	adds	r3, r0, #1
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	d106      	bne.n	800389a <__sflush_r+0x66>
 800388c:	6829      	ldr	r1, [r5, #0]
 800388e:	291d      	cmp	r1, #29
 8003890:	d82c      	bhi.n	80038ec <__sflush_r+0xb8>
 8003892:	4a2a      	ldr	r2, [pc, #168]	; (800393c <__sflush_r+0x108>)
 8003894:	40ca      	lsrs	r2, r1
 8003896:	07d6      	lsls	r6, r2, #31
 8003898:	d528      	bpl.n	80038ec <__sflush_r+0xb8>
 800389a:	2200      	movs	r2, #0
 800389c:	6062      	str	r2, [r4, #4]
 800389e:	04d9      	lsls	r1, r3, #19
 80038a0:	6922      	ldr	r2, [r4, #16]
 80038a2:	6022      	str	r2, [r4, #0]
 80038a4:	d504      	bpl.n	80038b0 <__sflush_r+0x7c>
 80038a6:	1c42      	adds	r2, r0, #1
 80038a8:	d101      	bne.n	80038ae <__sflush_r+0x7a>
 80038aa:	682b      	ldr	r3, [r5, #0]
 80038ac:	b903      	cbnz	r3, 80038b0 <__sflush_r+0x7c>
 80038ae:	6560      	str	r0, [r4, #84]	; 0x54
 80038b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038b2:	602f      	str	r7, [r5, #0]
 80038b4:	2900      	cmp	r1, #0
 80038b6:	d0ca      	beq.n	800384e <__sflush_r+0x1a>
 80038b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038bc:	4299      	cmp	r1, r3
 80038be:	d002      	beq.n	80038c6 <__sflush_r+0x92>
 80038c0:	4628      	mov	r0, r5
 80038c2:	f7ff fb11 	bl	8002ee8 <_free_r>
 80038c6:	2000      	movs	r0, #0
 80038c8:	6360      	str	r0, [r4, #52]	; 0x34
 80038ca:	e7c1      	b.n	8003850 <__sflush_r+0x1c>
 80038cc:	6a21      	ldr	r1, [r4, #32]
 80038ce:	2301      	movs	r3, #1
 80038d0:	4628      	mov	r0, r5
 80038d2:	47b0      	blx	r6
 80038d4:	1c41      	adds	r1, r0, #1
 80038d6:	d1c7      	bne.n	8003868 <__sflush_r+0x34>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0c4      	beq.n	8003868 <__sflush_r+0x34>
 80038de:	2b1d      	cmp	r3, #29
 80038e0:	d001      	beq.n	80038e6 <__sflush_r+0xb2>
 80038e2:	2b16      	cmp	r3, #22
 80038e4:	d101      	bne.n	80038ea <__sflush_r+0xb6>
 80038e6:	602f      	str	r7, [r5, #0]
 80038e8:	e7b1      	b.n	800384e <__sflush_r+0x1a>
 80038ea:	89a3      	ldrh	r3, [r4, #12]
 80038ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	e7ad      	b.n	8003850 <__sflush_r+0x1c>
 80038f4:	690f      	ldr	r7, [r1, #16]
 80038f6:	2f00      	cmp	r7, #0
 80038f8:	d0a9      	beq.n	800384e <__sflush_r+0x1a>
 80038fa:	0793      	lsls	r3, r2, #30
 80038fc:	680e      	ldr	r6, [r1, #0]
 80038fe:	bf08      	it	eq
 8003900:	694b      	ldreq	r3, [r1, #20]
 8003902:	600f      	str	r7, [r1, #0]
 8003904:	bf18      	it	ne
 8003906:	2300      	movne	r3, #0
 8003908:	eba6 0807 	sub.w	r8, r6, r7
 800390c:	608b      	str	r3, [r1, #8]
 800390e:	f1b8 0f00 	cmp.w	r8, #0
 8003912:	dd9c      	ble.n	800384e <__sflush_r+0x1a>
 8003914:	6a21      	ldr	r1, [r4, #32]
 8003916:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003918:	4643      	mov	r3, r8
 800391a:	463a      	mov	r2, r7
 800391c:	4628      	mov	r0, r5
 800391e:	47b0      	blx	r6
 8003920:	2800      	cmp	r0, #0
 8003922:	dc06      	bgt.n	8003932 <__sflush_r+0xfe>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392a:	81a3      	strh	r3, [r4, #12]
 800392c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003930:	e78e      	b.n	8003850 <__sflush_r+0x1c>
 8003932:	4407      	add	r7, r0
 8003934:	eba8 0800 	sub.w	r8, r8, r0
 8003938:	e7e9      	b.n	800390e <__sflush_r+0xda>
 800393a:	bf00      	nop
 800393c:	20400001 	.word	0x20400001

08003940 <_fflush_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	690b      	ldr	r3, [r1, #16]
 8003944:	4605      	mov	r5, r0
 8003946:	460c      	mov	r4, r1
 8003948:	b913      	cbnz	r3, 8003950 <_fflush_r+0x10>
 800394a:	2500      	movs	r5, #0
 800394c:	4628      	mov	r0, r5
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	b118      	cbz	r0, 800395a <_fflush_r+0x1a>
 8003952:	6983      	ldr	r3, [r0, #24]
 8003954:	b90b      	cbnz	r3, 800395a <_fflush_r+0x1a>
 8003956:	f000 f887 	bl	8003a68 <__sinit>
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <_fflush_r+0x6c>)
 800395c:	429c      	cmp	r4, r3
 800395e:	d11b      	bne.n	8003998 <_fflush_r+0x58>
 8003960:	686c      	ldr	r4, [r5, #4]
 8003962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ef      	beq.n	800394a <_fflush_r+0xa>
 800396a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800396c:	07d0      	lsls	r0, r2, #31
 800396e:	d404      	bmi.n	800397a <_fflush_r+0x3a>
 8003970:	0599      	lsls	r1, r3, #22
 8003972:	d402      	bmi.n	800397a <_fflush_r+0x3a>
 8003974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003976:	f000 f915 	bl	8003ba4 <__retarget_lock_acquire_recursive>
 800397a:	4628      	mov	r0, r5
 800397c:	4621      	mov	r1, r4
 800397e:	f7ff ff59 	bl	8003834 <__sflush_r>
 8003982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003984:	07da      	lsls	r2, r3, #31
 8003986:	4605      	mov	r5, r0
 8003988:	d4e0      	bmi.n	800394c <_fflush_r+0xc>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	059b      	lsls	r3, r3, #22
 800398e:	d4dd      	bmi.n	800394c <_fflush_r+0xc>
 8003990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003992:	f000 f908 	bl	8003ba6 <__retarget_lock_release_recursive>
 8003996:	e7d9      	b.n	800394c <_fflush_r+0xc>
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <_fflush_r+0x70>)
 800399a:	429c      	cmp	r4, r3
 800399c:	d101      	bne.n	80039a2 <_fflush_r+0x62>
 800399e:	68ac      	ldr	r4, [r5, #8]
 80039a0:	e7df      	b.n	8003962 <_fflush_r+0x22>
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <_fflush_r+0x74>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	bf08      	it	eq
 80039a8:	68ec      	ldreq	r4, [r5, #12]
 80039aa:	e7da      	b.n	8003962 <_fflush_r+0x22>
 80039ac:	08003fb4 	.word	0x08003fb4
 80039b0:	08003fd4 	.word	0x08003fd4
 80039b4:	08003f94 	.word	0x08003f94

080039b8 <std>:
 80039b8:	2300      	movs	r3, #0
 80039ba:	b510      	push	{r4, lr}
 80039bc:	4604      	mov	r4, r0
 80039be:	e9c0 3300 	strd	r3, r3, [r0]
 80039c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039c6:	6083      	str	r3, [r0, #8]
 80039c8:	8181      	strh	r1, [r0, #12]
 80039ca:	6643      	str	r3, [r0, #100]	; 0x64
 80039cc:	81c2      	strh	r2, [r0, #14]
 80039ce:	6183      	str	r3, [r0, #24]
 80039d0:	4619      	mov	r1, r3
 80039d2:	2208      	movs	r2, #8
 80039d4:	305c      	adds	r0, #92	; 0x5c
 80039d6:	f7ff f9af 	bl	8002d38 <memset>
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <std+0x38>)
 80039dc:	6263      	str	r3, [r4, #36]	; 0x24
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <std+0x3c>)
 80039e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <std+0x40>)
 80039e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <std+0x44>)
 80039e8:	6224      	str	r4, [r4, #32]
 80039ea:	6323      	str	r3, [r4, #48]	; 0x30
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	bf00      	nop
 80039f0:	08003d15 	.word	0x08003d15
 80039f4:	08003d37 	.word	0x08003d37
 80039f8:	08003d6f 	.word	0x08003d6f
 80039fc:	08003d93 	.word	0x08003d93

08003a00 <_cleanup_r>:
 8003a00:	4901      	ldr	r1, [pc, #4]	; (8003a08 <_cleanup_r+0x8>)
 8003a02:	f000 b8af 	b.w	8003b64 <_fwalk_reent>
 8003a06:	bf00      	nop
 8003a08:	08003941 	.word	0x08003941

08003a0c <__sfmoreglue>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	2268      	movs	r2, #104	; 0x68
 8003a10:	1e4d      	subs	r5, r1, #1
 8003a12:	4355      	muls	r5, r2
 8003a14:	460e      	mov	r6, r1
 8003a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a1a:	f7ff fad1 	bl	8002fc0 <_malloc_r>
 8003a1e:	4604      	mov	r4, r0
 8003a20:	b140      	cbz	r0, 8003a34 <__sfmoreglue+0x28>
 8003a22:	2100      	movs	r1, #0
 8003a24:	e9c0 1600 	strd	r1, r6, [r0]
 8003a28:	300c      	adds	r0, #12
 8003a2a:	60a0      	str	r0, [r4, #8]
 8003a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a30:	f7ff f982 	bl	8002d38 <memset>
 8003a34:	4620      	mov	r0, r4
 8003a36:	bd70      	pop	{r4, r5, r6, pc}

08003a38 <__sfp_lock_acquire>:
 8003a38:	4801      	ldr	r0, [pc, #4]	; (8003a40 <__sfp_lock_acquire+0x8>)
 8003a3a:	f000 b8b3 	b.w	8003ba4 <__retarget_lock_acquire_recursive>
 8003a3e:	bf00      	nop
 8003a40:	20000245 	.word	0x20000245

08003a44 <__sfp_lock_release>:
 8003a44:	4801      	ldr	r0, [pc, #4]	; (8003a4c <__sfp_lock_release+0x8>)
 8003a46:	f000 b8ae 	b.w	8003ba6 <__retarget_lock_release_recursive>
 8003a4a:	bf00      	nop
 8003a4c:	20000245 	.word	0x20000245

08003a50 <__sinit_lock_acquire>:
 8003a50:	4801      	ldr	r0, [pc, #4]	; (8003a58 <__sinit_lock_acquire+0x8>)
 8003a52:	f000 b8a7 	b.w	8003ba4 <__retarget_lock_acquire_recursive>
 8003a56:	bf00      	nop
 8003a58:	20000246 	.word	0x20000246

08003a5c <__sinit_lock_release>:
 8003a5c:	4801      	ldr	r0, [pc, #4]	; (8003a64 <__sinit_lock_release+0x8>)
 8003a5e:	f000 b8a2 	b.w	8003ba6 <__retarget_lock_release_recursive>
 8003a62:	bf00      	nop
 8003a64:	20000246 	.word	0x20000246

08003a68 <__sinit>:
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	f7ff fff0 	bl	8003a50 <__sinit_lock_acquire>
 8003a70:	69a3      	ldr	r3, [r4, #24]
 8003a72:	b11b      	cbz	r3, 8003a7c <__sinit+0x14>
 8003a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a78:	f7ff bff0 	b.w	8003a5c <__sinit_lock_release>
 8003a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a80:	6523      	str	r3, [r4, #80]	; 0x50
 8003a82:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <__sinit+0x68>)
 8003a84:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <__sinit+0x6c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a8a:	42a3      	cmp	r3, r4
 8003a8c:	bf04      	itt	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	61a3      	streq	r3, [r4, #24]
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f820 	bl	8003ad8 <__sfp>
 8003a98:	6060      	str	r0, [r4, #4]
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 f81c 	bl	8003ad8 <__sfp>
 8003aa0:	60a0      	str	r0, [r4, #8]
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f000 f818 	bl	8003ad8 <__sfp>
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	60e0      	str	r0, [r4, #12]
 8003aac:	2104      	movs	r1, #4
 8003aae:	6860      	ldr	r0, [r4, #4]
 8003ab0:	f7ff ff82 	bl	80039b8 <std>
 8003ab4:	68a0      	ldr	r0, [r4, #8]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	2109      	movs	r1, #9
 8003aba:	f7ff ff7d 	bl	80039b8 <std>
 8003abe:	68e0      	ldr	r0, [r4, #12]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	2112      	movs	r1, #18
 8003ac4:	f7ff ff78 	bl	80039b8 <std>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	61a3      	str	r3, [r4, #24]
 8003acc:	e7d2      	b.n	8003a74 <__sinit+0xc>
 8003ace:	bf00      	nop
 8003ad0:	08003eac 	.word	0x08003eac
 8003ad4:	08003a01 	.word	0x08003a01

08003ad8 <__sfp>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	4607      	mov	r7, r0
 8003adc:	f7ff ffac 	bl	8003a38 <__sfp_lock_acquire>
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <__sfp+0x84>)
 8003ae2:	681e      	ldr	r6, [r3, #0]
 8003ae4:	69b3      	ldr	r3, [r6, #24]
 8003ae6:	b913      	cbnz	r3, 8003aee <__sfp+0x16>
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f7ff ffbd 	bl	8003a68 <__sinit>
 8003aee:	3648      	adds	r6, #72	; 0x48
 8003af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	d503      	bpl.n	8003b00 <__sfp+0x28>
 8003af8:	6833      	ldr	r3, [r6, #0]
 8003afa:	b30b      	cbz	r3, 8003b40 <__sfp+0x68>
 8003afc:	6836      	ldr	r6, [r6, #0]
 8003afe:	e7f7      	b.n	8003af0 <__sfp+0x18>
 8003b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b04:	b9d5      	cbnz	r5, 8003b3c <__sfp+0x64>
 8003b06:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <__sfp+0x88>)
 8003b08:	60e3      	str	r3, [r4, #12]
 8003b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8003b10:	f000 f847 	bl	8003ba2 <__retarget_lock_init_recursive>
 8003b14:	f7ff ff96 	bl	8003a44 <__sfp_lock_release>
 8003b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b20:	6025      	str	r5, [r4, #0]
 8003b22:	61a5      	str	r5, [r4, #24]
 8003b24:	2208      	movs	r2, #8
 8003b26:	4629      	mov	r1, r5
 8003b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b2c:	f7ff f904 	bl	8002d38 <memset>
 8003b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b38:	4620      	mov	r0, r4
 8003b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b3c:	3468      	adds	r4, #104	; 0x68
 8003b3e:	e7d9      	b.n	8003af4 <__sfp+0x1c>
 8003b40:	2104      	movs	r1, #4
 8003b42:	4638      	mov	r0, r7
 8003b44:	f7ff ff62 	bl	8003a0c <__sfmoreglue>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	6030      	str	r0, [r6, #0]
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d1d5      	bne.n	8003afc <__sfp+0x24>
 8003b50:	f7ff ff78 	bl	8003a44 <__sfp_lock_release>
 8003b54:	230c      	movs	r3, #12
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	e7ee      	b.n	8003b38 <__sfp+0x60>
 8003b5a:	bf00      	nop
 8003b5c:	08003eac 	.word	0x08003eac
 8003b60:	ffff0001 	.word	0xffff0001

08003b64 <_fwalk_reent>:
 8003b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b68:	4606      	mov	r6, r0
 8003b6a:	4688      	mov	r8, r1
 8003b6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b70:	2700      	movs	r7, #0
 8003b72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b76:	f1b9 0901 	subs.w	r9, r9, #1
 8003b7a:	d505      	bpl.n	8003b88 <_fwalk_reent+0x24>
 8003b7c:	6824      	ldr	r4, [r4, #0]
 8003b7e:	2c00      	cmp	r4, #0
 8003b80:	d1f7      	bne.n	8003b72 <_fwalk_reent+0xe>
 8003b82:	4638      	mov	r0, r7
 8003b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b88:	89ab      	ldrh	r3, [r5, #12]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d907      	bls.n	8003b9e <_fwalk_reent+0x3a>
 8003b8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b92:	3301      	adds	r3, #1
 8003b94:	d003      	beq.n	8003b9e <_fwalk_reent+0x3a>
 8003b96:	4629      	mov	r1, r5
 8003b98:	4630      	mov	r0, r6
 8003b9a:	47c0      	blx	r8
 8003b9c:	4307      	orrs	r7, r0
 8003b9e:	3568      	adds	r5, #104	; 0x68
 8003ba0:	e7e9      	b.n	8003b76 <_fwalk_reent+0x12>

08003ba2 <__retarget_lock_init_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <__retarget_lock_acquire_recursive>:
 8003ba4:	4770      	bx	lr

08003ba6 <__retarget_lock_release_recursive>:
 8003ba6:	4770      	bx	lr

08003ba8 <__swhatbuf_r>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	460e      	mov	r6, r1
 8003bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	b096      	sub	sp, #88	; 0x58
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	461d      	mov	r5, r3
 8003bb8:	da08      	bge.n	8003bcc <__swhatbuf_r+0x24>
 8003bba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	602a      	str	r2, [r5, #0]
 8003bc2:	061a      	lsls	r2, r3, #24
 8003bc4:	d410      	bmi.n	8003be8 <__swhatbuf_r+0x40>
 8003bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bca:	e00e      	b.n	8003bea <__swhatbuf_r+0x42>
 8003bcc:	466a      	mov	r2, sp
 8003bce:	f000 f907 	bl	8003de0 <_fstat_r>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	dbf1      	blt.n	8003bba <__swhatbuf_r+0x12>
 8003bd6:	9a01      	ldr	r2, [sp, #4]
 8003bd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003be0:	425a      	negs	r2, r3
 8003be2:	415a      	adcs	r2, r3
 8003be4:	602a      	str	r2, [r5, #0]
 8003be6:	e7ee      	b.n	8003bc6 <__swhatbuf_r+0x1e>
 8003be8:	2340      	movs	r3, #64	; 0x40
 8003bea:	2000      	movs	r0, #0
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	b016      	add	sp, #88	; 0x58
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003bf4 <__smakebuf_r>:
 8003bf4:	898b      	ldrh	r3, [r1, #12]
 8003bf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bf8:	079d      	lsls	r5, r3, #30
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	d507      	bpl.n	8003c10 <__smakebuf_r+0x1c>
 8003c00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	6163      	str	r3, [r4, #20]
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
 8003c10:	ab01      	add	r3, sp, #4
 8003c12:	466a      	mov	r2, sp
 8003c14:	f7ff ffc8 	bl	8003ba8 <__swhatbuf_r>
 8003c18:	9900      	ldr	r1, [sp, #0]
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f7ff f9cf 	bl	8002fc0 <_malloc_r>
 8003c22:	b948      	cbnz	r0, 8003c38 <__smakebuf_r+0x44>
 8003c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c28:	059a      	lsls	r2, r3, #22
 8003c2a:	d4ef      	bmi.n	8003c0c <__smakebuf_r+0x18>
 8003c2c:	f023 0303 	bic.w	r3, r3, #3
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	e7e3      	b.n	8003c00 <__smakebuf_r+0xc>
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <__smakebuf_r+0x7c>)
 8003c3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	6020      	str	r0, [r4, #0]
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	81a3      	strh	r3, [r4, #12]
 8003c46:	9b00      	ldr	r3, [sp, #0]
 8003c48:	6163      	str	r3, [r4, #20]
 8003c4a:	9b01      	ldr	r3, [sp, #4]
 8003c4c:	6120      	str	r0, [r4, #16]
 8003c4e:	b15b      	cbz	r3, 8003c68 <__smakebuf_r+0x74>
 8003c50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f8d5 	bl	8003e04 <_isatty_r>
 8003c5a:	b128      	cbz	r0, 8003c68 <__smakebuf_r+0x74>
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	89a0      	ldrh	r0, [r4, #12]
 8003c6a:	4305      	orrs	r5, r0
 8003c6c:	81a5      	strh	r5, [r4, #12]
 8003c6e:	e7cd      	b.n	8003c0c <__smakebuf_r+0x18>
 8003c70:	08003a01 	.word	0x08003a01

08003c74 <__malloc_lock>:
 8003c74:	4801      	ldr	r0, [pc, #4]	; (8003c7c <__malloc_lock+0x8>)
 8003c76:	f7ff bf95 	b.w	8003ba4 <__retarget_lock_acquire_recursive>
 8003c7a:	bf00      	nop
 8003c7c:	20000244 	.word	0x20000244

08003c80 <__malloc_unlock>:
 8003c80:	4801      	ldr	r0, [pc, #4]	; (8003c88 <__malloc_unlock+0x8>)
 8003c82:	f7ff bf90 	b.w	8003ba6 <__retarget_lock_release_recursive>
 8003c86:	bf00      	nop
 8003c88:	20000244 	.word	0x20000244

08003c8c <_raise_r>:
 8003c8c:	291f      	cmp	r1, #31
 8003c8e:	b538      	push	{r3, r4, r5, lr}
 8003c90:	4604      	mov	r4, r0
 8003c92:	460d      	mov	r5, r1
 8003c94:	d904      	bls.n	8003ca0 <_raise_r+0x14>
 8003c96:	2316      	movs	r3, #22
 8003c98:	6003      	str	r3, [r0, #0]
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ca2:	b112      	cbz	r2, 8003caa <_raise_r+0x1e>
 8003ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003ca8:	b94b      	cbnz	r3, 8003cbe <_raise_r+0x32>
 8003caa:	4620      	mov	r0, r4
 8003cac:	f000 f830 	bl	8003d10 <_getpid_r>
 8003cb0:	462a      	mov	r2, r5
 8003cb2:	4601      	mov	r1, r0
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cba:	f000 b817 	b.w	8003cec <_kill_r>
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d00a      	beq.n	8003cd8 <_raise_r+0x4c>
 8003cc2:	1c59      	adds	r1, r3, #1
 8003cc4:	d103      	bne.n	8003cce <_raise_r+0x42>
 8003cc6:	2316      	movs	r3, #22
 8003cc8:	6003      	str	r3, [r0, #0]
 8003cca:	2001      	movs	r0, #1
 8003ccc:	e7e7      	b.n	8003c9e <_raise_r+0x12>
 8003cce:	2400      	movs	r4, #0
 8003cd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	4798      	blx	r3
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e7e0      	b.n	8003c9e <_raise_r+0x12>

08003cdc <raise>:
 8003cdc:	4b02      	ldr	r3, [pc, #8]	; (8003ce8 <raise+0xc>)
 8003cde:	4601      	mov	r1, r0
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	f7ff bfd3 	b.w	8003c8c <_raise_r>
 8003ce6:	bf00      	nop
 8003ce8:	20000018 	.word	0x20000018

08003cec <_kill_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4d07      	ldr	r5, [pc, #28]	; (8003d0c <_kill_r+0x20>)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	602b      	str	r3, [r5, #0]
 8003cfa:	f7fd f807 	bl	8000d0c <_kill>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	d102      	bne.n	8003d08 <_kill_r+0x1c>
 8003d02:	682b      	ldr	r3, [r5, #0]
 8003d04:	b103      	cbz	r3, 8003d08 <_kill_r+0x1c>
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000240 	.word	0x20000240

08003d10 <_getpid_r>:
 8003d10:	f7fc bff4 	b.w	8000cfc <_getpid>

08003d14 <__sread>:
 8003d14:	b510      	push	{r4, lr}
 8003d16:	460c      	mov	r4, r1
 8003d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d1c:	f000 f894 	bl	8003e48 <_read_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	bfab      	itete	ge
 8003d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d26:	89a3      	ldrhlt	r3, [r4, #12]
 8003d28:	181b      	addge	r3, r3, r0
 8003d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d2e:	bfac      	ite	ge
 8003d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d32:	81a3      	strhlt	r3, [r4, #12]
 8003d34:	bd10      	pop	{r4, pc}

08003d36 <__swrite>:
 8003d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d3a:	461f      	mov	r7, r3
 8003d3c:	898b      	ldrh	r3, [r1, #12]
 8003d3e:	05db      	lsls	r3, r3, #23
 8003d40:	4605      	mov	r5, r0
 8003d42:	460c      	mov	r4, r1
 8003d44:	4616      	mov	r6, r2
 8003d46:	d505      	bpl.n	8003d54 <__swrite+0x1e>
 8003d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f000 f868 	bl	8003e24 <_lseek_r>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d5e:	81a3      	strh	r3, [r4, #12]
 8003d60:	4632      	mov	r2, r6
 8003d62:	463b      	mov	r3, r7
 8003d64:	4628      	mov	r0, r5
 8003d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	f000 b817 	b.w	8003d9c <_write_r>

08003d6e <__sseek>:
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	460c      	mov	r4, r1
 8003d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d76:	f000 f855 	bl	8003e24 <_lseek_r>
 8003d7a:	1c43      	adds	r3, r0, #1
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	bf15      	itete	ne
 8003d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d8a:	81a3      	strheq	r3, [r4, #12]
 8003d8c:	bf18      	it	ne
 8003d8e:	81a3      	strhne	r3, [r4, #12]
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <__sclose>:
 8003d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d96:	f000 b813 	b.w	8003dc0 <_close_r>
	...

08003d9c <_write_r>:
 8003d9c:	b538      	push	{r3, r4, r5, lr}
 8003d9e:	4d07      	ldr	r5, [pc, #28]	; (8003dbc <_write_r+0x20>)
 8003da0:	4604      	mov	r4, r0
 8003da2:	4608      	mov	r0, r1
 8003da4:	4611      	mov	r1, r2
 8003da6:	2200      	movs	r2, #0
 8003da8:	602a      	str	r2, [r5, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f7fc ffe5 	bl	8000d7a <_write>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d102      	bne.n	8003dba <_write_r+0x1e>
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	b103      	cbz	r3, 8003dba <_write_r+0x1e>
 8003db8:	6023      	str	r3, [r4, #0]
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	20000240 	.word	0x20000240

08003dc0 <_close_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4d06      	ldr	r5, [pc, #24]	; (8003ddc <_close_r+0x1c>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	f7fc fff1 	bl	8000db2 <_close>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_close_r+0x1a>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_close_r+0x1a>
 8003dd8:	6023      	str	r3, [r4, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000240 	.word	0x20000240

08003de0 <_fstat_r>:
 8003de0:	b538      	push	{r3, r4, r5, lr}
 8003de2:	4d07      	ldr	r5, [pc, #28]	; (8003e00 <_fstat_r+0x20>)
 8003de4:	2300      	movs	r3, #0
 8003de6:	4604      	mov	r4, r0
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	602b      	str	r3, [r5, #0]
 8003dee:	f7fc ffec 	bl	8000dca <_fstat>
 8003df2:	1c43      	adds	r3, r0, #1
 8003df4:	d102      	bne.n	8003dfc <_fstat_r+0x1c>
 8003df6:	682b      	ldr	r3, [r5, #0]
 8003df8:	b103      	cbz	r3, 8003dfc <_fstat_r+0x1c>
 8003dfa:	6023      	str	r3, [r4, #0]
 8003dfc:	bd38      	pop	{r3, r4, r5, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000240 	.word	0x20000240

08003e04 <_isatty_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	; (8003e20 <_isatty_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fc ffeb 	bl	8000dea <_isatty>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_isatty_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_isatty_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000240 	.word	0x20000240

08003e24 <_lseek_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_lseek_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fc ffe4 	bl	8000e00 <_lseek>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_lseek_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_lseek_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000240 	.word	0x20000240

08003e48 <_read_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d07      	ldr	r5, [pc, #28]	; (8003e68 <_read_r+0x20>)
 8003e4c:	4604      	mov	r4, r0
 8003e4e:	4608      	mov	r0, r1
 8003e50:	4611      	mov	r1, r2
 8003e52:	2200      	movs	r2, #0
 8003e54:	602a      	str	r2, [r5, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f7fc ff72 	bl	8000d40 <_read>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d102      	bne.n	8003e66 <_read_r+0x1e>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	b103      	cbz	r3, 8003e66 <_read_r+0x1e>
 8003e64:	6023      	str	r3, [r4, #0]
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20000240 	.word	0x20000240

08003e6c <_gettimeofday>:
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <_gettimeofday+0xc>)
 8003e6e:	2258      	movs	r2, #88	; 0x58
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e76:	4770      	bx	lr
 8003e78:	20000240 	.word	0x20000240

08003e7c <_init>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr

08003e88 <_fini>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr
